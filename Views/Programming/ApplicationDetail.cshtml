@model OAI.Core.DTOs.Programming.WebApplicationDto
@{
    ViewData["Title"] = "AI Asistent - " + Model.Name;
}

@section Styles {
    <style>
        .app-detail-container {
            display: flex;
            gap: 20px;
            height: calc(100vh - 200px);
        }
        
        /* Left panel - 1/3 */
        .app-info-panel {
            flex: 0 0 33.333%;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        /* Right panel - 2/3 */
        .app-chat-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .info-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 15px;
        }
        
        .info-card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 16px;
            border-radius: 10px 10px 0 0;
            font-size: 0.9rem;
            font-weight: 600;
        }
        
        .info-card-body {
            padding: 15px;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            font-size: 0.85rem;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .info-item:last-child {
            border-bottom: none;
        }
        
        .info-label {
            color: #6c757d;
            font-weight: 500;
        }
        
        .info-value {
            color: #212529;
            text-align: right;
            font-weight: 400;
        }
        
        /* Chat styles */
        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-header h4 {
            margin: 0;
            font-size: 1.1rem;
        }
        
        .gap-2 {
            gap: 0.5rem;
        }
        
        .ms-1 {
            margin-left: 0.25rem;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        
        .chat-input-container {
            padding: 15px;
            border-top: 1px solid #dee2e6;
            background: white;
        }
        
        .chat-input-group {
            display: flex;
            gap: 10px;
        }
        
        .chat-input {
            flex: 1;
            border-radius: 25px;
            border: 1px solid #dee2e6;
            padding: 10px 20px;
            font-size: 0.9rem;
            resize: none;
            min-height: 44px;
            max-height: 120px;
        }
        
        .chat-send-btn {
            background: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .chat-send-btn:hover {
            background: #0056b3;
        }
        
        .chat-send-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        
        /* Message styles */
        .message {
            margin-bottom: 15px;
            display: flex;
            gap: 10px;
        }
        
        .message.user {
            flex-direction: row-reverse;
        }
        
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
            flex-shrink: 0;
        }
        
        .message.user .message-avatar {
            background: #007bff;
            color: white;
        }
        
        .message.assistant .message-avatar {
            background: #6c757d;
            color: white;
        }
        
        .message-content {
            max-width: 70%;
            background: white;
            padding: 10px 15px;
            border-radius: 15px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        
        .message.user .message-content {
            background: #007bff;
            color: white;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-top: 5px;
        }
        
        .typing-indicator {
            display: none;
            align-items: center;
            gap: 4px;
            padding: 10px 15px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            width: fit-content;
        }
        
        .typing-indicator span {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #6c757d;
            animation: typing 1.4s infinite;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @@keyframes typing {
            0%, 60%, 100% {
                transform: translateY(0);
            }
            30% {
                transform: translateY(-10px);
            }
        }
        
        .status-badge {
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .status-badge.development {
            background-color: #cce5ff;
            color: #0066cc;
        }
        
        .status-badge.production {
            background-color: #d4edda;
            color: #155724;
        }
        
        .code-snippet {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.85rem;
            color: #e83e8c;
        }
        
        .external-link {
            color: #007bff;
            text-decoration: none;
            font-size: 0.85rem;
        }
        
        .external-link:hover {
            text-decoration: underline;
        }
        
        /* Welcome message */
        .welcome-message {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
        
        .welcome-message i {
            font-size: 3rem;
            color: #dee2e6;
            margin-bottom: 20px;
        }
        
        .welcome-message h5 {
            color: #495057;
            margin-bottom: 10px;
        }
        
        .suggested-prompts {
            margin-top: 30px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
        }
        
        .prompt-chip {
            background: white;
            border: 1px solid #dee2e6;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.85rem;
        }
        
        .prompt-chip:hover {
            background: #f8f9fa;
            border-color: #007bff;
            color: #007bff;
        }
    </style>
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">
                    <i class="fas fa-robot mr-2"></i>AI Asistent pro @Model.Name
                </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Programování</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Applications")">Aplikace</a></li>
                    <li class="breadcrumb-item active">@Model.Name</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="app-detail-container">
            <!-- Left Panel - Application Info -->
            <div class="app-info-panel">
                <!-- Quick Actions -->
                <div class="info-card">
                    <div class="info-card-body">
                        <div class="d-flex flex-column" style="gap: 10px;">
                            @if (!string.IsNullOrEmpty(Model.Url))
                            {
                                <a href="@Model.Url" target="_blank" class="btn btn-success btn-sm">
                                    <i class="fas fa-external-link-alt mr-1"></i>Otevřít aplikaci
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(Model.GitRepository))
                            {
                                <a href="@Model.GitRepository" target="_blank" class="btn btn-dark btn-sm">
                                    <i class="fab fa-git-alt mr-1"></i>Git Repository
                                </a>
                            }
                            <a href="@Url.Action("EditApplication", new { id = Model.Id })" class="btn btn-primary btn-sm">
                                <i class="fas fa-edit mr-1"></i>Upravit aplikaci
                            </a>
                        </div>
                    </div>
                </div>
                
                <!-- Basic Info -->
                <div class="info-card">
                    <div class="info-card-header">
                        <i class="fas fa-info-circle mr-2"></i>Základní informace
                    </div>
                    <div class="info-card-body">
                        <div class="info-item">
                            <span class="info-label">Název</span>
                            <span class="info-value">@Model.Name</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Verze</span>
                            <span class="info-value">@Model.Version</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Status</span>
                            <span class="info-value">
                                <span class="status-badge @Model.Status.ToLower()">@Model.Status</span>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Priorita</span>
                            <span class="info-value">@Model.Priority</span>
                        </div>
                    </div>
                </div>
                
                <!-- Technical Specs -->
                <div class="info-card">
                    <div class="info-card-header">
                        <i class="fas fa-cogs mr-2"></i>Technické specifikace
                    </div>
                    <div class="info-card-body">
                        <div class="info-item">
                            <span class="info-label">Jazyk</span>
                            <span class="info-value">@Model.ProgrammingLanguage</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Framework</span>
                            <span class="info-value">@Model.Framework</span>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Architecture))
                        {
                            <div class="info-item">
                                <span class="info-label">Architektura</span>
                                <span class="info-value">@Model.Architecture</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Database))
                        {
                            <div class="info-item">
                                <span class="info-label">Databáze</span>
                                <span class="info-value">@Model.Database</span>
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Paths -->
                <div class="info-card">
                    <div class="info-card-header">
                        <i class="fas fa-folder-open mr-2"></i>Cesty
                    </div>
                    <div class="info-card-body">
                        <div class="info-item">
                            <span class="info-label">Projekt</span>
                            <span class="info-value">
                                <code class="code-snippet" style="cursor: pointer;" title="Klikněte pro zkopírování">@Model.ProjectPath</code>
                            </span>
                        </div>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                    <div class="info-card">
                        <div class="info-card-header">
                            <i class="fas fa-align-left mr-2"></i>Popis
                        </div>
                        <div class="info-card-body">
                            <p class="mb-0" style="font-size: 0.85rem;">@Model.Description</p>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Right Panel - AI Chat -->
            <div class="app-chat-panel">
                <div class="chat-header">
                    <h4><i class="fas fa-comments mr-2"></i>AI Asistent pro vývoj</h4>
                    <div class="d-flex align-items-center gap-2">
                        <div id="aiStatusIndicator" class="d-flex align-items-center" title="Stav AI serveru">
                            <i class="fas fa-circle text-secondary" id="statusIcon" style="font-size: 0.8rem;"></i>
                            <span class="ms-1 small text-white" id="statusText">Kontroluji...</span>
                        </div>
                        <button class="btn btn-sm btn-light" id="warmupButton" onclick="warmupModels()" title="Zahřát modely" style="display: none;">
                            <i class="fas fa-fire"></i>
                        </button>
                        <button class="btn btn-sm btn-light" onclick="clearChat()" title="Vymazat konverzaci">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="welcome-message">
                        <i class="fas fa-code"></i>
                        <h5>Vítejte v AI asistentovi pro @Model.Name</h5>
                        <p>Jsem zde, abych vám pomohl s vývojem této aplikace. Můžu vám pomoci s:</p>
                        <div class="suggested-prompts">
                            <div class="prompt-chip" onclick="sendPrompt('Analyzuj strukturu projektu')">
                                <i class="fas fa-folder-tree mr-1"></i>Analyzuj strukturu projektu
                            </div>
                            <div class="prompt-chip" onclick="sendPrompt('Najdi možné problémy v kódu')">
                                <i class="fas fa-bug mr-1"></i>Najdi možné problémy
                            </div>
                            <div class="prompt-chip" onclick="sendPrompt('Navrhni vylepšení architektury')">
                                <i class="fas fa-sitemap mr-1"></i>Navrhni vylepšení
                            </div>
                            <div class="prompt-chip" onclick="sendPrompt('Vygeneruj unit testy')">
                                <i class="fas fa-vial mr-1"></i>Vygeneruj testy
                            </div>
                        </div>
                    </div>
                    
                    <div class="message assistant typing-indicator" id="typingIndicator" style="display: none;">
                        <div class="message-avatar">AI</div>
                        <div class="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
                
                <div class="chat-input-container">
                    <form id="chatForm" onsubmit="sendMessage(event)">
                        <div class="chat-input-group">
                            <textarea 
                                id="messageInput" 
                                class="chat-input" 
                                placeholder="Napište svůj dotaz k aplikaci..."
                                rows="1"
                                onkeydown="handleKeyDown(event)"
                                oninput="autoResize(this)"></textarea>
                            <button type="submit" class="chat-send-btn" id="sendButton">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        // Application context
        const appContext = {
            id: '@Model.Id',
            name: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Name)),
            projectPath: @Html.Raw(System.Text.Json.JsonSerializer.Serialize("/Users/lewi/Documents/Vyvoj/OptimalyAI")),
            language: '@Model.ProgrammingLanguage',
            framework: '@Model.Framework',
            description: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Description ?? ""))
        };
        
        // No SignalR needed - using direct API calls
        
        // Send message
        async function sendMessage(event) {
            event.preventDefault();
            
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // Check if AI is available before sending
            const statusIcon = document.getElementById('statusIcon');
            if (statusIcon.classList.contains('text-danger')) {
                toastr.warning('AI server není dostupný. Zkuste to prosím později.');
                return;
            }
            
            // Add user message
            appendMessage(message, 'user');
            
            // Clear input and disable
            input.value = '';
            autoResize(input);
            disableInput();
            showTypingIndicator();
            
            try {
                // Prepare context-aware message
                const contextMessage = `
Kontext aplikace:
- Název: ${appContext.name}
- Cesta: ${appContext.projectPath}
- Jazyk: ${appContext.language}
- Framework: ${appContext.framework}
${appContext.description ? `- Popis: ${appContext.description}` : ''}

Uživatelský dotaz: ${message}`;
                
                // Send to CodingOrchestrator - it will handle both coding and conversation
                const requestBody = {
                    applicationId: appContext.id,
                    prompt: contextMessage,
                    projectPath: appContext.projectPath
                    // ModelId není specifikován - použije se výchozí model z konfigurace orchestrátoru
                };
                
                console.log('Sending request:', requestBody);
                
                const response = await fetch('/api/orchestrators/coding/process', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('API Error:', response.status, errorText);
                    
                    let errorMessage = 'Chyba při komunikaci s AI asistentem';
                    try {
                        const errorJson = JSON.parse(errorText);
                        errorMessage = errorJson.message || errorMessage;
                    } catch (e) {
                        // Not JSON
                    }
                    
                    throw new Error(errorMessage);
                }
                
                const result = await response.json();
                
                if (result.success && result.data) {
                    let responseMessage = '';
                    
                    // Pro konverzační odpovědi - zobrazíme pouze explanation
                    if (result.data.explanation && (!result.data.proposedChanges || result.data.proposedChanges.length === 0)) {
                        responseMessage = result.data.explanation;
                    }
                    // Pro coding odpovědi - zobrazíme celou strukturu
                    else {
                        // Check if there's an analysis
                        if (result.data.projectAnalysis && result.data.projectAnalysis !== "Konverzační dotaz - analýza projektu není potřeba.") {
                            responseMessage += result.data.projectAnalysis + '\n\n';
                        }
                        
                        // Add proposed changes if any
                        if (result.data.proposedChanges && result.data.proposedChanges.length > 0) {
                            responseMessage += '**Navrhované změny:**\n';
                            result.data.proposedChanges.forEach((change, index) => {
                                responseMessage += `${index + 1}. ${change.description}\n`;
                                if (change.code) {
                                    responseMessage += `\`\`\`${change.language || ''}\n${change.code}\n\`\`\`\n`;
                                }
                            });
                        }
                        
                        // Add explanation if available
                        if (result.data.explanation) {
                            responseMessage += result.data.explanation;
                        }
                    }
                    
                    // If no content, show raw data
                    if (!responseMessage.trim()) {
                        responseMessage = JSON.stringify(result.data, null, 2);
                    }
                    
                    appendMessage(responseMessage, 'assistant');
                } else {
                    appendMessage(result.message || 'Nepodařilo se získat odpověď', 'assistant');
                }
                
            } catch (error) {
                console.error('Error:', error);
                const errorMessage = error.message || 'Chyba při zpracování dotazu';
                toastr.error(errorMessage);
                appendMessage(`Omlouvám se, došlo k chybě: ${errorMessage}`, 'assistant');
            } finally {
                hideTypingIndicator();
                enableInput();
                document.getElementById('messageInput').focus();
            }
        }
        
        // Send predefined prompt
        function sendPrompt(prompt) {
            document.getElementById('messageInput').value = prompt;
            sendMessage(new Event('submit'));
        }
        
        // Append message to chat
        function appendMessage(content, sender) {
            const messagesContainer = document.getElementById('chatMessages');
            const welcomeMessage = messagesContainer.querySelector('.welcome-message');
            if (welcomeMessage) {
                welcomeMessage.remove();
            }
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? 'U' : 'AI';
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            
            // Parse markdown and code blocks
            const formattedContent = formatMessage(content);
            contentDiv.innerHTML = formattedContent;
            
            const timeDiv = document.createElement('div');
            timeDiv.className = 'message-time';
            timeDiv.textContent = new Date().toLocaleTimeString('cs-CZ', { hour: '2-digit', minute: '2-digit' });
            
            const contentWrapper = document.createElement('div');
            contentWrapper.appendChild(contentDiv);
            contentWrapper.appendChild(timeDiv);
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(contentWrapper);
            
            messagesContainer.insertBefore(messageDiv, document.getElementById('typingIndicator'));
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Format message (basic markdown support)
        function formatMessage(content) {
            // Escape HTML
            content = content.replace(/&/g, '&amp;')
                           .replace(/</g, '&lt;')
                           .replace(/>/g, '&gt;');
            
            // Code blocks
            content = content.replace(/```(\w+)?\n([\s\S]*?)```/g, function(match, lang, code) {
                return `<pre><code class="language-${lang || 'plaintext'}">${code.trim()}</code></pre>`;
            });
            
            // Inline code
            content = content.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            // Bold
            content = content.replace(/\*\*([^\*]+)\*\*/g, '<strong>$1</strong>');
            
            // Italic
            content = content.replace(/\*([^\*]+)\*/g, '<em>$1</em>');
            
            // Line breaks
            content = content.replace(/\n/g, '<br>');
            
            return content;
        }
        
        // UI helpers
        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'flex';
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }
        
        function disableInput() {
            document.getElementById('messageInput').disabled = true;
            document.getElementById('sendButton').disabled = true;
        }
        
        function enableInput() {
            document.getElementById('messageInput').disabled = false;
            document.getElementById('sendButton').disabled = false;
        }
        
        function clearChat() {
            if (confirm('Opravdu chcete vymazat celou konverzaci?')) {
                location.reload();
            }
        }
        
        // Handle Enter key
        function handleKeyDown(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage(event);
            }
        }
        
        // Auto-resize textarea
        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }
        
        // Copy to clipboard
        document.querySelectorAll('.code-snippet').forEach(elem => {
            elem.addEventListener('click', function() {
                const text = this.textContent;
                navigator.clipboard.writeText(text).then(() => {
                    toastr.success('Cesta zkopírována do schránky!');
                }).catch(() => {
                    toastr.error('Nepodařilo se zkopírovat cestu');
                });
            });
        });
        
        // Check AI server status
        let modelsWarmedUp = false;
        
        async function checkAIStatus() {
            try {
                const response = await fetch('/api/orchestrators/coding/status');
                const result = await response.json();
                
                const statusIcon = document.getElementById('statusIcon');
                const statusText = document.getElementById('statusText');
                const warmupButton = document.getElementById('warmupButton');
                
                if (result.success && result.data) {
                    const data = result.data;
                    
                    if (!data.orchestratorAvailable) {
                        statusIcon.className = 'fas fa-circle text-danger';
                        statusText.textContent = 'Orchestrátor nedostupný';
                        warmupButton.style.display = 'none';
                    } else if (data.orchestratorHealth !== 'Healthy') {
                        statusIcon.className = 'fas fa-circle text-warning';
                        statusText.textContent = 'Orchestrátor má problémy';
                        warmupButton.style.display = 'none';
                    } else if (data.aiServerStatus === 'error' || data.aiServerStatus === 'unknown') {
                        statusIcon.className = 'fas fa-circle text-danger';
                        statusText.textContent = 'AI server nedostupný';
                        warmupButton.style.display = 'none';
                    } else if (!data.defaultModelLoaded && !data.conversationModelLoaded) {
                        statusIcon.className = 'fas fa-circle text-warning';
                        statusText.textContent = 'Modely nejsou načtené';
                        warmupButton.style.display = 'none';
                    } else if (!modelsWarmedUp) {
                        statusIcon.className = 'fas fa-circle text-warning';
                        statusText.textContent = 'Modely načtené (nezahřáté)';
                        warmupButton.style.display = 'inline-block';
                        
                        // Auto warm-up on first load
                        if (!window.warmupAttempted) {
                            window.warmupAttempted = true;
                            warmupModels();
                        }
                    } else {
                        statusIcon.className = 'fas fa-circle text-success';
                        statusText.textContent = 'AI připraveno (zahřáté)';
                        warmupButton.style.display = 'none';
                    }
                } else {
                    statusIcon.className = 'fas fa-circle text-danger';
                    statusText.textContent = 'Chyba připojení';
                    warmupButton.style.display = 'none';
                }
            } catch (error) {
                console.error('Failed to check AI status:', error);
                document.getElementById('statusIcon').className = 'fas fa-circle text-danger';
                document.getElementById('statusText').textContent = 'Chyba připojení';
                document.getElementById('warmupButton').style.display = 'none';
            }
        }
        
        // Warm up models
        async function warmupModels() {
            const statusIcon = document.getElementById('statusIcon');
            const statusText = document.getElementById('statusText');
            const warmupButton = document.getElementById('warmupButton');
            
            statusIcon.className = 'fas fa-circle-notch fa-spin text-warning';
            statusText.textContent = 'Zahřívám modely...';
            warmupButton.disabled = true;
            
            try {
                const response = await fetch('/api/orchestrators/coding/warmup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    modelsWarmedUp = true;
                    statusIcon.className = 'fas fa-circle text-success';
                    statusText.textContent = 'AI připraveno (zahřáté)';
                    warmupButton.style.display = 'none';
                    toastr.success('Modely byly úspěšně zahřáté');
                } else {
                    statusIcon.className = 'fas fa-circle text-warning';
                    statusText.textContent = 'Zahřátí selhalo';
                    toastr.error('Nepodařilo se zahřát všechny modely');
                }
            } catch (error) {
                console.error('Failed to warm up models:', error);
                statusIcon.className = 'fas fa-circle text-warning';
                statusText.textContent = 'Chyba při zahřívání';
                toastr.error('Chyba při zahřívání modelů');
            } finally {
                warmupButton.disabled = false;
                // Re-check status after warm-up
                setTimeout(checkAIStatus, 2000);
            }
        }
        
        // Initialize on load
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('messageInput').focus();
            
            // Check AI status immediately and then every 30 seconds
            checkAIStatus();
            setInterval(checkAIStatus, 30000);
        });
    </script>
}