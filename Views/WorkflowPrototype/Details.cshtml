@using OptimalyAI.ViewModels
@{
    ViewData["Title"] = "Detail projektu";
    var project = ViewBag.Project as ProjectListItemViewModel;
    var workflow = ViewBag.Workflow as WorkflowPrototypeViewModel;
    var hasWorkflow = ViewBag.HasWorkflow ?? false;
    var executionHistory = ViewBag.ExecutionHistory as List<dynamic> ?? new List<dynamic>();
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-8">
                <h1>
                    <i class="fas fa-project-diagram"></i> @project.Name
                    @if (project.Status == "Active")
                    {
                        <span class="badge badge-success">Aktivn√≠</span>
                    }
                    else if (project.Status == "Draft")
                    {
                        <span class="badge badge-warning">Rozpracovan√Ω</span>
                    }
                </h1>
                <p class="text-muted">@project.Description</p>
            </div>
            <div class="col-sm-4 text-right">
                <a href="@Url.Action("Index")" class="btn btn-default">
                    <i class="fas fa-arrow-left"></i> Zpƒõt na seznam
                </a>
                @if (hasWorkflow)
                {
                    <div class="btn-group">
                        <button class="btn btn-warning" onclick="showRunModal('test')">
                            <i class="fas fa-vial"></i> Test run
                        </button>
                        <button class="btn btn-success" onclick="showRunModal('production')">
                            <i class="fas fa-play"></i> Production run
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- Z√°kladn√≠ informace -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-info-circle"></i> Z√°kladn√≠ informace</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-5">ID projektu:</dt>
                            <dd class="col-sm-7"><code>@project.Id.ToString().Substring(0, 8)...</code></dd>
                            
                            <dt class="col-sm-5">Z√°kazn√≠k:</dt>
                            <dd class="col-sm-7">
                                <a href="/Customers">@project.CustomerName</a><br>
                                <small class="text-muted">
                                    <a href="mailto:@project.CustomerEmail">@project.CustomerEmail</a>
                                </small>
                            </dd>
                            
                            <dt class="col-sm-5">Typ workflow:</dt>
                            <dd class="col-sm-7">
                                @switch (project.WorkflowType)
                                {
                                    case "ecommerce_search":
                                        <span class="badge badge-info">üõí E-commerce vyhled√°v√°n√≠</span>
                                        break;
                                    case "content_generation":
                                        <span class="badge badge-warning">üìù Generov√°n√≠ obsahu</span>
                                        break;
                                    case "data_analysis":
                                        <span class="badge badge-primary">üìä Anal√Ωza dat</span>
                                        break;
                                    case "chatbot":
                                        <span class="badge badge-success">üí¨ Chatbot</span>
                                        break;
                                    default:
                                        <span class="badge badge-secondary">‚öôÔ∏è Vlastn√≠</span>
                                        break;
                                }
                            </dd>
                            
                            <dt class="col-sm-5">Spou≈°tƒõn√≠:</dt>
                            <dd class="col-sm-7">
                                @switch (project.TriggerType)
                                {
                                    case "Manual":
                                        <text><i class="fas fa-hand-pointer"></i> Manu√°ln√≠</text>
                                        break;
                                    case "Schedule":
                                        <span><i class="fas fa-clock"></i> Pl√°novan√©</span>
                                        if (project.NextRun.HasValue)
                                        {
                                            <br>
                                            <small>Dal≈°√≠: @project.NextRun.Value.ToString("dd.MM.yyyy HH:mm")</small>
                                        }
                                        break;
                                    case "Event":
                                        <text><i class="fas fa-bolt"></i> Ud√°lostmi</text>
                                        break;
                                }
                            </dd>
                            
                            <dt class="col-sm-5">Poƒçet krok≈Ø:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-info">@project.StageCount</span>
                            </dd>
                        </dl>
                    </div>
                </div>

                <!-- Statistiky -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-chart-bar"></i> Statistiky</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <div class="description-block border-right">
                                    <h5 class="description-header">@project.TotalRuns</h5>
                                    <span class="description-text">CELKEM BƒöH≈Æ</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="description-block">
                                    <h5 class="description-header text-@(project.SuccessRate >= 80 ? "success" : project.SuccessRate >= 50 ? "warning" : "danger")">
                                        @project.SuccessRate%
                                    </h5>
                                    <span class="description-text">√öSPƒö≈†NOST</span>
                                </div>
                            </div>
                        </div>
                        <hr>
                        <div class="text-center">
                            <p class="text-muted">
                                @if (project.LastRun.HasValue)
                                {
                                    <text>Posledn√≠ bƒõh: @project.LastRun.Value.ToString("dd.MM.yyyy HH:mm")</text>
                                    if (project.LastRunSuccess)
                                    {
                                        <span class="badge badge-success ml-2">√öspƒõ≈°n√Ω</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-danger ml-2">Ne√∫spƒõ≈°n√Ω</span>
                                    }
                                }
                                else
                                {
                                    <text>Zat√≠m nebylo spu≈°tƒõno</text>
                                }
                            </p>
                        </div>
                    </div>
                </div>
                
                <!-- Vstupy a v√Ωstupy workflow -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-exchange-alt"></i> Vstupy & V√Ωstupy</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h6><i class="fas fa-sign-in-alt text-primary"></i> Vstup workflow</h6>
                        <dl class="row mb-3" id="inputConfigDisplay">
                            <dt class="col-sm-5">Typ:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-info">üñºÔ∏è Obr√°zky</span>
                            </dd>
                            <dt class="col-sm-5">Form√°t:</dt>
                            <dd class="col-sm-7">JPG, PNG, WebP</dd>
                            <dt class="col-sm-5">Zdroj:</dt>
                            <dd class="col-sm-7">Upload soubor≈Ø / API endpoint</dd>
                            <dt class="col-sm-5">Max. velikost:</dt>
                            <dd class="col-sm-7">10 MB na soubor</dd>
                        </dl>
                        
                        <h6><i class="fas fa-sign-out-alt text-success"></i> V√Ωstup workflow</h6>
                        <dl class="row" id="outputConfigDisplay">
                            <dt class="col-sm-5">Typ:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-success">üìä Excel</span>
                            </dd>
                            <dt class="col-sm-5">Form√°t:</dt>
                            <dd class="col-sm-7">XLSX s v√Ωsledky</dd>
                            <dt class="col-sm-5">Obsah:</dt>
                            <dd class="col-sm-7">
                                <small>
                                    ‚Ä¢ URL nalezen√Ωch produkt≈Ø<br>
                                    ‚Ä¢ Ceny a dostupnost<br>
                                    ‚Ä¢ Sk√≥re podobnosti<br>
                                    ‚Ä¢ Obr√°zky produkt≈Ø
                                </small>
                            </dd>
                        </dl>
                        
                        <button class="btn btn-sm btn-outline-primary mt-2" onclick="$('#ioConfigModal').modal('show')">
                            <i class="fas fa-edit"></i> Upravit I/O
                        </button>
                    </div>
                </div>
                
                <!-- Orchestr√°tor nastaven√≠ -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-robot"></i> AI & Orchestr√°tor</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <form id="orchestratorSettingsForm">
                            <div class="form-group">
                                <label>Orchestr√°tor</label>
                                <select class="form-control" id="defaultOrchestrator">
                                    <option value="ConversationOrchestrator">Conversation Orchestrator</option>
                                    <option value="ToolChainOrchestrator">Tool Chain Orchestrator</option>
                                    <option value="ReActOrchestrator">ReAct Orchestrator</option>
                                    <option value="CustomOrchestrator">Custom Orchestrator</option>
                                </select>
                                <small class="text-muted">V√Ωchoz√≠ orchestr√°tor pro cel√Ω workflow</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Model</label>
                                <select class="form-control" id="defaultModel">
                                    <option value="llama3.1:latest">Llama 3.1 (latest)</option>
                                    <option value="llama3.1:70b">Llama 3.1 (70B)</option>
                                    <option value="mistral:latest">Mistral (latest)</option>
                                    <option value="codellama:latest">Code Llama (latest)</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Temperature <span id="tempValue">0.7</span></label>
                                <input type="range" class="custom-range" id="defaultTemperature" 
                                       min="0" max="2" step="0.1" value="0.7">
                                <small class="text-muted">0 = deterministick√©, 2 = kreativn√≠</small>
                            </div>
                            
                            <div class="form-group">
                                <label>System Prompt</label>
                                <textarea class="form-control" id="defaultSystemPrompt" rows="3">You are a helpful AI assistant.</textarea>
                                <small class="text-muted">V√Ωchoz√≠ instrukce pro AI</small>
                            </div>
                            
                            <div class="form-group">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enableReActByDefault">
                                    <label class="custom-control-label" for="enableReActByDefault">
                                        Povolit ReAct pattern ve v√Ωchoz√≠m nastaven√≠
                                    </label>
                                </div>
                            </div>
                            
                            <button type="button" class="btn btn-sm btn-primary" onclick="saveOrchestratorSettings()">
                                <i class="fas fa-save"></i> Ulo≈æit nastaven√≠
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Workflow kroky -->
            <div class="col-md-8">
                <!-- Vizu√°ln√≠ diagram -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-project-diagram"></i> Workflow diagram</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-sm btn-info" onclick="exportWorkflow()">
                                <i class="fas fa-file-export"></i> Export
                            </button>
                            <button type="button" class="btn btn-sm btn-success" onclick="showRunWorkflowModal()">
                                <i class="fas fa-play"></i> Test
                            </button>
                            <a href="@Url.Action("Index", "WorkflowDesigner", new { projectId = project.Id })" class="btn btn-sm btn-primary">
                                <i class="fas fa-edit"></i> Upravit
                            </a>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="workflow-diagram-container" style="height: 400px; overflow: auto; background: #f8f9fa;">
                            <div id="workflow-diagram" style="width: 2000px; height: 1500px; position: relative;">
                                <svg id="connections-svg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1;">
                                    <defs>
                                        <marker id="arrowhead" markerWidth="8" markerHeight="6" refX="7" refY="3" orient="auto">
                                            <polygon points="0 0, 8 3, 0 6" fill="#007bff" />
                                        </marker>
                                    </defs>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Seznam krok≈Ø -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-layer-group"></i> Kroky workflow</h3>
                    </div>
                    <div class="card-body" id="workflow-steps-container">
                        <div class="text-center py-5">
                            <i class="fas fa-spinner fa-spin fa-2x text-muted"></i>
                            <p class="text-muted mt-2">Naƒç√≠t√°m kroky workflow...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Historie bƒõh≈Ø -->
        <div class="row mt-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-history"></i> Historie bƒõh≈Ø</h3>
                        <div class="card-tools">
                            <button class="btn btn-sm btn-default" onclick="refreshHistory()">
                                <i class="fas fa-sync"></i> Obnovit
                            </button>
                        </div>
                    </div>
                    <div class="card-body table-responsive p-0">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Spu≈°tƒõno</th>
                                    <th>Dokonƒçeno</th>
                                    <th>Trv√°n√≠</th>
                                    <th>Zpracov√°no</th>
                                    <th>Stav</th>
                                    <th>Spu≈°tƒõno</th>
                                    <th>Akce</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (executionHistory != null && executionHistory.Any())
                                {
                                    @* Historie bƒõh≈Ø je prozat√≠m pr√°zdn√° v demo verzi *@
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center text-muted py-4">
                                            Zat√≠m ≈æ√°dn√° historie bƒõh≈Ø
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (executionHistory != null && executionHistory.Count > 10)
                    {
                        <div class="card-footer">
                            <button class="btn btn-sm btn-default">
                                <i class="fas fa-chevron-down"></i> Zobrazit v√≠ce
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

<!-- I/O Edit Modal -->
<div class="modal fade" id="ioEditModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Konfigurace vstup≈Ø a v√Ωstup≈Ø projektu</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Input Configuration -->
                <div class="card mb-3">
                    <div class="card-header bg-primary text-white">
                        <h6 class="mb-0"><i class="fas fa-sign-in-alt"></i> Vstup workflow</h6>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label>Typ vstupu</label>
                            <select class="form-control" id="projectInputType" onchange="updateInputConfigForm()">
                                <option value="directory">üìÇ Adres√°≈ô</option>
                                <option value="ftp">üì° FTP Server</option>
                                <option value="api">üåê API Endpoint</option>
                                <option value="database">üóÑÔ∏è Datab√°ze</option>
                                <option value="s3">‚òÅÔ∏è Amazon S3</option>
                                <option value="sharepoint">üìé SharePoint</option>
                            </select>
                        </div>
                        
                        <div id="inputConfigForm">
                            <!-- Directory config (default) -->
                            <div id="directoryInputConfig" class="input-config">
                                <div class="form-group">
                                    <label>Cesta k adres√°≈ôi <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="inputDirectoryPath" 
                                           placeholder="C:\Data\InputFiles nebo /home/user/data"
                                           value="/home/optimaly/workflow-inputs/e-commerce">
                                </div>
                                <div class="form-group">
                                    <label>Filtr soubor≈Ø</label>
                                    <input type="text" class="form-control" id="inputFileFilter" 
                                           placeholder="*.jpg,*.png,*.jpeg" value="*.jpg,*.png,*.jpeg">
                                </div>
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="inputIncludeSubdirs" checked>
                                    <label class="custom-control-label" for="inputIncludeSubdirs">
                                        Zahrnout podadres√°≈ôe
                                    </label>
                                </div>
                            </div>
                            
                            <!-- FTP config -->
                            <div id="ftpInputConfig" class="input-config" style="display: none;">
                                <div class="form-group">
                                    <label>FTP Server <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="ftpHost" placeholder="ftp.example.com">
                                </div>
                                <div class="form-group">
                                    <label>Port</label>
                                    <input type="number" class="form-control" id="ftpPort" value="21">
                                </div>
                                <div class="form-group">
                                    <label>U≈æivatel <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="ftpUser">
                                </div>
                                <div class="form-group">
                                    <label>Heslo <span class="text-danger">*</span></label>
                                    <input type="password" class="form-control" id="ftpPassword">
                                </div>
                                <div class="form-group">
                                    <label>Vzd√°len√° cesta</label>
                                    <input type="text" class="form-control" id="ftpPath" placeholder="/uploads/images">
                                </div>
                            </div>
                            
                            <!-- API config -->
                            <div id="apiInputConfig" class="input-config" style="display: none;">
                                <div class="form-group">
                                    <label>API Endpoint URL <span class="text-danger">*</span></label>
                                    <input type="url" class="form-control" id="apiEndpoint" 
                                           placeholder="https://api.example.com/v1/products">
                                </div>
                                <div class="form-group">
                                    <label>Metoda</label>
                                    <select class="form-control" id="apiMethod">
                                        <option value="GET">GET</option>
                                        <option value="POST">POST</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Autentizace</label>
                                    <select class="form-control" id="apiAuthType" onchange="updateApiAuthFields()">
                                        <option value="none">≈Ω√°dn√°</option>
                                        <option value="bearer">Bearer Token</option>
                                        <option value="basic">Basic Auth</option>
                                        <option value="apikey">API Key</option>
                                    </select>
                                </div>
                                <div id="apiAuthFields"></div>
                            </div>
                            
                            <!-- Database config -->
                            <div id="databaseInputConfig" class="input-config" style="display: none;">
                                <div class="form-group">
                                    <label>Typ datab√°ze</label>
                                    <select class="form-control" id="dbType">
                                        <option value="postgresql">PostgreSQL</option>
                                        <option value="mysql">MySQL</option>
                                        <option value="mssql">MS SQL Server</option>
                                        <option value="mongodb">MongoDB</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Server <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="dbHost" placeholder="localhost">
                                </div>
                                <div class="form-group">
                                    <label>Port</label>
                                    <input type="number" class="form-control" id="dbPort" value="5432">
                                </div>
                                <div class="form-group">
                                    <label>Datab√°ze <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="dbName">
                                </div>
                                <div class="form-group">
                                    <label>U≈æivatel <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="dbUser">
                                </div>
                                <div class="form-group">
                                    <label>Heslo <span class="text-danger">*</span></label>
                                    <input type="password" class="form-control" id="dbPassword">
                                </div>
                                <div class="form-group">
                                    <label>Query <span class="text-danger">*</span></label>
                                    <textarea class="form-control" id="dbQuery" rows="3" 
                                              placeholder="SELECT * FROM products WHERE active = true"></textarea>
                                </div>
                            </div>
                            
                            <!-- S3 config -->
                            <div id="s3InputConfig" class="input-config" style="display: none;">
                                <div class="form-group">
                                    <label>AWS Access Key <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="s3AccessKey">
                                </div>
                                <div class="form-group">
                                    <label>AWS Secret Key <span class="text-danger">*</span></label>
                                    <input type="password" class="form-control" id="s3SecretKey">
                                </div>
                                <div class="form-group">
                                    <label>Region</label>
                                    <select class="form-control" id="s3Region">
                                        <option value="eu-central-1">EU (Frankfurt)</option>
                                        <option value="us-east-1">US East (N. Virginia)</option>
                                        <option value="us-west-2">US West (Oregon)</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Bucket <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="s3Bucket">
                                </div>
                                <div class="form-group">
                                    <label>Prefix (cesta)</label>
                                    <input type="text" class="form-control" id="s3Prefix" placeholder="inputs/images/">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Output Configuration -->
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h6 class="mb-0"><i class="fas fa-sign-out-alt"></i> V√Ωstup workflow</h6>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label>Typ v√Ωstupu</label>
                            <select class="form-control" id="projectOutputType" onchange="updateOutputConfigForm()">
                                <option value="directory">üìÇ Adres√°≈ô</option>
                                <option value="ftp">üì° FTP Server</option>
                                <option value="api">üåê API Webhook</option>
                                <option value="database">üóÑÔ∏è Datab√°ze</option>
                                <option value="s3">‚òÅÔ∏è Amazon S3</option>
                                <option value="email">üìß Email</option>
                            </select>
                        </div>
                        
                        <div id="outputConfigForm">
                            <!-- Directory output config (default) -->
                            <div id="directoryOutputConfig" class="output-config">
                                <div class="form-group">
                                    <label>Cesta k adres√°≈ôi <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="outputDirectoryPath" 
                                           placeholder="C:\Data\OutputFiles nebo /home/user/results"
                                           value="/home/optimaly/workflow-outputs/e-commerce">
                                </div>
                                <div class="form-group">
                                    <label>Form√°t n√°zvu souboru</label>
                                    <input type="text" class="form-control" id="outputFileFormat" 
                                           value="results_{date}_{time}.xlsx">
                                    <small class="text-muted">Pou≈æijte {date}, {time}, {projectId}</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zru≈°it</button>
                <button type="button" class="btn btn-success" onclick="testIOConnection()">
                    <i class="fas fa-plug"></i> Test p≈ôipojen√≠
                </button>
                <button type="button" class="btn btn-primary" onclick="saveProjectIO()">
                    <i class="fas fa-save"></i> Ulo≈æit konfiguraci
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Run Workflow Modal -->
<div class="modal fade" id="runWorkflowModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-play-circle"></i> Spustit workflow - @project.Name
                </h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Input Type Selection -->
                <div class="form-group">
                    <label>Typ vstupu</label>
                    <select class="form-control" id="inputType" onchange="updateInputForm()">
                        <option value="files">üìÅ Soubory</option>
                        <option value="directory">üìÇ Adres√°≈ô</option>
                        <option value="api">üåê API Endpoint</option>
                        <option value="database">üóÑÔ∏è Datab√°ze</option>
                        <option value="manual">‚úèÔ∏è Manu√°ln√≠ vstup</option>
                        <option value="csv">üìä CSV soubor</option>
                        <option value="images">üñºÔ∏è Obr√°zky</option>
                    </select>
                </div>
                
                <!-- Dynamic Input Form -->
                <div id="inputFormContainer">
                    <!-- Files Input (default) -->
                    <div id="filesInput" class="input-type-form">
                        <div class="form-group">
                            <label>Vyberte soubory</label>
                            <input type="file" class="form-control-file" id="workflowFiles" multiple>
                            <small class="text-muted">M≈Ø≈æete vybrat v√≠ce soubor≈Ø najednou</small>
                        </div>
                    </div>
                    
                    <!-- Directory Input -->
                    <div id="directoryInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>Cesta k adres√°≈ôi</label>
                            <input type="text" class="form-control" id="directoryPath" placeholder="/path/to/directory">
                            <small class="text-muted">Zadejte absolutn√≠ cestu k adres√°≈ôi</small>
                        </div>
                        <div class="form-group">
                            <label>Filtr soubor≈Ø (voliteln√©)</label>
                            <input type="text" class="form-control" id="fileFilter" placeholder="*.jpg, *.png">
                            <small class="text-muted">Nap≈ô: *.csv, *.json, *.jpg</small>
                        </div>
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="includeSubdirs">
                            <label class="custom-control-label" for="includeSubdirs">
                                Zahrnout podadres√°≈ôe
                            </label>
                        </div>
                    </div>
                    
                    <!-- API Input -->
                    <div id="apiInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>API Endpoint URL</label>
                            <input type="url" class="form-control" id="apiUrl" placeholder="https://api.example.com/data">
                        </div>
                        <div class="form-group">
                            <label>HTTP Metoda</label>
                            <select class="form-control" id="httpMethod">
                                <option value="GET">GET</option>
                                <option value="POST">POST</option>
                                <option value="PUT">PUT</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Headers (JSON)</label>
                            <textarea class="form-control" id="apiHeaders" rows="3" placeholder='{"Authorization": "Bearer token"}'></textarea>
                        </div>
                        <div class="form-group">
                            <label>Body (pro POST/PUT)</label>
                            <textarea class="form-control" id="apiBody" rows="3"></textarea>
                        </div>
                    </div>
                    
                    <!-- Database Input -->
                    <div id="databaseInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>Typ datab√°ze</label>
                            <select class="form-control" id="dbType">
                                <option value="postgresql">PostgreSQL</option>
                                <option value="mysql">MySQL</option>
                                <option value="mssql">MS SQL Server</option>
                                <option value="mongodb">MongoDB</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Connection String</label>
                            <input type="text" class="form-control" id="connectionString" placeholder="Host=localhost;Database=mydb;Username=user;Password=pass">
                            <small class="text-muted">P≈ôipojovac√≠ ≈ôetƒõzec k datab√°zi</small>
                        </div>
                        <div class="form-group">
                            <label>SQL Query / Collection</label>
                            <textarea class="form-control" id="dbQuery" rows="3" placeholder="SELECT * FROM products WHERE category = 'electronics'"></textarea>
                        </div>
                    </div>
                    
                    <!-- Manual Input -->
                    <div id="manualInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>Vstupn√≠ data (JSON)</label>
                            <textarea class="form-control" id="manualData" rows="5" placeholder='{"items": ["item1", "item2"], "config": {"key": "value"}}'></textarea>
                            <small class="text-muted">Zadejte data ve form√°tu JSON</small>
                        </div>
                    </div>
                    
                    <!-- CSV Input -->
                    <div id="csvInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>CSV soubor</label>
                            <input type="file" class="form-control-file" id="csvFile" accept=".csv">
                        </div>
                        <div class="form-group">
                            <label>Oddƒõlovaƒç</label>
                            <select class="form-control" id="csvDelimiter">
                                <option value=",">ƒå√°rka (,)</option>
                                <option value=";">St≈ôedn√≠k (;)</option>
                                <option value="\t">Tabul√°tor</option>
                                <option value="|">Pipe (|)</option>
                            </select>
                        </div>
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="csvHasHeaders" checked>
                            <label class="custom-control-label" for="csvHasHeaders">
                                Prvn√≠ ≈ô√°dek obsahuje hlaviƒçky
                            </label>
                        </div>
                    </div>
                    
                    <!-- Images Input -->
                    <div id="imagesInput" class="input-type-form" style="display: none;">
                        <div class="form-group">
                            <label>Vyberte obr√°zky</label>
                            <input type="file" class="form-control-file" id="imageFiles" multiple accept="image/*">
                            <small class="text-muted">Podporovan√© form√°ty: JPG, PNG, GIF, WebP</small>
                        </div>
                        <div class="form-group">
                            <label>√öƒçel zpracov√°n√≠</label>
                            <select class="form-control" id="imageProcessingType">
                                <option value="analysis">Anal√Ωza obsahu</option>
                                <option value="similarity">Hled√°n√≠ podobn√Ωch</option>
                                <option value="extraction">Extrakce textu (OCR)</option>
                                <option value="enhancement">Vylep≈°en√≠ kvality</option>
                            </select>
                        </div>
                    </div>
                </div>
                
                <!-- Output Configuration -->
                <hr>
                <h6><i class="fas fa-download"></i> Konfigurace v√Ωstupu</h6>
                <div class="form-group">
                    <label>Typ v√Ωstupu</label>
                    <select class="form-control" id="outputType">
                        <option value="download">üíæ St√°hnout soubor</option>
                        <option value="api">üì§ Odeslat na API</option>
                        <option value="database">üíø Ulo≈æit do datab√°ze</option>
                        <option value="email">üìß Odeslat emailem</option>
                        <option value="display">üñ•Ô∏è Zobrazit v prohl√≠≈æeƒçi</option>
                    </select>
                </div>
                
                <!-- Advanced Options -->
                <div class="mt-3">
                    <button type="button" class="btn btn-sm btn-link" onclick="toggleAdvancedOptions()">
                        <i class="fas fa-cog"></i> Pokroƒçil√© mo≈ænosti
                    </button>
                    <div id="advancedOptions" style="display: none;">
                        <div class="form-group">
                            <label>Priorita</label>
                            <select class="form-control" id="executionPriority">
                                <option value="low">N√≠zk√°</option>
                                <option value="normal" selected>Norm√°ln√≠</option>
                                <option value="high">Vysok√°</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Timeout (minuty)</label>
                            <input type="number" class="form-control" id="executionTimeout" value="30" min="1" max="240">
                        </div>
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="custom-control-input" id="enableDebugMode">
                            <label class="custom-control-label" for="enableDebugMode">
                                Debug re≈æim (detailn√≠ logy)
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zru≈°it</button>
                <button type="button" class="btn btn-primary" onclick="validateAndPrepareExecution()">
                    <i class="fas fa-check"></i> Ovƒõ≈ôit vstupy
                </button>
                <button type="button" class="btn btn-success" onclick="executeWorkflow()" style="display: none;" id="executeBtn">
                    <i class="fas fa-rocket"></i> Spustit workflow
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Step Modal -->
<div class="modal fade" id="stepEditModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upravit krok workflow</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="editingStepId">
                <div class="form-group">
                    <label>N√°zev kroku</label>
                    <input type="text" class="form-control" id="stepName" required>
                </div>
                <div class="form-group">
                    <label>Popis</label>
                    <textarea class="form-control" id="stepDescription" rows="2"></textarea>
                </div>
                <div class="form-group" id="stepToolsSection">
                    <label>AI N√°stroje</label>
                    <select multiple class="form-control select2" id="stepTools" style="width: 100%;">
                        @foreach(var cat in ViewBag.ToolsByCategory ?? new Dictionary<string, List<string>>())
                        {
                            <optgroup label="@cat.Key">
                                @foreach(var tool in cat.Value)
                                {
                                    <option value="@tool">@tool.Replace("_", " ")</option>
                                }
                            </optgroup>
                        }
                    </select>
                    <small class="text-muted">Vyberte n√°stroje pro tento krok</small>
                </div>
                <div class="form-group" id="stepOrchestratorSection">
                    <div class="custom-control custom-switch mb-3">
                        <input type="checkbox" class="custom-control-input" id="stepUseReAct">
                        <label class="custom-control-label" for="stepUseReAct">
                            <i class="fas fa-brain"></i> Pou≈æ√≠t ReAct pattern
                        </label>
                    </div>
                    <label>Orchestr√°tor (voliteln√©)</label>
                    <select class="form-control" id="stepOrchestrator">
                        <option value="">-- Pou≈æ√≠t v√Ωchoz√≠ --</option>
                        <option value="ConversationOrchestrator">Conversation Orchestrator</option>
                        <option value="ToolChainOrchestrator">Tool Chain Orchestrator</option>
                        <option value="ReActOrchestrator">ReAct Orchestrator</option>
                        <option value="CustomOrchestrator">Custom Orchestrator</option>
                    </select>
                </div>
                <div class="form-group" id="stepAdvancedSection">
                    <button type="button" class="btn btn-sm btn-link" onclick="toggleStepAdvancedSettings()">
                        <i class="fas fa-cog"></i> Pokroƒçil√° nastaven√≠
                    </button>
                    <div id="stepAdvancedSettingsContent" style="display: none;">
                        <div class="form-group">
                            <label>Model (voliteln√©)</label>
                            <input type="text" class="form-control" id="stepModel" placeholder="nap≈ô. llama3.1:70b">
                        </div>
                        <div class="form-group">
                            <label>Temperature (voliteln√©)</label>
                            <input type="number" class="form-control" id="stepTemperature" min="0" max="2" step="0.1" placeholder="0.7">
                        </div>
                        <div class="form-group">
                            <label>System Prompt (voliteln√©)</label>
                            <textarea class="form-control" id="stepSystemPrompt" rows="2" placeholder="Specifick√Ω prompt pro tento krok"></textarea>
                        </div>
                    </div>
                </div>
                <div class="form-group" id="stepConditionSection" style="display: none;">
                    <label>Podm√≠nka</label>
                    <input type="text" class="form-control" id="stepCondition" placeholder="result > 0">
                    <small class="text-muted">Podm√≠nka pro rozhodovac√≠ uzel</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zru≈°it</button>
                <button type="button" class="btn btn-primary" onclick="saveStepChanges()">
                    <i class="fas fa-save"></i> Ulo≈æit zmƒõny
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load workflow diagram
        $(document).ready(function() {
            loadWorkflowDiagram();
            loadOrchestratorSettings();
            loadWorkflowSteps();
        });
        
        function loadWorkflowDiagram() {
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    console.log('LoadWorkflow response:', response);
                    if (response.success) {
                        renderWorkflowDiagram(response.orchestratorData);
                        // Update I/O display if available
                        if (response.orchestratorData && response.orchestratorData.input && response.orchestratorData.output) {
                            updateIODisplay(response.orchestratorData.input, response.orchestratorData.output);
                        }
                    } else {
                        // No workflow yet
                        $('#workflow-diagram').html(`
                            <div class="text-center p-5">
                                <i class="fas fa-project-diagram fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Zaƒçnƒõte vytvo≈ôen√≠m workflow</p>
                                <a href="/WorkflowDesigner/Index?projectId=@project.Id" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Vytvo≈ôit workflow
                                </a>
                            </div>
                        `);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('LoadWorkflow error:', status, error);
                    $('#workflow-diagram').html(`
                        <div class="text-center p-5 text-danger">
                            <i class="fas fa-exclamation-circle"></i> Chyba p≈ôi naƒç√≠t√°n√≠ diagramu
                            <br><small>${error || 'Nezn√°m√° chyba'}</small>
                        </div>
                    `);
                }
            });
        }
        
        function renderWorkflowDiagram(data) {
            // Check if we have any workflow data
            if (!data) {
                $('#workflow-diagram').html('<div class="text-center p-5 text-muted"><i class="fas fa-info-circle"></i> ≈Ω√°dn√Ω ulo≈æen√Ω diagram</div>');
                return;
            }
            
            // If we only have settings but no actual workflow steps
            if (!data.steps || data.steps.length === 0) {
                $('#workflow-diagram').html(`
                    <div class="text-center p-5">
                        <i class="fas fa-project-diagram fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Workflow je≈°tƒõ nebylo vytvo≈ôeno</p>
                        <a href="/WorkflowDesigner/Index?projectId=@project.Id" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Vytvo≈ôit workflow
                        </a>
                    </div>
                `);
                return;
            }
            
            // Check for node positions
            if (!data.metadata || !data.metadata.nodePositions || Object.keys(data.metadata.nodePositions).length === 0) {
                // If we have steps but no positions, show a simple list
                $('#workflow-diagram').html(`
                    <div class="p-4">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle"></i> Workflow existuje, ale nem√° ulo≈æen√© pozice uzl≈Ø. 
                            <a href="/WorkflowDesigner/Index?projectId=@project.Id">Otev≈ôete designer</a> pro vizualizaci.
                        </div>
                        <h5>Kroky workflow:</h5>
                        <ul>
                            ${data.steps.map(s => `<li>${s.name} (${s.type})</li>`).join('')}
                        </ul>
                    </div>
                `);
                return;
            }
            
            const positions = data.metadata.nodePositions;
            const svg = document.getElementById('connections-svg');
            
            // Clear previous content
            $('#workflow-diagram .workflow-node-readonly').remove();
            svg.querySelectorAll('line').forEach(line => line.remove());
            
            // Find min/max positions for auto-layout
            let minY = Infinity, maxY = -Infinity;
            const centerX = 1000; // Fixed center X
            
            // First pass: create nodes and find vertical range
            const nodes = {};
            Object.entries(positions).forEach(([nodeId, pos]) => {
                nodes[nodeId] = {
                    ...pos,
                    id: nodeId,
                    y: pos.y
                };
                minY = Math.min(minY, pos.y);
                maxY = Math.max(maxY, pos.y);
            });
            
            // Calculate vertical spacing - make nodes closer
            const verticalSpacing = 80; // Fixed closer spacing
            const horizontalSpacing = 200; // Spacing for branches
            const startY = 50;
            
            // Build a layout that respects branching
            const layoutMap = new Map();
            const visited = new Set();
            let currentY = startY;
            
            // Helper function to layout nodes
            function layoutNode(nodeId, x, y, level = 0) {
                if (visited.has(nodeId)) return y;
                visited.add(nodeId);
                
                const node = nodes[nodeId];
                if (!node) return y;
                
                layoutMap.set(nodeId, { x, y });
                
                // Find connected nodes
                const step = data.steps?.find(s => s.id === nodeId);
                if (!step) {
                    node.newX = x;
                    node.newY = y;
                    return y;
                }
                
                let nextY = y + verticalSpacing;
                
                if (step.type === 'decision' && step.branches) {
                    // Layout branches side by side at the same Y position
                    const leftX = x - horizontalSpacing / 2;
                    const rightX = x + horizontalSpacing / 2;
                    let branchMaxY = nextY;
                    
                    if (step.branches.true && step.branches.true[0]) {
                        branchMaxY = Math.max(branchMaxY, layoutNode(step.branches.true[0], leftX, nextY, level + 1));
                    }
                    if (step.branches.false && step.branches.false[0]) {
                        branchMaxY = Math.max(branchMaxY, layoutNode(step.branches.false[0], rightX, nextY, level + 1));
                    }
                    nextY = branchMaxY;
                } else if (step.type === 'parallel-gateway' && step.branches) {
                    // Layout parallel branches at the same Y position
                    const branchCount = step.branches.length;
                    const totalWidth = (branchCount - 1) * horizontalSpacing;
                    let branchX = x - totalWidth / 2;
                    let branchMaxY = nextY;
                    
                    step.branches.forEach(targetId => {
                        branchMaxY = Math.max(branchMaxY, layoutNode(targetId, branchX, nextY, level + 1));
                        branchX += horizontalSpacing;
                    });
                    nextY = branchMaxY;
                } else if (step.next) {
                    // Regular next node
                    nextY = layoutNode(step.next, x, nextY, level + 1);
                }
                
                node.newX = x;
                node.newY = y;
                return nextY;
            }
            
            // Start layout from first step
            if (data.firstStepId) {
                layoutNode(data.firstStepId, centerX - 75, currentY);
            }
            
            // Layout any unvisited nodes
            Object.entries(nodes).forEach(([nodeId, node]) => {
                if (!visited.has(nodeId)) {
                    currentY += verticalSpacing;
                    layoutNode(nodeId, centerX - 75, currentY);
                }
            });
            
            // Render nodes with new positions
            Object.values(nodes).forEach(node => {
                const nodeDiv = $('<div>')
                    .addClass('workflow-node-readonly')
                    .addClass(node.type)
                    .attr('id', node.id)
                    .css({
                        left: node.newX + 'px',
                        top: node.newY + 'px'
                    });
                
                // Find node info
                let nodeName = node.id;
                let nodeIcon = 'fas fa-circle';
                if (node.type === 'start') {
                    nodeName = 'Zaƒç√°tek';
                    nodeIcon = 'fas fa-play-circle';
                } else if (node.type === 'end') {
                    nodeName = 'Konec';
                    nodeIcon = 'fas fa-stop-circle';
                } else {
                    const step = data.steps?.find(s => s.id === node.id);
                    if (step) {
                        nodeName = step.name;
                        if (step.type === 'decision') nodeIcon = 'fas fa-question-circle';
                        else if (step.type === 'parallel-gateway') nodeIcon = 'fas fa-code-branch';
                        else nodeIcon = 'fas fa-tasks';
                    }
                }
                
                nodeDiv.html(`<i class="${nodeIcon}"></i> ${nodeName}`);
                $('#workflow-diagram').append(nodeDiv);
            });
            
            // Render connections
            setTimeout(() => {
                renderConnections(data, nodes);
            }, 50);
            
            // Center diagram
            setTimeout(() => {
                const container = $('#workflow-diagram-container');
                container.scrollLeft(centerX - (container.width() / 2));
                container.scrollTop(0);
            }, 100);
        }
        
        function renderConnections(data, nodesObj) {
            const svg = document.getElementById('connections-svg');
            const nodeMap = {};
            Object.values(nodesObj).forEach(n => nodeMap[n.id] = n);
            
            // Connection from start to first step
            if (data.startNodeId && data.firstStepId) {
                drawConnection(nodeMap[data.startNodeId], nodeMap[data.firstStepId]);
            }
            
            // Connections between steps
            if (data.steps) {
                data.steps.forEach(step => {
                    const fromNode = nodeMap[step.id];
                    if (!fromNode) return;
                    
                    if (step.type === 'decision' && step.branches) {
                        // Decision branches
                        if (step.branches.true && step.branches.true[0]) {
                            drawConnection(fromNode, nodeMap[step.branches.true[0]], 'green');
                        }
                        if (step.branches.false && step.branches.false[0]) {
                            drawConnection(fromNode, nodeMap[step.branches.false[0]], 'red');
                        }
                    } else if (step.type === 'parallel-gateway' && step.branches) {
                        // Parallel branches
                        step.branches.forEach(targetId => {
                            drawConnection(fromNode, nodeMap[targetId], 'purple');
                        });
                    } else if (step.next) {
                        // Regular connection
                        drawConnection(fromNode, nodeMap[step.next]);
                    }
                });
            }
            
            // Connections to end
            if (data.lastStepIds && data.endNodeId) {
                data.lastStepIds.forEach(stepId => {
                    drawConnection(nodeMap[stepId], nodeMap[data.endNodeId]);
                });
            }
            
            function drawConnection(from, to, color = '#007bff') {
                if (!from || !to) return;
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                // More accurate centering based on node width (150px min-width)
                const nodeWidth = 150;
                const nodeHeight = 40;
                line.setAttribute('x1', from.newX + (nodeWidth / 2));
                line.setAttribute('y1', from.newY + nodeHeight);
                line.setAttribute('x2', to.newX + (nodeWidth / 2));
                line.setAttribute('y2', to.newY);
                line.setAttribute('stroke', color);
                line.setAttribute('stroke-width', '2');
                line.setAttribute('marker-end', 'url(#arrowhead)');
                svg.appendChild(line);
            }
        }
        
        function testWorkflow() {
            // Show test modal or redirect to test page
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData) {
                        // Convert to JSON and show/download
                        const jsonStr = JSON.stringify(response.orchestratorData, null, 2);
                        
                        // Create modal to show workflow
                        const modal = `
                            <div class="modal fade" id="workflowTestModal" tabindex="-1">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Test Workflow - Orchestrator Format</h5>
                                            <button type="button" class="close" data-dismiss="modal">
                                                <span>&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="alert alert-info">
                                                <i class="fas fa-info-circle"></i> Toto je orchestr√°tor form√°t va≈°eho workflow p≈ôipraven√Ω ke spu≈°tƒõn√≠.
                                            </div>
                                            <pre class="bg-light p-3" style="max-height: 400px; overflow-y: auto;">${escapeHtml(jsonStr)}</pre>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-primary" onclick="downloadWorkflow()">
                                                <i class="fas fa-download"></i> St√°hnout JSON
                                            </button>
                                            <button type="button" class="btn btn-success" onclick="executeWorkflow()">
                                                <i class="fas fa-play"></i> Spustit (Demo)
                                            </button>
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Zav≈ô√≠t</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        
                        // Remove existing modal if any
                        $('#workflowTestModal').remove();
                        $('body').append(modal);
                        $('#workflowTestModal').modal('show');
                        
                        // Store workflow data for download
                        window.currentWorkflowData = response.orchestratorData;
                    } else {
                        toastr.warning('Workflow je≈°tƒõ nen√≠ nakonfigurov√°no');
                    }
                },
                error: function() {
                    toastr.error('Chyba p≈ôi naƒç√≠t√°n√≠ workflow');
                }
            });
        }
        
        function showWorkflowInfo() {
            // Show workflow statistics and info
            const modal = `
                <div class="modal fade" id="workflowInfoModal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Informace o Workflow</h5>
                                <button type="button" class="close" data-dismiss="modal">
                                    <span>&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <dl class="row">
                                    <dt class="col-sm-4">Typ workflow:</dt>
                                    <dd class="col-sm-8">@project.WorkflowType</dd>
                                    
                                    <dt class="col-sm-4">Poƒçet krok≈Ø:</dt>
                                    <dd class="col-sm-8">@project.StageCount</dd>
                                    
                                    <dt class="col-sm-4">Spou≈°tƒõn√≠:</dt>
                                    <dd class="col-sm-8">@project.TriggerType</dd>
                                    
                                    <dt class="col-sm-4">√öspƒõ≈°nost:</dt>
                                    <dd class="col-sm-8">@project.SuccessRate%</dd>
                                    
                                    <dt class="col-sm-4">Celkem bƒõh≈Ø:</dt>
                                    <dd class="col-sm-8">@project.TotalRuns</dd>
                                </dl>
                                
                                <div class="alert alert-info mt-3">
                                    <h6>Orchestr√°tor integrace:</h6>
                                    <p class="mb-0">Tento workflow vyu≈æ√≠v√° orchestr√°tory pro inteligentn√≠ ≈ô√≠zen√≠ AI √∫loh a n√°stroj≈Ø.</p>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <a href="@Url.Action("Index", "WorkflowDesigner", new { projectId = project.Id })" class="btn btn-primary">
                                    <i class="fas fa-edit"></i> Upravit
                                </a>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zav≈ô√≠t</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            $('#workflowInfoModal').remove();
            $('body').append(modal);
            $('#workflowInfoModal').modal('show');
        }
        
        function downloadWorkflow() {
            if (window.currentWorkflowData) {
                const jsonStr = JSON.stringify(window.currentWorkflowData, null, 2);
                const blob = new Blob([jsonStr], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `workflow-${('@project.Id').substring(0, 8)}-orchestrator.json`;
                a.click();
                URL.revokeObjectURL(url);
                toastr.success('Workflow sta≈æeno');
            }
        }
        
        function executeWorkflow() {
            toastr.info('Spou≈°t√≠m workflow v demo m√≥du...');
            
            // Simulate workflow execution
            setTimeout(() => {
                toastr.success('Krok 1: Inicializace orchestr√°toru');
                setTimeout(() => {
                    toastr.success('Krok 2: Naƒç√≠t√°n√≠ AI model≈Ø');
                    setTimeout(() => {
                        toastr.success('Krok 3: Spou≈°tƒõn√≠ workflow krok≈Ø');
                        setTimeout(() => {
                            toastr.success('Workflow dokonƒçeno √∫spƒõ≈°nƒõ!');
                            $('#workflowTestModal').modal('hide');
                        }, 1500);
                    }, 1000);
                }, 1000);
            }, 500);
        }
        
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        
        function loadWorkflowSteps() {
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData && response.orchestratorData.steps) {
                        renderWorkflowSteps(response.orchestratorData.steps);
                    } else {
                        $('#workflow-steps-container').html(`
                            <div class="text-center py-5">
                                <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Workflow je≈°tƒõ nebylo nakonfigurov√°no</p>
                                <a href="/WorkflowDesigner/Index?projectId=@project.Id" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Vytvo≈ôit workflow
                                </a>
                            </div>
                        `);
                    }
                },
                error: function() {
                    $('#workflow-steps-container').html(`
                        <div class="text-center py-5 text-danger">
                            <i class="fas fa-exclamation-circle fa-2x"></i>
                            <p class="mt-2">Nepoda≈ôilo se naƒç√≠st kroky workflow</p>
                        </div>
                    `);
                }
            });
        }
        
        function renderWorkflowSteps(steps) {
            if (!steps || steps.length === 0) {
                $('#workflow-steps-container').html(`
                    <div class="text-center py-5">
                        <p class="text-muted">≈Ω√°dn√© kroky v workflow</p>
                    </div>
                `);
                return;
            }
            
            let timelineHtml = '<div class="timeline">';
            
            steps.forEach((step, index) => {
                const typeIcons = {
                    'process': 'fas fa-cog',
                    'ai-tool': 'fas fa-robot',
                    'decision': 'fas fa-code-branch',
                    'parallel-gateway': 'fas fa-project-diagram'
                };
                
                const typeLabels = {
                    'process': 'Proces',
                    'ai-tool': 'AI n√°stroj',
                    'decision': 'Rozhodnut√≠',
                    'parallel-gateway': 'Paraleln√≠ br√°na'
                };
                
                timelineHtml += `
                    <div class="time-label">
                        <span class="bg-primary">Krok ${index + 1}</span>
                    </div>
                    <div>
                        <i class="${typeIcons[step.type] || 'fas fa-circle'} bg-info"></i>
                        <div class="timeline-item">
                            <h3 class="timeline-header">
                                ${step.name}
                                <div class="float-right">
                `;
                
                // Add badges
                if (step.useReAct) {
                    timelineHtml += `
                        <span class="badge badge-purple">
                            <i class="fas fa-brain"></i> ReAct
                        </span>
                    `;
                }
                
                if (step.tools && step.tools.length > 0) {
                    timelineHtml += `
                        <span class="badge badge-info">
                            <i class="fas fa-wrench"></i> ${step.tools.length}
                        </span>
                    `;
                }
                
                if (step.orchestrator) {
                    timelineHtml += `
                        <span class="badge badge-warning" title="${step.orchestrator}">
                            <i class="fas fa-brain"></i> Custom
                        </span>
                    `;
                }
                
                timelineHtml += `
                                    <button class="btn btn-xs btn-outline-primary" onclick="editWorkflowStep('${step.id}')"
                                            title="Upravit krok">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                </div>
                            </h3>
                            <div class="timeline-body">
                `;
                
                if (step.description) {
                    timelineHtml += `<p>${step.description}</p>`;
                }
                
                timelineHtml += `
                    <div class="mb-2">
                        <span class="badge badge-secondary">${typeLabels[step.type] || step.type}</span>
                `;
                
                if (step.type === 'decision' && step.branches) {
                    const trueBranch = step.branches.true && step.branches.true.length > 0;
                    const falseBranch = step.branches.false && step.branches.false.length > 0;
                    if (trueBranch || falseBranch) {
                        timelineHtml += `<span class="badge badge-light ml-1">Vƒõtve: ${trueBranch ? '‚úì' : ''} ${falseBranch ? '‚úó' : ''}</span>`;
                    }
                }
                
                timelineHtml += '</div>';
                
                // Show tools
                if (step.tools && step.tools.length > 0) {
                    timelineHtml += '<div><small class="text-muted">N√°stroje:</small><br>';
                    step.tools.forEach(tool => {
                        timelineHtml += `<span class="badge badge-light mr-1"><i class="fas fa-wrench"></i> ${tool.replace(/_/g, ' ')}</span>`;
                    });
                    timelineHtml += '</div>';
                }
                
                // Show custom settings if any
                if (step.systemPrompt || step.model || step.temperature !== null) {
                    timelineHtml += '<div class="mt-2"><small class="text-muted">Vlastn√≠ nastaven√≠:</small><br>';
                    if (step.model) timelineHtml += `<span class="badge badge-dark mr-1">Model: ${step.model}</span>`;
                    if (step.temperature !== null) timelineHtml += `<span class="badge badge-dark mr-1">Temp: ${step.temperature}</span>`;
                    if (step.systemPrompt) timelineHtml += `<br><small class="text-muted font-italic">"${step.systemPrompt.substring(0, 50)}..."</small>`;
                    timelineHtml += '</div>';
                }
                
                timelineHtml += `
                            </div>
                        </div>
                    </div>
                `;
            });
            
            timelineHtml += '<div><i class="fas fa-check bg-success"></i></div></div>';
            
            $('#workflow-steps-container').html(timelineHtml);
        }
        
        function exportWorkflow() {
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData) {
                        const jsonStr = JSON.stringify(response.orchestratorData, null, 2);
                        const blob = new Blob([jsonStr], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `workflow-@project.Name.Replace(" ", "_")-export.json`;
                        a.click();
                        URL.revokeObjectURL(url);
                        toastr.success('Workflow exportov√°no');
                    } else {
                        toastr.warning('≈Ω√°dn√© workflow k exportu');
                    }
                },
                error: function() {
                    toastr.error('Chyba p≈ôi exportu workflow');
                }
            });
        }
        
        function refreshHistory() {
            toastr.info('Obnovuji historii...');
            setTimeout(() => {
                location.reload();
            }, 500);
        }
        
        function viewExecutionDetails(executionId) {
            toastr.info('Zobrazen√≠ detail≈Ø bƒõhu (v produkci)');
        }
        
        function downloadLog(executionId) {
            toastr.info('Stahov√°n√≠ logu (v produkci)');
        }
        
        // Update temperature value display
        $('#defaultTemperature').on('input', function() {
            $('#tempValue').text($(this).val());
        });
        
        // Load orchestrator settings on page load
        function loadOrchestratorSettings() {
            // Load from workflow metadata if available
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData && response.orchestratorData.metadata && response.orchestratorData.metadata.settings) {
                        const settings = response.orchestratorData?.metadata?.settings || {};
                        $('#defaultOrchestrator').val(settings.defaultOrchestrator || 'ConversationOrchestrator');
                        $('#defaultModel').val(settings.defaultModel || 'llama3.1:latest');
                        $('#defaultTemperature').val(settings.defaultTemperature || 0.7);
                        $('#tempValue').text(settings.defaultTemperature || 0.7);
                        $('#defaultSystemPrompt').val(settings.defaultSystemPrompt || 'You are a helpful AI assistant.');
                        $('#enableReActByDefault').prop('checked', settings.enableReActByDefault || false);
                    }
                }
            });
        }
        
        // Save orchestrator settings
        function saveOrchestratorSettings() {
            const settings = {
                defaultOrchestrator: $('#defaultOrchestrator').val(),
                defaultModel: $('#defaultModel').val(),
                defaultTemperature: parseFloat($('#defaultTemperature').val()),
                defaultSystemPrompt: $('#defaultSystemPrompt').val(),
                enableReActByDefault: $('#enableReActByDefault').is(':checked')
            };
            
            // Save settings as part of workflow metadata
            $.ajax({
                url: '/WorkflowDesigner/SaveOrchestratorSettings',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    projectId: '@project.Id',
                    settings: settings
                }),
                success: function(response) {
                    if (response.success) {
                        toastr.success('Nastaven√≠ orchestr√°toru ulo≈æeno!');
                    } else {
                        toastr.error('Chyba p≈ôi ukl√°d√°n√≠ nastaven√≠');
                    }
                },
                error: function() {
                    toastr.error('Chyba p≈ôi komunikaci se serverem');
                }
            });
        }
        
        // Store workflow data globally for editing
        let currentWorkflowData = null;
        
        // Edit workflow step
        function editWorkflowStep(stepId) {
            if (!currentWorkflowData || !currentWorkflowData.steps) {
                toastr.error('Workflow data nen√≠ k dispozici');
                return;
            }
            
            const step = currentWorkflowData.steps.find(s => s.id === stepId);
            if (!step) {
                toastr.error('Krok nebyl nalezen');
                return;
            }
            
            // Populate modal with step data
            $('#editingStepId').val(stepId);
            $('#stepName').val(step.name);
            $('#stepDescription').val(step.description || '');
            
            // Show/hide sections based on step type
            if (step.type === 'decision') {
                $('#stepToolsSection').hide();
                $('#stepOrchestratorSection').hide();
                $('#stepAdvancedSection').hide();
                $('#stepConditionSection').show();
                $('#stepCondition').val(step.condition || '');
            } else if (step.type === 'parallel-gateway') {
                $('#stepToolsSection').hide();
                $('#stepOrchestratorSection').hide();
                $('#stepAdvancedSection').hide();
                $('#stepConditionSection').hide();
            } else {
                $('#stepToolsSection').show();
                $('#stepOrchestratorSection').show();
                $('#stepAdvancedSection').show();
                $('#stepConditionSection').hide();
                
                // Initialize Select2 if not already done
                if (!$('#stepTools').hasClass('select2-hidden-accessible')) {
                    $('#stepTools').select2({
                        placeholder: 'Vyberte n√°stroje',
                        allowClear: true
                    });
                }
                
                // Set selected tools
                $('#stepTools').val(step.tools || []).trigger('change');
                
                // Set orchestrator settings
                $('#stepUseReAct').prop('checked', step.useReAct || false);
                $('#stepOrchestrator').val(step.orchestrator || '');
                $('#stepModel').val(step.model || '');
                $('#stepTemperature').val(step.temperature || '');
                $('#stepSystemPrompt').val(step.systemPrompt || '');
            }
            
            // Reset advanced settings visibility
            $('#stepAdvancedSettingsContent').hide();
            
            $('#stepEditModal').modal('show');
        }
        
        // Save step changes
        function saveStepChanges() {
            const stepId = $('#editingStepId').val();
            const step = currentWorkflowData.steps.find(s => s.id === stepId);
            if (!step) return;
            
            // Update step data
            step.name = $('#stepName').val();
            step.description = $('#stepDescription').val();
            
            if (step.type === 'decision') {
                step.condition = $('#stepCondition').val();
            } else if (step.type !== 'parallel-gateway') {
                step.tools = $('#stepTools').val() || [];
                step.useReAct = $('#stepUseReAct').is(':checked');
                step.orchestrator = $('#stepOrchestrator').val() || null;
                step.model = $('#stepModel').val() || null;
                step.temperature = $('#stepTemperature').val() ? parseFloat($('#stepTemperature').val()) : null;
                step.systemPrompt = $('#stepSystemPrompt').val() || null;
            }
            
            // Save to server
            $.ajax({
                url: '/WorkflowDesigner/SaveWorkflow',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    ProjectId: '@project.Id',
                    WorkflowData: currentWorkflowData
                }),
                success: function(response) {
                    if (response.success) {
                        toastr.success('Krok byl √∫spƒõ≈°nƒõ upraven');
                        $('#stepEditModal').modal('hide');
                        
                        // Reload workflow steps to show updated data
                        loadWorkflowSteps();
                    } else {
                        toastr.error('Chyba p≈ôi ukl√°d√°n√≠ zmƒõn');
                    }
                },
                error: function() {
                    toastr.error('Chyba p≈ôi komunikaci se serverem');
                }
            });
        }
        
        // Toggle advanced settings in step edit modal
        function toggleStepAdvancedSettings() {
            $('#stepAdvancedSettingsContent').slideToggle();
        }
        
        // Update I/O display
        function updateIODisplay(input, output) {
            // Update input display
            if (input) {
                let inputHtml = `
                    <dt class="col-sm-5">Typ:</dt>
                    <dd class="col-sm-7">
                        <span class="badge badge-info">${getInputTypeIcon(input.type)} ${getInputTypeLabel(input.type)}</span>
                    </dd>
                `;
                
                // Add type-specific details
                switch(input.type) {
                    case 'directory':
                        if (input.path) {
                            inputHtml += `
                                <dt class="col-sm-5">Cesta:</dt>
                                <dd class="col-sm-7"><code>${input.path}</code></dd>
                            `;
                        }
                        if (input.filter) {
                            inputHtml += `
                                <dt class="col-sm-5">Filtr:</dt>
                                <dd class="col-sm-7">${input.filter}</dd>
                            `;
                        }
                        break;
                        
                    case 'ftp':
                        if (input.host) {
                            inputHtml += `
                                <dt class="col-sm-5">Server:</dt>
                                <dd class="col-sm-7">${input.host}:${input.port || 21}</dd>
                            `;
                        }
                        if (input.path) {
                            inputHtml += `
                                <dt class="col-sm-5">Cesta:</dt>
                                <dd class="col-sm-7">${input.path}</dd>
                            `;
                        }
                        break;
                        
                    case 'api':
                        if (input.endpoint) {
                            inputHtml += `
                                <dt class="col-sm-5">Endpoint:</dt>
                                <dd class="col-sm-7"><small>${input.endpoint}</small></dd>
                            `;
                        }
                        if (input.method) {
                            inputHtml += `
                                <dt class="col-sm-5">Metoda:</dt>
                                <dd class="col-sm-7">${input.method}</dd>
                            `;
                        }
                        break;
                        
                    case 'database':
                        if (input.dbType) {
                            inputHtml += `
                                <dt class="col-sm-5">Datab√°ze:</dt>
                                <dd class="col-sm-7">${input.dbType}</dd>
                            `;
                        }
                        if (input.host && input.database) {
                            inputHtml += `
                                <dt class="col-sm-5">P≈ôipojen√≠:</dt>
                                <dd class="col-sm-7">${input.host}/${input.database}</dd>
                            `;
                        }
                        break;
                        
                    case 's3':
                        if (input.bucket) {
                            inputHtml += `
                                <dt class="col-sm-5">Bucket:</dt>
                                <dd class="col-sm-7">s3://${input.bucket}/${input.prefix || ''}</dd>
                            `;
                        }
                        if (input.region) {
                            inputHtml += `
                                <dt class="col-sm-5">Region:</dt>
                                <dd class="col-sm-7">${input.region}</dd>
                            `;
                        }
                        break;
                }
                
                $('#inputConfigDisplay').html(inputHtml);
            }
            
            // Update output display
            if (output) {
                let outputHtml = `
                    <dt class="col-sm-5">Typ:</dt>
                    <dd class="col-sm-7">
                        <span class="badge badge-success">${getOutputTypeIcon(output.type)} ${getOutputTypeLabel(output.type)}</span>
                    </dd>
                `;
                
                if (output.description) {
                    outputHtml += `
                        <dt class="col-sm-5">Popis:</dt>
                        <dd class="col-sm-7">${output.description}</dd>
                    `;
                }
                
                if (output.config) {
                    if (output.config.format) {
                        outputHtml += `
                            <dt class="col-sm-5">Form√°t:</dt>
                            <dd class="col-sm-7">${output.config.format.toUpperCase()}</dd>
                        `;
                    }
                    if (output.config.fields) {
                        outputHtml += `
                            <dt class="col-sm-5">Obsah:</dt>
                            <dd class="col-sm-7">
                                <small>
                                    ${output.config.fields.map(f => '‚Ä¢ ' + f).join('<br>')}
                                </small>
                            </dd>
                        `;
                    }
                }
                
                $('#outputConfigDisplay').html(outputHtml);
            }
        }
        
        // Get input type icon
        function getInputTypeIcon(type) {
            const icons = {
                'files': 'üìÅ',
                'images': 'üñºÔ∏è',
                'api': 'üåê',
                'database': 'üóÑÔ∏è',
                'csv': 'üìä',
                'manual': '‚úèÔ∏è'
            };
            return icons[type] || 'üì•';
        }
        
        // Get input type label
        function getInputTypeLabel(type) {
            const labels = {
                'files': 'Soubory',
                'images': 'Obr√°zky',
                'api': 'API',
                'database': 'Datab√°ze',
                'csv': 'CSV',
                'manual': 'Manu√°ln√≠'
            };
            return labels[type] || type;
        }
        
        // Get output type icon
        function getOutputTypeIcon(type) {
            const icons = {
                'excel': 'üìä',
                'json': 'üìÑ',
                'csv': 'üìä',
                'api': 'üì§',
                'database': 'üíø',
                'email': 'üìß'
            };
            return icons[type] || 'üì§';
        }
        
        // Get output type label
        function getOutputTypeLabel(type) {
            const labels = {
                'excel': 'Excel',
                'json': 'JSON',
                'csv': 'CSV',
                'api': 'API',
                'database': 'Datab√°ze',
                'email': 'Email'
            };
            return labels[type] || type;
        }
        
        // Show I/O edit modal
        function showIOEditModal() {
            // Load current I/O settings if available
            if (currentWorkflowData && currentWorkflowData.input && currentWorkflowData.output) {
                $('#projectInputType').val(currentWorkflowData.input.type);
                $('#projectOutputType').val(currentWorkflowData.output.type);
                // TODO: Load descriptions from saved data
            }
            
            $('#ioEditModal').modal('show');
        }
        
        // Update input configuration form
        function updateInputConfigForm() {
            const inputType = $('#projectInputType').val();
            
            // Hide all configs
            $('.input-config').hide();
            
            // Show selected config
            $(`#${inputType}InputConfig`).show();
        }
        
        // Update output configuration form
        function updateOutputConfigForm() {
            const outputType = $('#projectOutputType').val();
            
            // Hide all configs
            $('.output-config').hide();
            
            // Show selected config (we need to add these)
            if (outputType === 'directory') {
                $('#directoryOutputConfig').show();
            } else {
                // For now, show directory config as placeholder
                $('#directoryOutputConfig').show();
                toastr.info(`Konfigurace pro ${outputType} bude p≈ôid√°na`);
            }
        }
        
        // Update API auth fields
        function updateApiAuthFields() {
            const authType = $('#apiAuthType').val();
            let authHtml = '';
            
            switch(authType) {
                case 'bearer':
                    authHtml = `
                        <div class="form-group">
                            <label>Bearer Token <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="apiBearerToken">
                        </div>
                    `;
                    break;
                case 'basic':
                    authHtml = `
                        <div class="form-group">
                            <label>U≈æivatel <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="apiBasicUser">
                        </div>
                        <div class="form-group">
                            <label>Heslo <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="apiBasicPassword">
                        </div>
                    `;
                    break;
                case 'apikey':
                    authHtml = `
                        <div class="form-group">
                            <label>API Key <span class="text-danger">*</span></label>
                            <input type="password" class="form-control" id="apiKey">
                        </div>
                        <div class="form-group">
                            <label>Um√≠stƒõn√≠ kl√≠ƒçe</label>
                            <select class="form-control" id="apiKeyLocation">
                                <option value="header">V hlaviƒçce</option>
                                <option value="query">V URL</option>
                            </select>
                        </div>
                    `;
                    break;
            }
            
            $('#apiAuthFields').html(authHtml);
        }
        
        // Test I/O connection
        function testIOConnection() {
            const inputType = $('#projectInputType').val();
            
            // Simulate connection test
            toastr.info('Testuji p≈ôipojen√≠...');
            
            setTimeout(() => {
                // In real implementation, this would actually test the connection
                toastr.success('P≈ôipojen√≠ √∫spƒõ≈°n√©!');
            }, 1500);
        }
        
        // Save project I/O configuration
        function saveProjectIO() {
            const inputType = $('#projectInputType').val();
            const outputType = $('#projectOutputType').val();
            
            // Gather input configuration based on type
            let inputConfig = {
                type: inputType
            };
            
            switch(inputType) {
                case 'directory':
                    inputConfig.path = $('#inputDirectoryPath').val();
                    inputConfig.filter = $('#inputFileFilter').val();
                    inputConfig.includeSubdirs = $('#inputIncludeSubdirs').is(':checked');
                    break;
                    
                case 'ftp':
                    inputConfig.host = $('#ftpHost').val();
                    inputConfig.port = $('#ftpPort').val();
                    inputConfig.user = $('#ftpUser').val();
                    inputConfig.password = $('#ftpPassword').val(); // Should be encrypted
                    inputConfig.path = $('#ftpPath').val();
                    break;
                    
                case 'api':
                    inputConfig.endpoint = $('#apiEndpoint').val();
                    inputConfig.method = $('#apiMethod').val();
                    inputConfig.authType = $('#apiAuthType').val();
                    // Add auth details based on type
                    break;
                    
                case 'database':
                    inputConfig.dbType = $('#dbType').val();
                    inputConfig.host = $('#dbHost').val();
                    inputConfig.port = $('#dbPort').val();
                    inputConfig.database = $('#dbName').val();
                    inputConfig.user = $('#dbUser').val();
                    inputConfig.password = $('#dbPassword').val(); // Should be encrypted
                    inputConfig.query = $('#dbQuery').val();
                    break;
                    
                case 's3':
                    inputConfig.accessKey = $('#s3AccessKey').val();
                    inputConfig.secretKey = $('#s3SecretKey').val(); // Should be encrypted
                    inputConfig.region = $('#s3Region').val();
                    inputConfig.bucket = $('#s3Bucket').val();
                    inputConfig.prefix = $('#s3Prefix').val();
                    break;
            }
            
            // Gather output configuration
            let outputConfig = {
                type: outputType
            };
            
            if (outputType === 'directory') {
                outputConfig.path = $('#outputDirectoryPath').val();
                outputConfig.fileFormat = $('#outputFileFormat').val();
            }
            
            // Create complete I/O configuration
            const ioConfig = {
                input: inputConfig,
                output: outputConfig
            };
            
            // Update display immediately
            updateIODisplay(ioConfig.input, ioConfig.output);
            
            // Save to workflow if exists
            if (currentWorkflowData) {
                currentWorkflowData.input = ioConfig.input;
                currentWorkflowData.output = ioConfig.output;
                
                // Save to server
                $.ajax({
                    url: '/WorkflowDesigner/SaveWorkflow',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        ProjectId: '@project.Id',
                        WorkflowData: currentWorkflowData
                    }),
                    success: function(response) {
                        if (response.success) {
                            toastr.success('Nastaven√≠ vstup≈Ø a v√Ωstup≈Ø ulo≈æeno');
                            $('#ioEditModal').modal('hide');
                        } else {
                            toastr.error('Chyba p≈ôi ukl√°d√°n√≠');
                        }
                    },
                    error: function() {
                        toastr.error('Chyba p≈ôi komunikaci se serverem');
                    }
                });
            } else {
                // If no workflow exists yet, create minimal one with just I/O
                const minimalWorkflow = {
                    input: ioConfig.input,
                    output: ioConfig.output,
                    steps: [],
                    metadata: {
                        createdAt: new Date().toISOString()
                    }
                };
                
                $.ajax({
                    url: '/WorkflowDesigner/SaveWorkflow',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        ProjectId: '@project.Id',
                        WorkflowData: minimalWorkflow
                    }),
                    success: function(response) {
                        if (response.success) {
                            toastr.success('Nastaven√≠ vstup≈Ø a v√Ωstup≈Ø ulo≈æeno');
                            $('#ioEditModal').modal('hide');
                            currentWorkflowData = minimalWorkflow;
                        } else {
                            toastr.error('Chyba p≈ôi ukl√°d√°n√≠');
                        }
                    },
                    error: function() {
                        toastr.error('Chyba p≈ôi komunikaci se serverem');
                    }
                });
            }
        }
        
        // Show run workflow modal
        function showRunWorkflowModal() {
            $('#runWorkflowModal').modal('show');
        }
        
        // Update input form based on selected type
        function updateInputForm() {
            const inputType = $('#inputType').val();
            
            // Hide all forms
            $('.input-type-form').hide();
            
            // Show selected form
            $(`#${inputType}Input`).show();
            
            // Reset validation
            $('#executeBtn').hide();
        }
        
        // Toggle advanced options
        function toggleAdvancedOptions() {
            $('#advancedOptions').slideToggle();
        }
        
        // Validate and prepare execution
        function validateAndPrepareExecution() {
            const inputType = $('#inputType').val();
            let isValid = true;
            let errors = [];
            
            // Validate based on input type
            switch(inputType) {
                case 'files':
                    const files = $('#workflowFiles')[0].files;
                    if (files.length === 0) {
                        errors.push('Vyberte alespo≈à jeden soubor');
                        isValid = false;
                    }
                    break;
                    
                case 'directory':
                    const dirPath = $('#directoryPath').val();
                    if (!dirPath) {
                        errors.push('Zadejte cestu k adres√°≈ôi');
                        isValid = false;
                    }
                    break;
                    
                case 'api':
                    const apiUrl = $('#apiUrl').val();
                    if (!apiUrl) {
                        errors.push('Zadejte URL API endpointu');
                        isValid = false;
                    }
                    // Validate headers JSON
                    const headers = $('#apiHeaders').val();
                    if (headers) {
                        try {
                            JSON.parse(headers);
                        } catch (e) {
                            errors.push('Headers mus√≠ b√Ωt validn√≠ JSON');
                            isValid = false;
                        }
                    }
                    break;
                    
                case 'database':
                    const connStr = $('#connectionString').val();
                    const query = $('#dbQuery').val();
                    if (!connStr) {
                        errors.push('Zadejte connection string');
                        isValid = false;
                    }
                    if (!query) {
                        errors.push('Zadejte SQL query nebo n√°zev kolekce');
                        isValid = false;
                    }
                    break;
                    
                case 'manual':
                    const manualData = $('#manualData').val();
                    if (!manualData) {
                        errors.push('Zadejte vstupn√≠ data');
                        isValid = false;
                    } else {
                        try {
                            JSON.parse(manualData);
                        } catch (e) {
                            errors.push('Data mus√≠ b√Ωt validn√≠ JSON');
                            isValid = false;
                        }
                    }
                    break;
                    
                case 'csv':
                    const csvFile = $('#csvFile')[0].files;
                    if (csvFile.length === 0) {
                        errors.push('Vyberte CSV soubor');
                        isValid = false;
                    }
                    break;
                    
                case 'images':
                    const imageFiles = $('#imageFiles')[0].files;
                    if (imageFiles.length === 0) {
                        errors.push('Vyberte alespo≈à jeden obr√°zek');
                        isValid = false;
                    }
                    break;
            }
            
            if (isValid) {
                toastr.success('Vstupy jsou validn√≠!');
                $('#executeBtn').show();
                
                // Show preview of what will be executed
                showExecutionPreview();
            } else {
                toastr.error(errors.join('<br>'), 'Chyby ve vstupech');
            }
        }
        
        // Show execution preview
        function showExecutionPreview() {
            const inputType = $('#inputType').val();
            let preview = 'Workflow bude spu≈°tƒõno s n√°sleduj√≠c√≠mi parametry:\\n\\n';
            
            preview += `Typ vstupu: ${$('#inputType option:selected').text()}\\n`;
            
            switch(inputType) {
                case 'files':
                    const files = $('#workflowFiles')[0].files;
                    preview += `Poƒçet soubor≈Ø: ${files.length}\\n`;
                    for(let i = 0; i < Math.min(3, files.length); i++) {
                        preview += `- ${files[i].name}\\n`;
                    }
                    if (files.length > 3) preview += `... a ${files.length - 3} dal≈°√≠ch\\n`;
                    break;
                    
                case 'directory':
                    preview += `Adres√°≈ô: ${$('#directoryPath').val()}\\n`;
                    if ($('#fileFilter').val()) {
                        preview += `Filtr: ${$('#fileFilter').val()}\\n`;
                    }
                    preview += `Podadres√°≈ôe: ${$('#includeSubdirs').is(':checked') ? 'Ano' : 'Ne'}\\n`;
                    break;
                    
                case 'api':
                    preview += `URL: ${$('#apiUrl').val()}\\n`;
                    preview += `Metoda: ${$('#httpMethod').val()}\\n`;
                    break;
                    
                case 'database':
                    preview += `Datab√°ze: ${$('#dbType option:selected').text()}\\n`;
                    preview += `Query: ${$('#dbQuery').val().substring(0, 50)}...\\n`;
                    break;
            }
            
            preview += `\\nV√Ωstup: ${$('#outputType option:selected').text()}`;
            
            console.log(preview);
        }
        
        // Execute workflow
        function executeWorkflow() {
            const inputType = $('#inputType').val();
            const outputType = $('#outputType').val();
            
            // Gather all input data
            const executionData = {
                projectId: '@project.Id',
                inputType: inputType,
                outputType: outputType,
                priority: $('#executionPriority').val(),
                timeout: parseInt($('#executionTimeout').val()),
                debug: $('#enableDebugMode').is(':checked'),
                inputData: {}
            };
            
            // Collect input-specific data
            switch(inputType) {
                case 'files':
                    // For files, we'd need to handle file upload
                    const files = $('#workflowFiles')[0].files;
                    executionData.inputData.fileCount = files.length;
                    executionData.inputData.fileNames = Array.from(files).map(f => f.name);
                    break;
                    
                case 'directory':
                    executionData.inputData = {
                        path: $('#directoryPath').val(),
                        filter: $('#fileFilter').val(),
                        includeSubdirs: $('#includeSubdirs').is(':checked')
                    };
                    break;
                    
                case 'api':
                    executionData.inputData = {
                        url: $('#apiUrl').val(),
                        method: $('#httpMethod').val(),
                        headers: $('#apiHeaders').val() ? JSON.parse($('#apiHeaders').val()) : {},
                        body: $('#apiBody').val()
                    };
                    break;
                    
                case 'database':
                    executionData.inputData = {
                        type: $('#dbType').val(),
                        connectionString: $('#connectionString').val(),
                        query: $('#dbQuery').val()
                    };
                    break;
                    
                case 'manual':
                    executionData.inputData = JSON.parse($('#manualData').val());
                    break;
                    
                case 'csv':
                    const csvFile = $('#csvFile')[0].files[0];
                    executionData.inputData = {
                        fileName: csvFile.name,
                        delimiter: $('#csvDelimiter').val(),
                        hasHeaders: $('#csvHasHeaders').is(':checked')
                    };
                    break;
                    
                case 'images':
                    const imageFiles = $('#imageFiles')[0].files;
                    executionData.inputData = {
                        fileCount: imageFiles.length,
                        fileNames: Array.from(imageFiles).map(f => f.name),
                        processingType: $('#imageProcessingType').val()
                    };
                    break;
            }
            
            // Close modal
            $('#runWorkflowModal').modal('hide');
            
            // Show execution progress
            toastr.info('Workflow bylo spu≈°tƒõno. Sledujte pr≈Øbƒõh n√≠≈æe...', 'Spou≈°t√≠m workflow');
            
            // TODO: Make actual API call to execute workflow
            console.log('Executing workflow with data:', executionData);
            
            // Simulate execution
            setTimeout(() => {
                toastr.success('Workflow bylo √∫spƒõ≈°nƒõ dokonƒçeno!', 'Hotovo');
                // Refresh execution history
                refreshHistory();
            }, 3000);
        }
        
        // Update loadWorkflowSteps to store data globally
        function loadWorkflowSteps() {
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData && response.orchestratorData.steps) {
                        currentWorkflowData = response.orchestratorData; // Store globally
                        renderWorkflowSteps(response.orchestratorData.steps);
                    } else {
                        currentWorkflowData = null;
                        $('#workflow-steps-container').html(`
                            <div class="text-center py-5">
                                <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Workflow je≈°tƒõ nebylo nakonfigurov√°no</p>
                                <a href="/WorkflowDesigner/Index?projectId=@project.Id" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Vytvo≈ôit workflow
                                </a>
                            </div>
                        `);
                    }
                },
                error: function() {
                    currentWorkflowData = null;
                    $('#workflow-steps-container').html(`
                        <div class="text-center py-5 text-danger">
                            <i class="fas fa-exclamation-circle fa-2x"></i>
                            <p class="mt-2">Nepoda≈ôilo se naƒç√≠st kroky workflow</p>
                        </div>
                    `);
                }
            });
        }
    </script>
}

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding: 20px 0;
        }
        
        .timeline:before {
            content: '';
            position: absolute;
            top: 0;
            left: 35px;
            height: 100%;
            width: 3px;
            background: #dee2e6;
        }
        
        .timeline > div {
            margin-bottom: 20px;
            position: relative;
        }
        
        .timeline > div > i {
            position: absolute;
            left: 18px;
            top: 0;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            text-align: center;
            line-height: 35px;
            color: #fff;
            z-index: 1;
        }
        
        .timeline-item {
            margin-left: 60px;
            margin-right: 15px;
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 0;
        }
        
        .timeline-header {
            padding: 10px;
            border-bottom: 1px solid #dee2e6;
            font-size: 16px;
            margin: 0;
        }
        
        .timeline-body {
            padding: 10px;
        }
        
        .time-label span {
            padding: 5px 10px;
            border-radius: 4px;
            color: #fff;
            font-weight: 600;
            margin-left: 15px;
        }
        
        .badge-purple {
            background-color: #6f42c1;
            color: #fff;
        }
        
        /* Workflow diagram styles */
        .workflow-node-readonly {
            position: absolute;
            background: white;
            border: 2px solid #007bff;
            border-radius: 8px;
            padding: 10px 15px;
            min-width: 150px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-size: 14px;
        }
        
        .workflow-node-readonly.start {
            background: #28a745;
            color: white;
            border-color: #28a745;
            border-radius: 50px;
        }
        
        .workflow-node-readonly.end {
            background: #dc3545;
            color: white;
            border-color: #dc3545;
            border-radius: 50px;
        }
        
        .workflow-node-readonly.condition {
            border-color: #ffc107;
            background: #fff8e1;
        }
        
        .workflow-node-readonly.parallel {
            border-color: #6f42c1;
            background: #f3e5f5;
        }
        
        .workflow-node-readonly i {
            margin-right: 5px;
        }
        
        #workflow-diagram {
            background-image: 
                linear-gradient(rgba(0,0,0,.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0,0,0,.05) 1px, transparent 1px);
            background-size: 20px 20px;
        }
        
        .btn-xs {
            padding: 0.125rem 0.5rem;
            font-size: 0.75rem;
            line-height: 1.5;
            border-radius: 0.2rem;
        }
        
        .btn-outline-primary {
            color: #007bff;
            border-color: #007bff;
            background-color: transparent;
        }
        
        .btn-outline-primary:hover {
            color: #fff;
            background-color: #007bff;
            border-color: #007bff;
        }
        
        .timeline-header .btn {
            margin-left: 10px;
            opacity: 0;
            transition: opacity 0.2s;
        }
        
        .timeline-item:hover .timeline-header .btn {
            opacity: 1;
        }
    </style>
    <script>
        // Finish the saveIOConfig function
        function saveIOConfig() {
            const inputData = collectInputData();
            const outputData = collectOutputData();
            
            if (!inputData || !outputData) {
                return;
            }
            
            // Save to workflow
            if (currentWorkflowData) {
                if (!currentWorkflowData.metadata) {
                    currentWorkflowData.metadata = {};
                }
                currentWorkflowData.metadata.ioConfig = {
                    input: inputData,
                    output: outputData
                };
            }
            
            $('#ioConfigModal').modal('hide');
            toastr.success('Konfigurace vstup≈Ø a v√Ωstup≈Ø ulo≈æena');
            
            // Update display
            updateIODisplay();
        }
        
        // Update I/O display after save
        function updateIODisplay() {
            if (currentWorkflowData && currentWorkflowData.metadata && currentWorkflowData.metadata.ioConfig) {
                const { input, output } = currentWorkflowData.metadata.ioConfig;
                updateIODisplayFromData(input, output);
            }
        }
        
        // Show run modal with specific mode
        function showRunModal(mode) {
            $('#runMode').val(mode);
            
            if (mode === 'test') {
                $('#runModeTitle').html('<i class="fas fa-vial text-warning"></i> Test Run');
                $('#testModeInfo').show();
                $('#productionModeInfo').hide();
                $('#testLimitGroup').show();
                $('#productionConfirmGroup').hide();
                $('#runBtnText').text('Spustit test');
                $('#runWorkflowBtn').removeClass('btn-success').addClass('btn-warning');
                updateEstimates(10);
            } else {
                $('#runModeTitle').html('<i class="fas fa-play text-success"></i> Production Run');
                $('#testModeInfo').hide();
                $('#productionModeInfo').show();
                $('#testLimitGroup').hide();
                $('#productionConfirmGroup').show();
                $('#runBtnText').text('Spustit production');
                $('#runWorkflowBtn').removeClass('btn-warning').addClass('btn-success');
                updateEstimates(1000);
            }
            
            // Generate run name
            const timestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
            $('#runName').attr('placeholder', `${mode}-run-${timestamp}`);
            
            $('#runWorkflowModal').modal('show');
        }
        
        // Update estimates based on mode
        function updateEstimates(baseItems) {
            const mode = $('#runMode').val();
            const items = mode === 'test' ? $('#testItemLimit').val() : baseItems;
            const timePerItem = 2; // seconds
            const apiCallsPerItem = 3;
            
            $('#estimatedItems').text(items);
            $('#estimatedTime').text(formatTime(items * timePerItem));
            $('#estimatedAPICalls').text(items * apiCallsPerItem);
        }
        
        // Format time in human readable format
        function formatTime(seconds) {
            if (seconds < 60) return `~${seconds}s`;
            if (seconds < 3600) return `~${Math.round(seconds/60)}min`;
            return `~${Math.round(seconds/3600)}h`;
        }
        
        // Execute workflow with selected configuration
        function executeWorkflow() {
            const mode = $('#runMode').val();
            
            // Validation for production mode
            if (mode === 'production' && !$('#confirmProduction').is(':checked')) {
                toastr.error('Mus√≠te potvrdit spu≈°tƒõn√≠ v produkƒçn√≠m re≈æimu');
                return;
            }
            
            const config = {
                mode: mode,
                projectId: '@project.Id',
                runName: $('#runName').val() || $('#runName').attr('placeholder'),
                priority: $('#runPriority').val(),
                enableDebugLogging: $('#enableDebugLogging').is(':checked'),
                testItemLimit: mode === 'test' ? parseInt($('#testItemLimit').val()) : null
            };
            
            // Show execution monitoring
            $('#runWorkflowModal').modal('hide');
            startWorkflowExecution(config);
        }
        
        // Start workflow execution and show progress
        function startWorkflowExecution(config) {
            const executionId = 'exec_' + Date.now();
            
            // Create execution card
            const executionHtml = `
                <div class="timeline-item" id="execution-${executionId}">
                    <span class="time-label">
                        <span class="bg-blue">Pr√°vƒõ teƒè</span>
                    </span>
                    <i class="fas fa-play bg-blue"></i>
                    <div class="timeline-body">
                        <div class="timeline-header">
                            <strong>${config.runName}</strong>
                            <span class="badge badge-${config.mode === 'test' ? 'warning' : 'success'}">${config.mode.toUpperCase()}</span>
                            <div class="float-right">
                                <button class="btn btn-xs btn-outline-primary" onclick="showExecutionDetails('${executionId}')">
                                    <i class="fas fa-eye"></i> Detail
                                </button>
                            </div>
                        </div>
                        <div class="mt-2">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     id="progress-${executionId}" role="progressbar" style="width: 0%">
                                    0%
                                </div>
                            </div>
                            <small class="text-muted mt-1" id="status-${executionId}">Inicializace...</small>
                        </div>
                    </div>
                </div>
            `;
            
            $('#executionHistory').prepend(executionHtml);
            
            // Simulate workflow execution
            simulateWorkflowExecution(executionId, config);
            
            toastr.info(`Workflow spu≈°tƒõn v re≈æimu ${config.mode.toUpperCase()}`);
        }
        
        // Simulate workflow execution progress
        function simulateWorkflowExecution(executionId, config) {
            let progress = 0;
            const steps = ['Naƒç√≠t√°n√≠ dat', 'Anal√Ωza vstup≈Ø', 'Zpracov√°n√≠', 'Generov√°n√≠ v√Ωstup≈Ø', 'Dokonƒçeno'];
            let currentStep = 0;
            
            const interval = setInterval(() => {
                progress += Math.random() * 20;
                if (progress > 100) progress = 100;
                
                $(`#progress-${executionId}`).css('width', progress + '%').text(Math.round(progress) + '%');
                
                if (currentStep < steps.length - 1 && progress > (currentStep + 1) * 20) {
                    currentStep++;
                }
                
                $(`#status-${executionId}`).text(steps[currentStep]);
                
                if (progress >= 100) {
                    clearInterval(interval);
                    $(`#progress-${executionId}`).removeClass('progress-bar-animated');
                    $(`#status-${executionId}`).text('√öspƒõ≈°nƒõ dokonƒçeno');
                    
                    // Update execution stats
                    const successRate = Math.random() > 0.1 ? true : false;
                    if (successRate) {
                        toastr.success(`Workflow ${config.runName} √∫spƒõ≈°nƒõ dokonƒçen`);
                        $(`#execution-${executionId} .timeline-header`).append(`
                            <span class="badge badge-success ml-2">√öSPƒöCH</span>
                        `);
                    } else {
                        toastr.error(`Workflow ${config.runName} selhal`);
                        $(`#execution-${executionId} .timeline-header`).append(`
                            <span class="badge badge-danger ml-2">CHYBA</span>
                        `);
                        $(`#progress-${executionId}`).addClass('bg-danger');
                    }
                }
            }, 500);
        }
        
        // Show execution details
        function showExecutionDetails(executionId) {
            toastr.info('Detail bƒõhu workflow bude zobrazen...');
        }
        
        // Update estimates when test limit changes
        $(document).on('input', '#testItemLimit', function() {
            updateEstimates(10);
        });
    </script>
}