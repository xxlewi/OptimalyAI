@using OptimalyAI.ViewModels
@{
    ViewData["Title"] = "Detail projektu";
    var project = ViewBag.Project as ProjectListItemViewModel;
    var workflow = ViewBag.Workflow as WorkflowPrototypeViewModel;
    var hasWorkflow = ViewBag.HasWorkflow ?? false;
    var executionHistory = ViewBag.ExecutionHistory as List<dynamic> ?? new List<dynamic>();
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-8">
                <h1>
                    <i class="fas fa-project-diagram"></i> @project.Name
                    @if (project.Status == "Active")
                    {
                        <span class="badge badge-success">Aktivní</span>
                    }
                    else if (project.Status == "Draft")
                    {
                        <span class="badge badge-warning">Rozpracovaný</span>
                    }
                </h1>
                <p class="text-muted">@project.Description</p>
            </div>
            <div class="col-sm-4 text-right">
                <a href="@Url.Action("Index")" class="btn btn-default">
                    <i class="fas fa-arrow-left"></i> Zpět na seznam
                </a>
                @if (hasWorkflow)
                {
                    <button class="btn btn-success" onclick="runWorkflow()">
                        <i class="fas fa-play"></i> Spustit workflow
                    </button>
                }
                <a href="@Url.Action("Index", "WorkflowDesigner", new { projectId = project.Id })" class="btn btn-primary">
                    <i class="fas fa-edit"></i> Upravit workflow
                </a>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- Základní informace -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-info-circle"></i> Základní informace</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-5">ID projektu:</dt>
                            <dd class="col-sm-7"><code>@project.Id.ToString().Substring(0, 8)...</code></dd>
                            
                            <dt class="col-sm-5">Zákazník:</dt>
                            <dd class="col-sm-7">
                                <a href="/Customers">@project.CustomerName</a><br>
                                <small class="text-muted">
                                    <a href="mailto:@project.CustomerEmail">@project.CustomerEmail</a>
                                </small>
                            </dd>
                            
                            <dt class="col-sm-5">Typ workflow:</dt>
                            <dd class="col-sm-7">
                                @switch (project.WorkflowType)
                                {
                                    case "ecommerce_search":
                                        <span class="badge badge-info">🛒 E-commerce vyhledávání</span>
                                        break;
                                    case "content_generation":
                                        <span class="badge badge-warning">📝 Generování obsahu</span>
                                        break;
                                    case "data_analysis":
                                        <span class="badge badge-primary">📊 Analýza dat</span>
                                        break;
                                    case "chatbot":
                                        <span class="badge badge-success">💬 Chatbot</span>
                                        break;
                                    default:
                                        <span class="badge badge-secondary">⚙️ Vlastní</span>
                                        break;
                                }
                            </dd>
                            
                            <dt class="col-sm-5">Spouštění:</dt>
                            <dd class="col-sm-7">
                                @switch (project.TriggerType)
                                {
                                    case "Manual":
                                        <text><i class="fas fa-hand-pointer"></i> Manuální</text>
                                        break;
                                    case "Schedule":
                                        <span><i class="fas fa-clock"></i> Plánované</span>
                                        if (project.NextRun.HasValue)
                                        {
                                            <br>
                                            <small>Další: @project.NextRun.Value.ToString("dd.MM.yyyy HH:mm")</small>
                                        }
                                        break;
                                    case "Event":
                                        <text><i class="fas fa-bolt"></i> Událostmi</text>
                                        break;
                                }
                            </dd>
                            
                            <dt class="col-sm-5">Počet kroků:</dt>
                            <dd class="col-sm-7">
                                <span class="badge badge-info">@project.StageCount</span>
                            </dd>
                        </dl>
                    </div>
                </div>

                <!-- Statistiky -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-chart-bar"></i> Statistiky</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <div class="description-block border-right">
                                    <h5 class="description-header">@project.TotalRuns</h5>
                                    <span class="description-text">CELKEM BĚHŮ</span>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="description-block">
                                    <h5 class="description-header text-@(project.SuccessRate >= 80 ? "success" : project.SuccessRate >= 50 ? "warning" : "danger")">
                                        @project.SuccessRate%
                                    </h5>
                                    <span class="description-text">ÚSPĚŠNOST</span>
                                </div>
                            </div>
                        </div>
                        <hr>
                        <div class="text-center">
                            <p class="text-muted">
                                @if (project.LastRun.HasValue)
                                {
                                    <text>Poslední běh: @project.LastRun.Value.ToString("dd.MM.yyyy HH:mm")</text>
                                    if (project.LastRunSuccess)
                                    {
                                        <span class="badge badge-success ml-2">Úspěšný</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-danger ml-2">Neúspěšný</span>
                                    }
                                }
                                else
                                {
                                    <text>Zatím nebylo spuštěno</text>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Workflow kroky -->
            <div class="col-md-8">
                <!-- Vizuální diagram -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-project-diagram"></i> Workflow diagram</h3>
                        <div class="card-tools">
                            <a href="@Url.Action("Index", "WorkflowDesigner", new { projectId = project.Id })" class="btn btn-sm btn-primary">
                                <i class="fas fa-edit"></i> Upravit
                            </a>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="workflow-diagram-container" style="height: 400px; overflow: auto; background: #f8f9fa;">
                            <div id="workflow-diagram" style="width: 2000px; height: 1500px; position: relative;">
                                <svg id="connections-svg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1;">
                                    <defs>
                                        <marker id="arrowhead" markerWidth="8" markerHeight="6" refX="7" refY="3" orient="auto">
                                            <polygon points="0 0, 8 3, 0 6" fill="#007bff" />
                                        </marker>
                                    </defs>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Seznam kroků -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-layer-group"></i> Kroky workflow</h3>
                    </div>
                    <div class="card-body">
                        @if (hasWorkflow && workflow.Stages.Any())
                        {
                            <div class="timeline">
                                @foreach (var stage in workflow.Stages.OrderBy(s => s.Order))
                                {
                                    <div class="time-label">
                                        <span class="bg-primary">Krok @stage.Order</span>
                                    </div>
                                    <div>
                                        <i class="fas fa-cog bg-@(stage.Status == "Active" ? "success" : "warning")"></i>
                                        <div class="timeline-item">
                                            <h3 class="timeline-header">
                                                @stage.Name
                                                @if (stage.UseReAct)
                                                {
                                                    <span class="badge badge-purple float-right">
                                                        <i class="fas fa-brain"></i> ReAct
                                                    </span>
                                                }
                                            </h3>
                                            <div class="timeline-body">
                                                @if (!string.IsNullOrEmpty(stage.Description))
                                                {
                                                    <p>@stage.Description</p>
                                                }
                                                <div class="mb-2">
                                                    <span class="badge badge-info">@stage.Type</span>
                                                    <span class="badge badge-secondary">@stage.ExecutionStrategy</span>
                                                </div>
                                                @if (stage.Tools.Any())
                                                {
                                                    <div>
                                                        <small class="text-muted">Nástroje:</small><br>
                                                        @foreach (var tool in stage.Tools)
                                                        {
                                                            <span class="badge badge-light mr-1">
                                                                <i class="fas fa-wrench"></i> @tool
                                                            </span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div>
                                    <i class="fas fa-check bg-success"></i>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Workflow ještě nebylo nakonfigurováno</p>
                                <a href="@Url.Action("Index", "WorkflowDesigner", new { projectId = project.Id })" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Vytvořit workflow
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Historie běhů -->
        <div class="row mt-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-history"></i> Historie běhů</h3>
                        <div class="card-tools">
                            <button class="btn btn-sm btn-default" onclick="refreshHistory()">
                                <i class="fas fa-sync"></i> Obnovit
                            </button>
                        </div>
                    </div>
                    <div class="card-body table-responsive p-0">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Spuštěno</th>
                                    <th>Dokončeno</th>
                                    <th>Trvání</th>
                                    <th>Zpracováno</th>
                                    <th>Stav</th>
                                    <th>Spuštěno</th>
                                    <th>Akce</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (executionHistory != null && executionHistory.Any())
                                {
                                    @* Historie běhů je prozatím prázdná v demo verzi *@
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center text-muted py-4">
                                            Zatím žádná historie běhů
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (executionHistory != null && executionHistory.Count > 10)
                    {
                        <div class="card-footer">
                            <button class="btn btn-sm btn-default">
                                <i class="fas fa-chevron-down"></i> Zobrazit více
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        // Load workflow diagram
        $(document).ready(function() {
            loadWorkflowDiagram();
        });
        
        function loadWorkflowDiagram() {
            $.ajax({
                url: '/WorkflowDesigner/LoadWorkflow',
                type: 'GET',
                data: { projectId: '@project.Id' },
                success: function(response) {
                    if (response.success && response.orchestratorData) {
                        renderWorkflowDiagram(response.orchestratorData);
                    }
                },
                error: function() {
                    $('#workflow-diagram').html('<div class="text-center p-5 text-muted"><i class="fas fa-exclamation-circle"></i> Nepodařilo se načíst diagram</div>');
                }
            });
        }
        
        function renderWorkflowDiagram(data) {
            if (!data || !data.metadata || !data.metadata.nodePositions) {
                $('#workflow-diagram').html('<div class="text-center p-5 text-muted"><i class="fas fa-info-circle"></i> Žádný uložený diagram</div>');
                return;
            }
            
            const positions = data.metadata.nodePositions;
            const svg = document.getElementById('connections-svg');
            
            // Clear previous content
            $('#workflow-diagram .workflow-node-readonly').remove();
            svg.querySelectorAll('line').forEach(line => line.remove());
            
            // Find min/max positions for auto-layout
            let minY = Infinity, maxY = -Infinity;
            const centerX = 1000; // Fixed center X
            
            // First pass: create nodes and find vertical range
            const nodes = {};
            Object.entries(positions).forEach(([nodeId, pos]) => {
                nodes[nodeId] = {
                    ...pos,
                    id: nodeId,
                    y: pos.y
                };
                minY = Math.min(minY, pos.y);
                maxY = Math.max(maxY, pos.y);
            });
            
            // Calculate vertical spacing - make nodes closer
            const verticalSpacing = 80; // Fixed closer spacing
            const horizontalSpacing = 200; // Spacing for branches
            const startY = 50;
            
            // Build a layout that respects branching
            const layoutMap = new Map();
            const visited = new Set();
            let currentY = startY;
            
            // Helper function to layout nodes
            function layoutNode(nodeId, x, y, level = 0) {
                if (visited.has(nodeId)) return y;
                visited.add(nodeId);
                
                const node = nodes[nodeId];
                if (!node) return y;
                
                layoutMap.set(nodeId, { x, y });
                
                // Find connected nodes
                const step = data.steps?.find(s => s.id === nodeId);
                if (!step) {
                    node.newX = x;
                    node.newY = y;
                    return y;
                }
                
                let nextY = y + verticalSpacing;
                
                if (step.type === 'decision' && step.branches) {
                    // Layout branches side by side at the same Y position
                    const leftX = x - horizontalSpacing / 2;
                    const rightX = x + horizontalSpacing / 2;
                    let branchMaxY = nextY;
                    
                    if (step.branches.true && step.branches.true[0]) {
                        branchMaxY = Math.max(branchMaxY, layoutNode(step.branches.true[0], leftX, nextY, level + 1));
                    }
                    if (step.branches.false && step.branches.false[0]) {
                        branchMaxY = Math.max(branchMaxY, layoutNode(step.branches.false[0], rightX, nextY, level + 1));
                    }
                    nextY = branchMaxY;
                } else if (step.type === 'parallel-gateway' && step.branches) {
                    // Layout parallel branches at the same Y position
                    const branchCount = step.branches.length;
                    const totalWidth = (branchCount - 1) * horizontalSpacing;
                    let branchX = x - totalWidth / 2;
                    let branchMaxY = nextY;
                    
                    step.branches.forEach(targetId => {
                        branchMaxY = Math.max(branchMaxY, layoutNode(targetId, branchX, nextY, level + 1));
                        branchX += horizontalSpacing;
                    });
                    nextY = branchMaxY;
                } else if (step.next) {
                    // Regular next node
                    nextY = layoutNode(step.next, x, nextY, level + 1);
                }
                
                node.newX = x;
                node.newY = y;
                return nextY;
            }
            
            // Start layout from first step
            if (data.firstStepId) {
                layoutNode(data.firstStepId, centerX - 75, currentY);
            }
            
            // Layout any unvisited nodes
            Object.entries(nodes).forEach(([nodeId, node]) => {
                if (!visited.has(nodeId)) {
                    currentY += verticalSpacing;
                    layoutNode(nodeId, centerX - 75, currentY);
                }
            });
            
            // Render nodes with new positions
            Object.values(nodes).forEach(node => {
                const nodeDiv = $('<div>')
                    .addClass('workflow-node-readonly')
                    .addClass(node.type)
                    .attr('id', node.id)
                    .css({
                        left: node.newX + 'px',
                        top: node.newY + 'px'
                    });
                
                // Find node info
                let nodeName = node.id;
                let nodeIcon = 'fas fa-circle';
                if (node.type === 'start') {
                    nodeName = 'Začátek';
                    nodeIcon = 'fas fa-play-circle';
                } else if (node.type === 'end') {
                    nodeName = 'Konec';
                    nodeIcon = 'fas fa-stop-circle';
                } else {
                    const step = data.steps?.find(s => s.id === node.id);
                    if (step) {
                        nodeName = step.name;
                        if (step.type === 'decision') nodeIcon = 'fas fa-question-circle';
                        else if (step.type === 'parallel-gateway') nodeIcon = 'fas fa-code-branch';
                        else nodeIcon = 'fas fa-tasks';
                    }
                }
                
                nodeDiv.html(`<i class="${nodeIcon}"></i> ${nodeName}`);
                $('#workflow-diagram').append(nodeDiv);
            });
            
            // Render connections
            setTimeout(() => {
                renderConnections(data, nodes);
            }, 50);
            
            // Center diagram
            setTimeout(() => {
                const container = $('#workflow-diagram-container');
                container.scrollLeft(centerX - (container.width() / 2));
                container.scrollTop(0);
            }, 100);
        }
        
        function renderConnections(data, nodesObj) {
            const svg = document.getElementById('connections-svg');
            const nodeMap = {};
            Object.values(nodesObj).forEach(n => nodeMap[n.id] = n);
            
            // Connection from start to first step
            if (data.startNodeId && data.firstStepId) {
                drawConnection(nodeMap[data.startNodeId], nodeMap[data.firstStepId]);
            }
            
            // Connections between steps
            if (data.steps) {
                data.steps.forEach(step => {
                    const fromNode = nodeMap[step.id];
                    if (!fromNode) return;
                    
                    if (step.type === 'decision' && step.branches) {
                        // Decision branches
                        if (step.branches.true && step.branches.true[0]) {
                            drawConnection(fromNode, nodeMap[step.branches.true[0]], 'green');
                        }
                        if (step.branches.false && step.branches.false[0]) {
                            drawConnection(fromNode, nodeMap[step.branches.false[0]], 'red');
                        }
                    } else if (step.type === 'parallel-gateway' && step.branches) {
                        // Parallel branches
                        step.branches.forEach(targetId => {
                            drawConnection(fromNode, nodeMap[targetId], 'purple');
                        });
                    } else if (step.next) {
                        // Regular connection
                        drawConnection(fromNode, nodeMap[step.next]);
                    }
                });
            }
            
            // Connections to end
            if (data.lastStepIds && data.endNodeId) {
                data.lastStepIds.forEach(stepId => {
                    drawConnection(nodeMap[stepId], nodeMap[data.endNodeId]);
                });
            }
            
            function drawConnection(from, to, color = '#007bff') {
                if (!from || !to) return;
                
                const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                // More accurate centering based on node width (150px min-width)
                const nodeWidth = 150;
                const nodeHeight = 40;
                line.setAttribute('x1', from.newX + (nodeWidth / 2));
                line.setAttribute('y1', from.newY + nodeHeight);
                line.setAttribute('x2', to.newX + (nodeWidth / 2));
                line.setAttribute('y2', to.newY);
                line.setAttribute('stroke', color);
                line.setAttribute('stroke-width', '2');
                line.setAttribute('marker-end', 'url(#arrowhead)');
                svg.appendChild(line);
            }
        }
        
        function runWorkflow() {
            toastr.info('Spouštím workflow...');
            setTimeout(() => {
                toastr.success('Workflow bylo úspěšně spuštěno!');
                setTimeout(() => {
                    location.reload();
                }, 1500);
            }, 1000);
        }
        
        function refreshHistory() {
            toastr.info('Obnovuji historii...');
            setTimeout(() => {
                location.reload();
            }, 500);
        }
        
        function viewExecutionDetails(executionId) {
            toastr.info('Zobrazení detailů běhu (v produkci)');
        }
        
        function downloadLog(executionId) {
            toastr.info('Stahování logu (v produkci)');
        }
    </script>
}

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding: 20px 0;
        }
        
        .timeline:before {
            content: '';
            position: absolute;
            top: 0;
            left: 35px;
            height: 100%;
            width: 3px;
            background: #dee2e6;
        }
        
        .timeline > div {
            margin-bottom: 20px;
            position: relative;
        }
        
        .timeline > div > i {
            position: absolute;
            left: 18px;
            top: 0;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            text-align: center;
            line-height: 35px;
            color: #fff;
            z-index: 1;
        }
        
        .timeline-item {
            margin-left: 60px;
            margin-right: 15px;
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 0;
        }
        
        .timeline-header {
            padding: 10px;
            border-bottom: 1px solid #dee2e6;
            font-size: 16px;
            margin: 0;
        }
        
        .timeline-body {
            padding: 10px;
        }
        
        .time-label span {
            padding: 5px 10px;
            border-radius: 4px;
            color: #fff;
            font-weight: 600;
            margin-left: 15px;
        }
        
        .badge-purple {
            background-color: #6f42c1;
            color: #fff;
        }
        
        /* Workflow diagram styles */
        .workflow-node-readonly {
            position: absolute;
            background: white;
            border: 2px solid #007bff;
            border-radius: 8px;
            padding: 10px 15px;
            min-width: 150px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            font-size: 14px;
        }
        
        .workflow-node-readonly.start {
            background: #28a745;
            color: white;
            border-color: #28a745;
            border-radius: 50px;
        }
        
        .workflow-node-readonly.end {
            background: #dc3545;
            color: white;
            border-color: #dc3545;
            border-radius: 50px;
        }
        
        .workflow-node-readonly.condition {
            border-color: #ffc107;
            background: #fff8e1;
        }
        
        .workflow-node-readonly.parallel {
            border-color: #6f42c1;
            background: #f3e5f5;
        }
        
        .workflow-node-readonly i {
            margin-right: 5px;
        }
        
        #workflow-diagram {
            background-image: 
                linear-gradient(rgba(0,0,0,.05) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0,0,0,.05) 1px, transparent 1px);
            background-size: 20px 20px;
        }
    </style>
}