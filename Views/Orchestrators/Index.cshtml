@model List<OptimalyAI.Controllers.OrchestratorViewModel>
@{
    ViewData["Title"] = "AI Orchestrators";
}

@section Styles {
    <style>
        .orchestrator-card {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .orchestrator-card.active {
            border-left-color: #28a745;
        }
        
        .orchestrator-card.inactive {
            border-left-color: #dc3545;
        }
        
        .orchestrator-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .metric-box {
            text-align: center;
            padding: 20px;
            border-radius: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .metric-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
        }
        
        .status-badge.active {
            background-color: #d4edda;
            color: #155724;
        }
        
        .status-badge.inactive {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .capabilities-list {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }
        
        .capability-badge {
            background-color: #e9ecef;
            color: #495057;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
        }
        
        .dark-mode .capability-badge {
            background-color: #495057;
            color: #e9ecef;
        }
        
        .server-status-indicator {
            display: inline-block;
            animation: pulse 2s infinite;
        }
        
        .server-status-indicator.active {
            animation: pulse-success 2s infinite;
        }
        
        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        @@keyframes pulse-success {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.1); }
            100% { opacity: 1; transform: scale(1); }
        }
    </style>
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">@ViewData["Title"]</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active">Orchestrators</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <!-- Debug Info -->
        @if (!Model.Any())
        {
            <div class="alert alert-warning">
                <strong>Info:</strong> Žádné orchestrátory nebyly nalezeny. Zkontrolujte registraci v DI kontejneru.
            </div>
        }
        
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="metric-box">
                    <div class="metric-value">@ViewBag.TotalOrchestrators</div>
                    <div class="metric-label">Total Orchestrators</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="metric-box" style="background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);">
                    <div class="metric-value">@ViewBag.ActiveOrchestrators</div>
                    <div class="metric-label">Active</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="metric-box" style="background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);">
                    <div class="metric-value">@ViewBag.TotalExecutions</div>
                    <div class="metric-label">Total Executions</div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="metric-box" style="background: linear-gradient(135deg, #30cfd0 0%, #330867 100%);">
                    <div class="metric-value">
                        @if (Model.Any())
                        {
                            @Math.Round(Model.Average(o => o.SuccessRate), 1)<text>%</text>
                        }
                        else
                        {
                            <text>0%</text>
                        }
                    </div>
                    <div class="metric-label">Average Success Rate</div>
                </div>
            </div>
        </div>


        <!-- Orchestrators Grid -->
        <div class="row">
            @foreach (var orchestrator in Model)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card orchestrator-card @(orchestrator.IsActive ? "active" : "inactive") h-100">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="fas fa-robot mr-2"></i>@orchestrator.Name
                                @* Historický IsDefault - už se nepoužívá
                                @if (orchestrator.IsDefault)
                                {
                                    <span class="badge badge-warning ml-2">
                                        <i class="fas fa-star mr-1"></i>Default
                                    </span>
                                }
                                *@
                                @if (orchestrator.IsWorkflowNode)
                                {
                                    <span class="badge badge-info ml-2">
                                        <i class="fas fa-project-diagram mr-1"></i>Workflow Node
                                    </span>
                                }
                                @if (orchestrator.IsDefaultChatOrchestrator)
                                {
                                    <span class="badge badge-primary ml-2">
                                        <i class="fas fa-comments mr-1"></i>Default Chat
                                    </span>
                                }
                                @if (orchestrator.IsDefaultWorkflowOrchestrator)
                                {
                                    <span class="badge badge-warning ml-2">
                                        <i class="fas fa-sitemap mr-1"></i>Default Workflow
                                    </span>
                                }
                            </h3>
                            <div class="card-tools">
                                <span class="status-badge @(orchestrator.IsActive ? "active" : "inactive")">
                                    <i class="fas fa-circle mr-1" style="font-size: 0.5rem;"></i>
                                    @(orchestrator.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="text-muted mb-3">@orchestrator.Description</p>
                            
                            @if (!string.IsNullOrEmpty(orchestrator.AiServerName) && !string.IsNullOrEmpty(orchestrator.DefaultModelId))
                            {
                                <div class="mb-3">
                                    <small class="text-muted">
                                        @if (orchestrator.IsActive)
                                        {
                                            <i class="fas fa-circle text-success mr-1 server-status-indicator active" title="Server is running"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-circle text-danger mr-1 server-status-indicator" title="Server is not running"></i>
                                        }
                                        <i class="fas fa-server mr-1"></i> @orchestrator.AiServerName
                                        <span class="mx-2">|</span>
                                        @if (orchestrator.IsActive && orchestrator.IsModelLoaded)
                                        {
                                            <i class="fas fa-circle text-success mr-1 server-status-indicator active" title="Model is loaded"></i>
                                        }
                                        else if (orchestrator.IsActive && !orchestrator.IsModelLoaded)
                                        {
                                            <i class="fas fa-circle text-warning mr-1 server-status-indicator" title="Model not loaded"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-circle text-secondary mr-1" title="Server offline"></i>
                                        }
                                        <i class="fas fa-brain mr-1"></i> @orchestrator.DefaultModelId
                                    </small>
                                </div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <small class="text-warning">
                                        <i class="fas fa-circle text-warning mr-1"></i>
                                        <i class="fas fa-exclamation-triangle mr-1"></i> No AI server configured
                                    </small>
                                </div>
                            }
                            
                            <div class="row text-center mb-3">
                                <div class="col-4">
                                    <div class="description-block">
                                        <h5 class="description-header">@orchestrator.TotalExecutions</h5>
                                        <span class="description-text">Executions</span>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="description-block">
                                        <h5 class="description-header text-success">@orchestrator.SuccessRate.ToString("F1")%</h5>
                                        <span class="description-text">Success Rate</span>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="description-block">
                                        <h5 class="description-header">@orchestrator.AverageExecutionTime.TotalMilliseconds.ToString("F0")ms</h5>
                                        <span class="description-text">Avg Time</span>
                                    </div>
                                </div>
                            </div>

                            @if (orchestrator.LastExecutionTime.HasValue)
                            {
                                <p class="text-sm text-muted">
                                    <i class="far fa-clock mr-1"></i>
                                    Last execution: @orchestrator.LastExecutionTime.Value.ToLocalTime().ToString("g")
                                </p>
                            }

                            @if (orchestrator.Capabilities != null)
                            {
                                <div class="capabilities-list">
                                    @if (orchestrator.Capabilities.SupportsStreaming)
                                    {
                                        <span class="capability-badge">
                                            <i class="fas fa-stream"></i> Streaming
                                        </span>
                                    }
                                    @if (orchestrator.Capabilities.SupportsParallelExecution)
                                    {
                                        <span class="capability-badge">
                                            <i class="fas fa-tasks"></i> Parallel
                                        </span>
                                    }
                                    @if (orchestrator.Capabilities.SupportsCancel)
                                    {
                                        <span class="capability-badge">
                                            <i class="fas fa-stop-circle"></i> Cancelable
                                        </span>
                                    }
                                    @foreach (var category in orchestrator.Capabilities.SupportedToolCategories ?? new List<string>())
                                    {
                                        <span class="capability-badge">
                                            <i class="fas fa-tools"></i> @category
                                        </span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-sm btn-primary" onclick="event.stopPropagation(); activateOrchestrator('@orchestrator.Id');">
                                    <i class="fas fa-play mr-1"></i> Activate
                                </button>
                                <button type="button" class="btn btn-sm btn-info" onclick="event.stopPropagation(); viewDetail('@orchestrator.Id');">
                                    <i class="fas fa-info-circle mr-1"></i> Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!Model.Any())
        {
            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-robot fa-4x text-muted mb-3"></i>
                            <h4>No Orchestrators Found</h4>
                            <p class="text-muted">No orchestrators are currently registered in the system.</p>
                            <a href="/Orchestrators/Projects/Create" class="btn btn-primary mt-3">
                                <i class="fas fa-plus"></i> Create First Project
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<!-- Detail Modal -->
<div class="modal fade" id="detailModal" tabindex="-1" role="dialog" aria-labelledby="detailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailModalLabel">
                    <i class="fas fa-robot"></i> Orchestrator Detail
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="detailTabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="config-tab" data-toggle="tab" href="#configContent" role="tab">
                            <i class="fas fa-cog"></i> Configuration
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="test-tab" data-toggle="tab" href="#testContent" role="tab">
                            <i class="fas fa-play"></i> Test
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="metrics-tab" data-toggle="tab" href="#metricsContent" role="tab">
                            <i class="fas fa-chart-line"></i> Metrics
                        </a>
                    </li>
                </ul>
                <div class="tab-content mt-3" id="detailTabContent">
                    <div class="tab-pane fade show active" id="configContent" role="tabpanel">
                        <!-- Configuration will be loaded here -->
                    </div>
                    <div class="tab-pane fade" id="testContent" role="tabpanel">
                        <!-- Test interface will be loaded here -->
                    </div>
                    <div class="tab-pane fade" id="metricsContent" role="tabpanel">
                        <!-- Metrics will be loaded here -->
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveConfigBtn" onclick="saveConfig()" style="display:none;">
                    <i class="fas fa-save"></i> Save Changes
                </button>
                <button type="button" class="btn btn-success" id="executeTestBtn" onclick="executeTest()" style="display:none;">
                    <i class="fas fa-play"></i> Execute Test
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function refreshMetrics() {
            // TODO: Implement AJAX refresh of metrics without page reload
            console.log('Metrics refresh disabled - was causing page reload issues');
        }
        
        let currentOrchestratorId = null;
        
        // Function to copy log to clipboard
        function copyActivationLog() {
            const statusLog = document.querySelector('.status-log');
            if (!statusLog) return;
            
            // Get all log entries
            const logEntries = statusLog.querySelectorAll('.log-entry');
            let logText = '';
            
            logEntries.forEach(entry => {
                // Remove icon and get text
                const text = entry.textContent.trim();
                logText += text + '\n';
            });
            
            // Copy to clipboard
            navigator.clipboard.writeText(logText).then(() => {
                toastr.success('Log copied to clipboard!');
            }).catch(() => {
                toastr.error('Failed to copy log');
            });
        }
        
        function activateOrchestrator(orchestratorId) {
            if (!orchestratorId) {
                toastr.error('Invalid orchestrator ID');
                return;
            }
            
            // Global references
            let statusLog = null;
            let progressBar = null;
            let isCompleted = false;
            
            // Create dialog once
            Swal.fire({
                title: 'Activating Orchestrator',
                html: `
                    <div class="activation-progress">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="progress flex-grow-1" style="height: 25px; margin-right: 10px;">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                            </div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="copyActivationLog()" title="Copy log to clipboard" style="min-width: 40px;">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                        <div class="status-log" style="text-align: left; font-family: monospace; font-size: 0.9em; max-height: 400px; overflow-y: auto; background: #f8f9fa; padding: 15px; border-radius: 5px; border: 1px solid #dee2e6;">
                            <div class="log-entry"><i class="fas fa-circle-notch fa-spin"></i> Initializing activation process...</div>
                        </div>
                        <div class="mt-3 text-center" style="display: none;" id="completion-buttons">
                            <button class="btn btn-primary" onclick="location.reload()">OK</button>
                        </div>
                    </div>
                `,
                width: '700px',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                showCloseButton: false
            });
            
            // Get references after dialog opens
            setTimeout(() => {
                statusLog = document.querySelector('.status-log');
                progressBar = document.querySelector('.progress-bar');
                
                // Function to add log
                function addLog(message, icon = 'fa-circle-notch fa-spin', color = '') {
                    if (!statusLog) return;
                    const entry = document.createElement('div');
                    entry.className = 'log-entry mb-1';
                    entry.style.color = color;
                    entry.innerHTML = `<i class="fas ${icon}"></i> ${message}`;
                    statusLog.appendChild(entry);
                    statusLog.scrollTop = statusLog.scrollHeight;
                }
                
                // Function to update progress
                function setProgress(percent) {
                    if (progressBar) {
                        progressBar.style.width = percent + '%';
                    }
                }
                
                // Function to finish
                function finishProcess(success) {
                    if (!isCompleted) {
                        isCompleted = true;
                        addLog('');
                        addLog('=== PROCESS COMPLETE ===', 'fa-flag-checkered', 'black');
                        addLog('');
                        addLog('Click OK to refresh the page', 'fa-info-circle', 'blue');
                        
                        // Show buttons
                        const buttons = document.getElementById('completion-buttons');
                        if (buttons) {
                            buttons.style.display = 'block';
                        }
                    }
                }
                
                // Start
                setProgress(10);
                addLog('Contacting server...');
                
                // AJAX call
                $.ajax({
                    url: '/Orchestrators/ActivateWithProgress',
                    type: 'POST',
                    data: JSON.stringify({ orchestratorId: orchestratorId }),
                    contentType: 'application/json',
                    success: function(response) {
                        if (response.steps && response.steps.length > 0) {
                            let currentStep = 0;
                            const totalSteps = response.steps.length;
                            
                            function processNextStep() {
                                if (currentStep < totalSteps) {
                                    const step = response.steps[currentStep];
                                    const progress = 10 + (currentStep / totalSteps) * 80;
                                    setProgress(progress);
                                    
                                    let icon = 'fa-circle-notch fa-spin';
                                    let color = '';
                                    
                                    if (step.status === 'success') {
                                        icon = 'fa-check-circle';
                                        color = 'green';
                                    } else if (step.status === 'warning') {
                                        icon = 'fa-exclamation-triangle';
                                        color = 'orange';
                                    } else if (step.status === 'error') {
                                        icon = 'fa-times-circle';
                                        color = 'red';
                                    }
                                    
                                    addLog(step.message, icon, color);
                                    
                                    currentStep++;
                                    setTimeout(processNextStep, 150);
                                } else {
                                    // Done
                                    setProgress(100);
                                    
                                    if (response.success) {
                                        addLog('');
                                        addLog('SUCCESS!', 'fa-check-circle', 'green');
                                        if (response.data) {
                                            addLog(`Server: ${response.data.serverName}`, 'fa-server', 'blue');
                                            addLog(`Model: ${response.data.modelId}`, 'fa-cube', 'blue');
                                        }
                                    } else {
                                        addLog('');
                                        addLog('FAILED!', 'fa-times-circle', 'red');
                                    }
                                    
                                    finishProcess(response.success);
                                }
                            }
                            
                            processNextStep();
                        } else {
                            setProgress(100);
                            if (response.success) {
                                addLog('Server activated!', 'fa-check-circle', 'green');
                            } else {
                                addLog(`Error: ${response.error || 'Unknown'}`, 'fa-times-circle', 'red');
                            }
                            finishProcess(response.success);
                        }
                    },
                    error: function(xhr, status, error) {
                        setProgress(100);
                        addLog('Network error!', 'fa-times-circle', 'red');
                        addLog(`Status: ${status}`, 'fa-exclamation-circle', 'red');
                        addLog(`Error: ${error}`, 'fa-exclamation-circle', 'red');
                        
                        if (xhr.responseText) {
                            try {
                                const err = JSON.parse(xhr.responseText);
                                if (err.error) {
                                    addLog(`Details: ${err.error}`, 'fa-exclamation-circle', 'red');
                                }
                            } catch (e) {
                                addLog(`Response: ${xhr.responseText.substring(0, 100)}...`, 'fa-exclamation-circle', 'red');
                            }
                        }
                        
                        finishProcess(false);
                    }
                });
            }, 100);
        }
        
        function viewDetail(orchestratorId) {
            currentOrchestratorId = orchestratorId;
            
            // Reset modal
            $('#detailModal .nav-link').removeClass('active');
            $('#detailModal .tab-pane').removeClass('show active');
            $('#config-tab').addClass('active');
            $('#configContent').addClass('show active');
            
            // Load configuration tab by default
            loadConfigTab(orchestratorId);
            
            // Show modal
            $('#detailModal').modal('show');
        }
        
        function loadConfigTab(orchestratorId) {
            $('#saveConfigBtn').show();
            $('#executeTestBtn').hide();
            
            const orchestratorCard = $(`.orchestrator-card[onclick*="${orchestratorId}"]`);
            const orchestratorName = orchestratorCard.find('.card-title').text().trim();
            
            $('#configContent').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading configuration...</div>');
            
            setTimeout(() => {
                let content = `
                    <form id="configForm">
                        <h5 class="mb-3">${orchestratorName}</h5>
                        <input type="hidden" id="orchestratorId" value="${orchestratorId}">
                `;
                
                // Add AI Server selection for all orchestrators
                content += `
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">AI Server</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="aiServerSelect" name="aiServer" onchange="loadServerModels()">
                                <option value="">Loading servers...</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Default Model</label>
                        <div class="col-sm-8">
                            <select class="form-control" id="modelSelect" name="defaultModel">
                                <option value="">Select AI Server first</option>
                            </select>
                        </div>
                    </div>
                    @* Historický IsDefault - už se nepoužívá
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Default Orchestrator</label>
                        <div class="col-sm-8">
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="isDefaultOrchestrator" name="isDefaultOrchestrator">
                                <label class="custom-control-label" for="isDefaultOrchestrator">Set as default workflow orchestrator</label>
                            </div>
                            <small class="form-text text-muted">Only one orchestrator can be set as default</small>
                        </div>
                    </div>
                    *@
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Workflow Node</label>
                        <div class="col-sm-8">
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="isWorkflowNode" name="isWorkflowNode">
                                <label class="custom-control-label" for="isWorkflowNode">Can be used as workflow node</label>
                            </div>
                            <small class="form-text text-muted">Enable to allow this orchestrator in workflow designer</small>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Default Chat Orchestrator</label>
                        <div class="col-sm-8">
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="isDefaultChatOrchestrator" name="isDefaultChatOrchestrator">
                                <label class="custom-control-label" for="isDefaultChatOrchestrator">Use as default for chat</label>
                            </div>
                            <small class="form-text text-muted">Set as the default orchestrator for chat conversations</small>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-4 col-form-label">Default Workflow Orchestrator</label>
                        <div class="col-sm-8">
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="isDefaultWorkflowOrchestrator" name="isDefaultWorkflowOrchestrator">
                                <label class="custom-control-label" for="isDefaultWorkflowOrchestrator">Use as default for workflows</label>
                            </div>
                            <small class="form-text text-muted">Set as the default orchestrator for workflow execution</small>
                        </div>
                    </div>
                    <hr>
                `;
                
                // Add specific configuration based on orchestrator type
                if (orchestratorId.includes('conversation')) {
                    content += `
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Enable Tool Detection</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enableToolDetection" name="enableToolDetection" checked>
                                    <label class="custom-control-label" for="enableToolDetection">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Tool Detection Threshold</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="toolDetectionThreshold" value="0.7" min="0" max="1" step="0.1">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Auto Detect ReAct Mode</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="autoDetectReActMode" name="autoDetectReActMode" checked>
                                    <label class="custom-control-label" for="autoDetectReActMode">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">ReAct Max Iterations</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="reActMaxIterations" value="5" min="1" max="20">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Default Temperature</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="defaultTemperature" value="0.7" min="0" max="2" step="0.1">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Default Max Tokens</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="defaultMaxTokens" value="2000" min="100" max="10000" step="100">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Message Length</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxMessageLength" value="10000" min="1000" max="50000" step="1000">
                            </div>
                        </div>
                    `;
                } else if (orchestratorId.includes('project')) {
                    content += `
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Concurrent Stages</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxConcurrentStages" value="3" min="1" max="10">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Stage Timeout (minutes)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="stageTimeout" value="5" min="1" max="60">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Enable Parallel Execution</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enableParallelExecution" name="enableParallelExecution" checked>
                                    <label class="custom-control-label" for="enableParallelExecution">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Retry Failed Stages</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="retryFailedStages" name="retryFailedStages" checked>
                                    <label class="custom-control-label" for="retryFailedStages">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Retries</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxRetries" value="2" min="0" max="5">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Log Level</label>
                            <div class="col-sm-8">
                                <select class="form-control" name="logLevel">
                                    <option value="Verbose">Verbose</option>
                                    <option value="Debug">Debug</option>
                                    <option value="Information" selected>Information</option>
                                    <option value="Warning">Warning</option>
                                    <option value="Error">Error</option>
                                    <option value="Fatal">Fatal</option>
                                </select>
                            </div>
                        </div>
                    `;
                } else if (orchestratorId.includes('toolchain')) {
                    content += `
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Concurrent Tools</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxConcurrentTools" value="5" min="1" max="20">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Tool Timeout (seconds)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="toolTimeout" value="30" min="5" max="300">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Enable Caching</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enableCaching" name="enableCaching" checked>
                                    <label class="custom-control-label" for="enableCaching">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Cache Expiration (hours)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="cacheExpiration" value="1" min="0.5" max="24" step="0.5">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Validate Tool Inputs</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="validateToolInputs" name="validateToolInputs" checked>
                                    <label class="custom-control-label" for="validateToolInputs">Enabled</label>
                                </div>
                            </div>
                        </div>
                    `;
                } else if (orchestratorId.includes('webscraping')) {
                    content += `
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Scraper Timeout (seconds)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="scraperTimeout" value="30" min="5" max="120">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Retries</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxRetries" value="3" min="0" max="10">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Retry Delay (seconds)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="retryDelay" value="1" min="0.5" max="10" step="0.5">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Enable JavaScript</label>
                            <div class="col-sm-8">
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" class="custom-control-input" id="enableJavaScript" name="enableJavaScript" checked>
                                    <label class="custom-control-label" for="enableJavaScript">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">User Agent</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control" name="userAgent" value="Mozilla/5.0 (compatible; OptimalyAI/1.0)">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label">Max Page Size (MB)</label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" name="maxPageSize" value="10" min="1" max="50">
                            </div>
                        </div>
                    `;
                }
                
                content += '</form>';
                
                $('#configContent').html(content);
                
                // Load AI servers
                loadAIServers();
                
                // Load saved configuration
                loadSavedConfiguration(orchestratorId);
            }, 300);
        }
        
        async function loadSavedConfiguration(orchestratorId) {
            try {
                const response = await fetch(`/Orchestrators/GetConfiguration?id=${orchestratorId}`);
                const result = await response.json();
                
                if (result.success && result.data) {
                    const config = result.data;
                    
                    // Set default checkbox
                    // Historický IsDefault - už se nepoužívá
                    // $('#isDefaultOrchestrator').prop('checked', config.isDefault);
                    
                    // Set workflow node checkbox (read-only)
                    $('#isWorkflowNode').prop('checked', config.isWorkflowNode || false);
                    $('#isDefaultChatOrchestrator').prop('checked', config.isDefaultChatOrchestrator || false);
                    $('#isDefaultWorkflowOrchestrator').prop('checked', config.isDefaultWorkflowOrchestrator || false);
                    
                    // Set AI server selection after servers are loaded
                    if (config.aiServerId) {
                        setTimeout(() => {
                            $('#aiServerSelect').val(config.aiServerId);
                            $('#aiServerSelect').trigger('change');
                            
                            // Set model selection after models are loaded
                            if (config.defaultModelId) {
                                setTimeout(() => {
                                    $('#modelSelect').val(config.defaultModelId);
                                }, 500);
                            }
                        }, 500);
                    }
                } else {
                    // No saved configuration, set default based on current state
                    // Historický IsDefault - už se nepoužívá
                    // const orchestratorCard = $(`.orchestrator-card[onclick*="${orchestratorId}"]`);
                    // const isCurrentlyDefault = orchestratorCard.find('.badge-warning').length > 0;
                    // $('#isDefaultOrchestrator').prop('checked', isCurrentlyDefault);
                }
            } catch (error) {
                console.error('Error loading saved configuration:', error);
                // Fallback to current state
                // Historický IsDefault - už se nepoužívá
                // const orchestratorCard = $(`.orchestrator-card[onclick*="${orchestratorId}"]`);
                // const isCurrentlyDefault = orchestratorCard.find('.badge-warning').length > 0;
                // $('#isDefaultOrchestrator').prop('checked', isCurrentlyDefault);
            }
        }
        
        async function loadAIServers() {
            try {
                // Load servers from page HTML - we'll parse the existing data
                const response = await fetch('/AiServers');
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Extract servers from the table
                const servers = [];
                doc.querySelectorAll('table tbody tr').forEach(row => {
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 5) {
                        const id = row.querySelector('button[data-id]')?.getAttribute('data-id');
                        const name = cells[0].textContent.trim();
                        const type = cells[1].querySelector('.badge')?.textContent.trim();
                        const url = cells[2].textContent.trim();
                        const isDefault = cells[3].querySelector('.badge-success') !== null;
                        
                        if (id) {
                            servers.push({ id, name, type, url, isDefault });
                        }
                    }
                });
                
                let options = '<option value="">Select AI Server</option>';
                servers.forEach(server => {
                    const isDefault = server.isDefault ? ' (Default)' : '';
                    options += `<option value="${server.id}" data-type="${server.type}" data-url="${server.url}">${server.name}${isDefault} - ${server.url}</option>`;
                });
                
                $('#aiServerSelect').html(options);
                
                // Don't auto-select any server - let the saved configuration handle it
            } catch (error) {
                console.error('Error loading AI servers:', error);
                $('#aiServerSelect').html('<option value="">Error loading servers</option>');
            }
        }
        
        async function loadServerModels() {
            const selectedServerId = $('#aiServerSelect').val();
            const selectedOption = $('#aiServerSelect option:selected');
            const serverType = selectedOption.data('type');
            const serverUrl = selectedOption.data('url');
            
            if (!selectedServerId) {
                $('#modelSelect').html('<option value="">Select AI Server first</option>');
                return;
            }
            
            $('#modelSelect').html('<option value="">Loading models...</option>');
            
            try {
                // Load models page and extract data
                const response = await fetch('/Models');
                const html = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Extract models from table
                const models = [];
                const selectedServerText = $('#aiServerSelect option:selected').text();
                
                doc.querySelectorAll('table tbody tr').forEach(row => {
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 7) {
                        const modelName = cells[0].querySelector('small')?.textContent.trim();
                        const serverBadge = cells[1].querySelector('.badge')?.textContent.trim();
                        const sizeText = cells[2].textContent.trim();
                        const statusBadge = cells[6].querySelector('.badge');
                        const isLoaded = statusBadge?.textContent.includes('Načtený') || false;
                        
                        // Filter by selected server
                        if (modelName && (selectedServerText.includes(serverBadge) || serverBadge === selectedOption.data('type'))) {
                            models.push({ 
                                name: modelName, 
                                sizeText: sizeText, 
                                isLoaded: isLoaded 
                            });
                        }
                    }
                });
                
                let options = '<option value="">Select Model</option>';
                models.forEach(model => {
                    const status = model.isLoaded ? ' (Loaded)' : '';
                    const size = model.sizeText ? ` - ${model.sizeText}` : '';
                    options += `<option value="${model.name}">${model.name}${size}${status}</option>`;
                });
                
                $('#modelSelect').html(options);
                
                // Select default model if exists
                const defaultModel = models.find(m => m.name.includes('llama3.2')) || models[0];
                if (defaultModel) {
                    $('#modelSelect').val(defaultModel.name);
                }
            } catch (error) {
                console.error('Error loading models:', error);
                $('#modelSelect').html('<option value="">Error loading models</option>');
            }
        }
        
        function saveConfig() {
            const formData = $('#configForm').serializeArray();
            const config = {};
            
            // Convert form data to object
            formData.forEach(item => {
                if (item.value === 'on') {
                    // Handle checkboxes
                    config[item.name] = true;
                } else if (!isNaN(item.value) && item.value !== '') {
                    // Handle numbers
                    config[item.name] = parseFloat(item.value);
                } else {
                    // Handle strings
                    config[item.name] = item.value;
                }
            });
            
            // Add unchecked checkboxes
            $('#configForm input[type="checkbox"]').each(function() {
                if (!this.checked) {
                    config[this.name] = false;
                }
            });
            
            // Show saving state
            const saveBtn = $('button[onclick="saveConfig()"]');
            const originalText = saveBtn.html();
            saveBtn.html('<i class="fas fa-spinner fa-spin"></i> Saving...').prop('disabled', true);
            
            // Save configuration
            Promise.resolve().then(async () => {
                try {
                    // Prepare configuration data
                    const aiServerId = $('#aiServerSelect').val();
                    const defaultModelId = $('#modelSelect').val();
                    
                    // Historický IsDefault - už se nepoužívá
                    // const isDefault = $('#isDefaultOrchestrator').is(':checked');
                    const isDefault = false; // Vždy false, už se nepoužívá
                    const isWorkflowNode = $('#isWorkflowNode').is(':checked');
                    const isDefaultChatOrchestrator = $('#isDefaultChatOrchestrator').is(':checked');
                    const isDefaultWorkflowOrchestrator = $('#isDefaultWorkflowOrchestrator').is(':checked');
                    
                    const configData = {
                        orchestratorId: currentOrchestratorId,
                        name: currentOrchestratorId,
                        isDefault: isDefault,
                        isWorkflowNode: isWorkflowNode,
                        isDefaultChatOrchestrator: isDefaultChatOrchestrator,
                        isDefaultWorkflowOrchestrator: isDefaultWorkflowOrchestrator,
                        aiServerId: aiServerId ? aiServerId : null,
                        defaultModelId: defaultModelId ? defaultModelId : null
                    };
                    
                    console.log('Saving config data:', configData);
                    console.log('Current orchestrator ID:', currentOrchestratorId);
                    console.log('AI Server ID:', aiServerId);
                    console.log('Model ID:', defaultModelId);
                    console.log('Is Default:', isDefault);
                    console.log('JSON being sent:', JSON.stringify(configData));
                    
                    const response = await fetch('/Orchestrators/SaveConfiguration', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(configData)
                    });
                    
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    
                    const result = await response.json();
                    console.log('Response result:', result);
                    
                    if (result.success) {
                        toastr.success('Configuration saved successfully!');
                        saveBtn.html(originalText).prop('disabled', false);
                        
                        // Historický IsDefault - už se nepoužívá
                        // Refresh page if default was changed
                        // if (isDefault === true) {
                        //     location.reload();
                        // }
                    } else {
                        throw new Error(result.error || 'Failed to save configuration');
                    }
                } catch (error) {
                    console.error('Error saving configuration:', error);
                    toastr.error('Failed to save configuration: ' + error.message);
                    saveBtn.html(originalText).prop('disabled', false);
                }
            });
        }
        
        function loadTestTab(orchestratorId) {
            const orchestratorCard = $(`.orchestrator-card[onclick*="${orchestratorId}"]`);
            const orchestratorName = orchestratorCard.find('.card-title').text().trim();
            
            $('#testContent').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading test interface...</div>');
            
            setTimeout(() => {
                let content = `
                    <div class="test-interface">
                        <h5 class="mb-3">Test ${orchestratorName}</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h6><i class="fas fa-edit"></i> Input</h6>
                                    </div>
                                    <div class="card-body">
                                        <form id="testForm">
                                            <div class="form-group">
                                                <label>Input Data (JSON)</label>
                                                <textarea id="testInput" class="form-control" rows="10" placeholder='{"message": "Test message"}'>{
  "message": "Hello, test the orchestrator"
}</textarea>
                                            </div>
                                            <div class="form-group">
                                                <label>Context (Optional)</label>
                                                <textarea id="testContext" class="form-control" rows="3" placeholder='{"userId": "test-user"}'></textarea>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header">
                                        <h6><i class="fas fa-terminal"></i> Output</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="testOutput" style="min-height: 300px; max-height: 400px; overflow-y: auto; background: #f8f9fa; padding: 10px; border-radius: 4px;">
                                            <p class="text-muted">Execute test to see output here...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                $('#testContent').html(content);
            }, 300);
        }
        
        function loadMetricsTab(orchestratorId) {
            $('#metricsContent').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading metrics...</div>');
            
            setTimeout(() => {
                let content = `
                    <div class="metrics-view">
                        <h5 class="mb-3">Performance Metrics</h5>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="small-box bg-info">
                                    <div class="inner">
                                        <h3>0</h3>
                                        <p>Total Executions</p>
                                    </div>
                                    <div class="icon">
                                        <i class="fas fa-chart-line"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="small-box bg-success">
                                    <div class="inner">
                                        <h3>0.0%</h3>
                                        <p>Success Rate</p>
                                    </div>
                                    <div class="icon">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="small-box bg-warning">
                                    <div class="inner">
                                        <h3>0ms</h3>
                                        <p>Avg Response Time</p>
                                    </div>
                                    <div class="icon">
                                        <i class="fas fa-clock"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="small-box bg-danger">
                                    <div class="inner">
                                        <h3>0</h3>
                                        <p>Failed Executions</p>
                                    </div>
                                    <div class="icon">
                                        <i class="fas fa-times-circle"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mt-3">
                            <div class="card-header">
                                <h6><i class="fas fa-history"></i> Recent Executions</h6>
                            </div>
                            <div class="card-body">
                                <p class="text-muted text-center">No execution history available</p>
                            </div>
                        </div>
                    </div>
                `;
                
                $('#metricsContent').html(content);
            }, 300);
        }
        
        async function executeTest() {
            const input = $('#testInput').val();
            const context = $('#testContext').val();
            
            // Validate JSON
            try {
                if (input) JSON.parse(input);
                if (context) JSON.parse(context);
            } catch (e) {
                toastr.error('Invalid JSON format: ' + e.message);
                return;
            }
            
            $('#testOutput').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Executing test...</div>');
            
            // Real API call to test orchestrator
            const startTime = Date.now();
            
            try {
                const response = await fetch('/Orchestrators/Test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        orchestratorId: currentOrchestratorId,
                        input: input ? JSON.parse(input) : {},
                        context: context ? JSON.parse(context) : {}
                    })
                });
                
                const result = await response.json();
                const executionTime = Date.now() - startTime;
                
                if (response.ok && result.success) {
                    $('#testOutput').html(`
                        <div class="result-item">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="badge badge-success">Success</span>
                                <small class="text-muted">${executionTime}ms</small>
                            </div>
                            <pre>${JSON.stringify(result.data, null, 2)}</pre>
                        </div>
                    `);
                    toastr.success('Test executed successfully!');
                } else {
                    $('#testOutput').html(`
                        <div class="result-item">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="badge badge-danger">Error</span>
                                <small class="text-muted">${executionTime}ms</small>
                            </div>
                            <div class="alert alert-danger">
                                ${result.message || result.error || 'Unknown error occurred'}
                            </div>
                        </div>
                    `);
                    toastr.error('Test execution failed');
                }
            } catch (error) {
                const executionTime = Date.now() - startTime;
                $('#testOutput').html(`
                    <div class="result-item">
                        <div class="d-flex justify-content-between mb-2">
                            <span class="badge badge-danger">Error</span>
                            <small class="text-muted">${executionTime}ms</small>
                        </div>
                        <div class="alert alert-danger">
                            Network error: ${error.message}
                        </div>
                    </div>
                `);
                toastr.error('Failed to execute test: ' + error.message);
            }
        }
        
        // Tab switching handlers
        $('#config-tab').on('click', function() {
            loadConfigTab(currentOrchestratorId);
        });
        
        $('#test-tab').on('click', function() {
            $('#saveConfigBtn').hide();
            $('#executeTestBtn').show();
            loadTestTab(currentOrchestratorId);
        });
        
        $('#metrics-tab').on('click', function() {
            $('#saveConfigBtn').hide();
            $('#executeTestBtn').hide();
            loadMetricsTab(currentOrchestratorId);
        });
        
        // Auto-refresh disabled - was causing page reload issues
    </script>
}