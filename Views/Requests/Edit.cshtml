@model OAI.Core.DTOs.Business.BusinessRequestDto
@{
    ViewData["Title"] = $"Upravit po≈æadavek {Model.RequestNumber}";
}

<!-- Content Header -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>
                    <i class="fas fa-edit"></i> Upravit po≈æadavek
                    <span class="badge badge-@GetStatusBadgeClass(Model.Status)">@GetStatusText(Model.Status)</span>
                </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="/Requests">Po≈æadavky</a></li>
                    <li class="breadcrumb-item"><a href="/Requests/@Model.Id">@Model.RequestNumber</a></li>
                    <li class="breadcrumb-item active">Upravit</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <form id="editRequestForm">
            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Z√°kladn√≠ √∫daje</h3>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>N√°zev po≈æadavku <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="title" name="title" value="@Model.Title" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Popis</label>
                                <textarea class="form-control" id="description" name="description" rows="4">@Model.Description</textarea>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Typ po≈æadavku</label>
                                        <select class="form-control" id="requestType" name="requestType">
                                            @{
                                                var requestTypes = new Dictionary<string, string>
                                                {
                                                    {"ProductPhoto", "Produktov√© foto"},
                                                    {"DocumentAnalysis", "Anal√Ωza dokumentu"},
                                                    {"WebScraping", "Web scraping"},
                                                    {"DataProcessing", "Zpracov√°n√≠ dat"},
                                                    {"Custom", "Vlastn√≠"}
                                                };
                                            }
                                            @foreach (var type in requestTypes)
                                            {
                                                if (Model.RequestType == type.Key)
                                                {
                                                    <option value="@type.Key" selected>@type.Value</option>
                                                }
                                                else
                                                {
                                                    <option value="@type.Key">@type.Value</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Priorita</label>
                                        <select class="form-control" id="priority" name="priority">
                                            @{
                                                var priorities = new Dictionary<string, string>
                                                {
                                                    {"Low", "N√≠zk√°"},
                                                    {"Normal", "Norm√°ln√≠"},
                                                    {"High", "Vysok√°"},
                                                    {"Urgent", "Urgentn√≠"}
                                                };
                                            }
                                            @foreach (var priority in priorities)
                                            {
                                                if (Model.Priority.ToString() == priority.Key)
                                                {
                                                    <option value="@priority.Key" selected>@priority.Value</option>
                                                }
                                                else
                                                {
                                                    <option value="@priority.Key">@priority.Value</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>Z√°kazn√≠k</label>
                                <select class="form-control" id="customerId" name="customerId">
                                    <option value="">-- Vyberte z√°kazn√≠ka --</option>
                                    <option value="new">‚ûï Nov√Ω z√°kazn√≠k (rychl√© vytvo≈ôen√≠)</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label>Projekt</label>
                                <select class="form-control" id="projectId" name="projectId">
                                    <option value="">-- Vyberte projekt --</option>
                                    <option value="new">üÜï Vytvo≈ôit nov√Ω projekt z tohoto po≈æadavku</option>
                                </select>
                                <small class="form-text text-muted">
                                    M≈Ø≈æete p≈ôilo≈æit k existuj√≠c√≠mu projektu nebo vytvo≈ôit nov√Ω
                                </small>
                            </div>

                            <!-- Quick project creation -->
                            <div id="quickProjectSection" style="display: none;">
                                <div class="card bg-info">
                                    <div class="card-body">
                                        <div class="form-group mb-0">
                                            <label>N√°zev projektu <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="quickProjectName" 
                                                   placeholder="nap≈ô. Anal√Ωza dat pro jarn√≠ kolekci">
                                            <small class="form-text text-white">Projekt bude automaticky vytvo≈ôen p≈ôi ulo≈æen√≠ po≈æadavku</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Quick customer creation -->
                            <div id="quickCustomerSection" style="display: none;">
                                <div class="card bg-warning">
                                    <div class="card-body">
                                        <div class="form-group mb-0">
                                            <label>Jm√©no z√°kazn√≠ka <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" id="quickCustomerName" 
                                                   placeholder="Jan Nov√°k nebo Firma s.r.o.">
                                            <small class="form-text text-muted">Z√°kazn√≠k bude automaticky vytvo≈ôen p≈ôi ulo≈æen√≠ po≈æadavku</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Detaily</h3>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label>Deadline</label>
                                <input type="datetime-local" class="form-control" id="deadline" name="deadline" 
                                       value="@(Model.Deadline?.ToString("yyyy-MM-ddTHH:mm"))">
                            </div>
                            
                            <div class="form-group">
                                <label>Odhadovan√° cena</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="estimatedCost" name="estimatedCost" 
                                           value="@Model.EstimatedCost" step="0.01">
                                    <div class="input-group-append">
                                        <span class="input-group-text">Kƒç</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>ƒå√≠slo po≈æadavku</label>
                                <input type="text" class="form-control" value="@Model.RequestNumber" readonly>
                            </div>
                            
                            <div class="form-group">
                                <label>Vytvo≈ôeno</label>
                                <input type="text" class="form-control" value="@Model.CreatedAt.ToString("dd.MM.yyyy HH:mm")" readonly>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Ulo≈æit zmƒõny
                    </button>
                    <a href="/Requests/@Model.Id" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Zru≈°it
                    </a>
                </div>
            </div>
        </form>
    </div>
</section>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Load customers and projects
            loadCustomers();
            loadProjects();
            
            // Form submission
            $('#editRequestForm').submit(function(e) {
                e.preventDefault();
                updateRequest();
            });
            
            // Handle customer selection change
            $('#customerId').on('change', function() {
                const selectedValue = $(this).val();
                
                if (selectedValue === 'new') {
                    $('#quickCustomerSection').slideDown();
                    $('#quickCustomerName').focus();
                } else {
                    $('#quickCustomerSection').slideUp();
                    $('#quickCustomerName').val('');
                }
            });

            // Handle project selection change
            $('#projectId').on('change', function() {
                const selectedValue = $(this).val();
                
                if (selectedValue === 'new') {
                    $('#quickProjectSection').slideDown();
                    $('#quickProjectName').focus();
                } else {
                    $('#quickProjectSection').slideUp();
                    $('#quickProjectName').val('');
                }
            });
        });
        
        function loadCustomers(selectedId = null) {
            $.ajax({
                url: '/api/customersapi',
                method: 'GET',
                success: function(response) {
                    const select = $('#customerId');
                    const currentValue = select.val();
                    
                    select.empty();
                    select.append('<option value="">-- Vyberte z√°kazn√≠ka --</option>');
                    select.append('<option value="new">‚ûï Nov√Ω z√°kazn√≠k (rychl√© vytvo≈ôen√≠)</option>');
                    
                    if (response.data && response.data.length > 0) {
                        select.append('<optgroup label="Existuj√≠c√≠ z√°kazn√≠ci">');
                        response.data.forEach(customer => {
                            const selected = (selectedId && customer.id == selectedId) || 
                                           (customer.id == '@Model.ClientId') ? 'selected' : '';
                            const companyInfo = customer.companyName ? ` (${customer.companyName})` : '';
                            select.append(`<option value="${customer.id}" ${selected}>${customer.name}${companyInfo}</option>`);
                        });
                        select.append('</optgroup>');
                    }
                    
                    // Restore previous selection if it was "new"
                    if (currentValue === 'new') {
                        select.val('new');
                    }
                }
            });
        }

        function loadProjects(selectedId = null) {
            $.ajax({
                url: '/api/projectsapi',
                method: 'GET',
                success: function(response) {
                    const select = $('#projectId');
                    const currentValue = select.val();
                    
                    select.empty();
                    select.append('<option value="">-- Vyberte projekt --</option>');
                    select.append('<option value="new">üÜï Vytvo≈ôit nov√Ω projekt z tohoto po≈æadavku</option>');
                    
                    if (response.data && response.data.length > 0) {
                        select.append('<optgroup label="Existuj√≠c√≠ projekty">');
                        response.data.forEach(project => {
                            const selected = (selectedId && project.id == selectedId) || 
                                           (project.id == '@Model.ProjectId') ? 'selected' : '';
                            const statusInfo = project.status ? ` (${project.status})` : '';
                            select.append(`<option value="${project.id}" ${selected}>${project.name}${statusInfo}</option>`);
                        });
                        select.append('</optgroup>');
                    }
                    
                    // Restore previous selection if it was "new"
                    if (currentValue === 'new') {
                        select.val('new');
                    }
                }
            });
        }
        
        function updateRequest() {
            const selectedCustomerValue = $('#customerId').val();
            const selectedProjectValue = $('#projectId').val();
            const submitBtn = $('#editRequestForm button[type="submit"]');
            submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Ukl√°d√°n√≠...');
            
            // If new customer is selected, create customer first
            if (selectedCustomerValue === 'new') {
                const customerName = $('#quickCustomerName').val().trim();
                
                if (!customerName) {
                    toastr.error('N√°zev z√°kazn√≠ka je povinn√Ω');
                    submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                    return;
                }
                
                // Create customer first
                $.ajax({
                    url: '/api/customersapi',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        name: customerName,
                        companyName: customerName
                    }),
                    success: function(customerResponse) {
                        if (customerResponse.success && customerResponse.data) {
                            // Now handle project creation if needed
                            handleProjectCreation(customerResponse.data.id.toString(), customerResponse.data.name);
                        }
                    },
                    error: function() {
                        toastr.error('Nepoda≈ôilo se vytvo≈ôit z√°kazn√≠ka');
                        submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                    }
                });
            } else {
                // Use existing customer or no customer
                const selectedCustomer = $('#customerId option:selected');
                const clientId = selectedCustomerValue || null;
                const clientName = clientId && selectedCustomerValue !== '' ? selectedCustomer.text().split(' (')[0] : null;
                handleProjectCreation(clientId, clientName);
            }
        }

        function handleProjectCreation(clientId, clientName) {
            const selectedProjectValue = $('#projectId').val();
            
            // If new project is selected, create project first
            if (selectedProjectValue === 'new') {
                const projectName = $('#quickProjectName').val().trim();
                
                if (!projectName) {
                    toastr.error('N√°zev projektu je povinn√Ω');
                    const submitBtn = $('#editRequestForm button[type="submit"]');
                    submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                    return;
                }
                
                // Create project first
                const projectData = {
                    name: projectName,
                    description: `Projekt vytvo≈ôen√Ω z po≈æadavku @Model.RequestNumber: @Model.Title`,
                    customerId: clientId,
                    customerName: clientName,
                    status: 'Draft',
                    priority: 'Medium'
                };
                
                $.ajax({
                    url: '/api/projectsapi',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(projectData),
                    success: function(projectResponse) {
                        if (projectResponse.success && projectResponse.data) {
                            // Now update request with the new project
                            submitRequestWithProjectAndCustomer(projectResponse.data.id, clientId, clientName);
                        }
                    },
                    error: function() {
                        toastr.error('Nepoda≈ôilo se vytvo≈ôit projekt');
                        const submitBtn = $('#editRequestForm button[type="submit"]');
                        submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                    }
                });
            } else {
                // Use existing project or no project
                const projectId = selectedProjectValue || null;
                submitRequestWithProjectAndCustomer(projectId, clientId, clientName);
            }
        }
        
        function submitRequestWithProjectAndCustomer(projectId, clientId, clientName) {
            const formData = {
                title: $('#title').val(),
                description: $('#description').val(),
                requestType: $('#requestType').val(),
                priority: $('#priority').val(),
                deadline: $('#deadline').val() || null,
                estimatedCost: parseFloat($('#estimatedCost').val()) || null,
                projectId: projectId,
                clientId: clientId,
                clientName: clientName
            };
            
            const submitBtn = $('#editRequestForm button[type="submit"]');
            
            $.ajax({
                url: '/api/requestsapi/@Model.Id',
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        toastr.success('Zmƒõny byly √∫spƒõ≈°nƒõ ulo≈æeny');
                        setTimeout(() => {
                            window.location.href = '/Requests/@Model.Id';
                        }, 1000);
                    } else {
                        toastr.error(response.message || 'Nepoda≈ôilo se ulo≈æit zmƒõny');
                        submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                    }
                },
                error: function(xhr) {
                    const error = xhr.responseJSON?.message || 'Nepoda≈ôilo se komunikovat se serverem';
                    toastr.error(error);
                    submitBtn.prop('disabled', false).html('<i class="fas fa-save"></i> Ulo≈æit zmƒõny');
                }
            });
        }
    </script>
}

@functions {
    string GetStatusText(OAI.Core.Entities.Business.RequestStatus status) => status switch
    {
        OAI.Core.Entities.Business.RequestStatus.New => "Nov√Ω",
        OAI.Core.Entities.Business.RequestStatus.InProgress => "V Procesu",
        OAI.Core.Entities.Business.RequestStatus.OnHold => "Odlo≈æeno",
        OAI.Core.Entities.Business.RequestStatus.Completed => "Ukonƒçeno",
        _ => status.ToString()
    };

    string GetStatusBadgeClass(OAI.Core.Entities.Business.RequestStatus status) => status switch
    {
        OAI.Core.Entities.Business.RequestStatus.New => "info",
        OAI.Core.Entities.Business.RequestStatus.InProgress => "primary", 
        OAI.Core.Entities.Business.RequestStatus.OnHold => "warning",
        OAI.Core.Entities.Business.RequestStatus.Completed => "success",
        _ => "secondary"
    };
}