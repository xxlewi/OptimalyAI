@model OAI.Core.DTOs.Business.RequestDto
@using OAI.Core.Entities.Business
@{
    ViewData["Title"] = $"Po≈æadavek {Model.RequestNumber}";
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">
                    @ViewData["Title"]
                    <span class="badge badge-@GetStatusBadgeClass(Model.Status)">@GetStatusText(Model.Status)</span>
                </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Dom≈Ø</a></li>
                    <li class="breadcrumb-item"><a href="/Requests">Po≈æadavky</a></li>
                    <li class="breadcrumb-item active">@Model.RequestNumber</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Detaily po≈æadavku</h3>
                        <div class="card-tools">
                            <!-- Status zmƒõna -->
                            <div class="form-group d-inline-block mr-2 mb-0">
                                <label class="sr-only">Status:</label>
                                @{
                                    var currentStatus = Model.Status.ToString();
                                }
                                <select class="form-control form-control-sm" id="statusSelect" onchange="changeStatusDirect(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Id)), this.value)">
                                    @if (currentStatus == "New")
                                    {
                                        <option value="New" selected>üÜï Nov√Ω</option>
                                    }
                                    else
                                    {
                                        <option value="New">üÜï Nov√Ω</option>
                                    }
                                    
                                    @if (currentStatus == "InProgress")
                                    {
                                        <option value="InProgress" selected>‚öôÔ∏è V Procesu</option>
                                    }
                                    else
                                    {
                                        <option value="InProgress">‚öôÔ∏è V Procesu</option>
                                    }
                                    
                                    @if (currentStatus == "OnHold")
                                    {
                                        <option value="OnHold" selected>‚è∏Ô∏è Odlo≈æeno</option>
                                    }
                                    else
                                    {
                                        <option value="OnHold">‚è∏Ô∏è Odlo≈æeno</option>
                                    }
                                    
                                    @if (currentStatus == "Completed")
                                    {
                                        <option value="Completed" selected>‚úÖ Ukonƒçeno</option>
                                    }
                                    else
                                    {
                                        <option value="Completed">‚úÖ Ukonƒçeno</option>
                                    }
                                </select>
                            </div>
                            <a href="/Requests/@Model.Id/Edit" class="btn btn-sm btn-secondary">
                                <i class="fas fa-edit"></i> Upravit
                            </a>
                            <button onclick="deleteRequest(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Id)))" class="btn btn-sm btn-danger">
                                <i class="fas fa-trash"></i> Smazat
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-3">ƒå√≠slo po≈æadavku:</dt>
                            <dd class="col-sm-9">@Model.RequestNumber</dd>
                            
                            <dt class="col-sm-3">Typ po≈æadavku:</dt>
                            <dd class="col-sm-9">@GetRequestTypeText(Model.RequestType)</dd>
                            
                            <dt class="col-sm-3">N√°zev:</dt>
                            <dd class="col-sm-9">@Model.Title</dd>
                            
                            <dt class="col-sm-3">Popis:</dt>
                            <dd class="col-sm-9">@Model.Description</dd>
                            
                            <dt class="col-sm-3">Klient:</dt>
                            <dd class="col-sm-9">
                                @if (!string.IsNullOrEmpty(Model.ClientId) && !string.IsNullOrEmpty(Model.ClientName))
                                {
                                    <a href="/Customers/Details/@Model.ClientId" class="text-primary">
                                        <i class="fas fa-user"></i> @Model.ClientName
                                    </a>
                                }
                                else if (!string.IsNullOrEmpty(Model.ClientName))
                                {
                                    <span>@Model.ClientName</span>
                                }
                                else
                                {
                                    <span class="text-muted">Nen√≠ p≈ôi≈ôazen</span>
                                }
                            </dd>

                            <dt class="col-sm-3">Projekt:</dt>
                            <dd class="col-sm-9">
                                @if (Model.ProjectId.HasValue && !string.IsNullOrEmpty(Model.ProjectName))
                                {
                                    <a href="/Projects/@Model.ProjectId" class="text-primary">
                                        <i class="fas fa-project-diagram"></i> @Model.ProjectName
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">Nen√≠ p≈ôi≈ôazen k projektu</span>
                                    <a href="#" class="btn btn-sm btn-outline-primary ml-2" onclick="createProjectFromRequest()">
                                        <i class="fas fa-plus"></i> Vytvo≈ôit projekt
                                    </a>
                                }
                            </dd>
                            
                            <dt class="col-sm-3">Priorita:</dt>
                            <dd class="col-sm-9">
                                <span class="badge badge-@GetPriorityBadgeClass(Model.Priority)">
                                    @GetPriorityText(Model.Priority)
                                </span>
                            </dd>
                            
                            <dt class="col-sm-3">Deadline:</dt>
                            <dd class="col-sm-9">@(Model.Deadline?.ToString("dd.MM.yyyy HH:mm") ?? "Nen√≠ stanoveno")</dd>
                            
                            <dt class="col-sm-3">Odhadovan√° cena:</dt>
                            <dd class="col-sm-9">@(Model.EstimatedCost?.ToString("C") ?? "Nen√≠ stanoveno")</dd>
                            
                            <dt class="col-sm-3">Skuteƒçn√° cena:</dt>
                            <dd class="col-sm-9">@(Model.ActualCost?.ToString("C") ?? "Zat√≠m nezn√°m√°")</dd>
                            
                            <dt class="col-sm-3">Workflow:</dt>
                            <dd class="col-sm-9">@(Model.WorkflowTemplateName ?? "Nen√≠ p≈ôi≈ôazeno")</dd>
                            
                            <dt class="col-sm-3">Vytvo≈ôeno:</dt>
                            <dd class="col-sm-9">@(Model.CreatedAt.ToString("dd.MM.yyyy HH:mm"))</dd>
                            
                            <dt class="col-sm-3">Naposledy upraveno:</dt>
                            <dd class="col-sm-9">@(Model.UpdatedAt?.ToString("dd.MM.yyyy HH:mm") ?? "Nezn√°m√Ω")</dd>
                        </dl>
                    </div>
                </div>

                <!-- Rychl√° pozn√°mka -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-sticky-note"></i> Pozn√°mka k po≈æadavku
                        </h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="maximize">
                                <i class="fas fa-expand"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <textarea id="quickNote" 
                                  class="form-control" 
                                  rows="4" 
                                  placeholder="Sem m≈Ø≈æete ps√°t pozn√°mky k tomuto po≈æadavku. Automaticky se ulo≈æ√≠ p≈ôi opu≈°tƒõn√≠ pole..."
                                  data-request-id="@Model.Id">@Model.Metadata</textarea>
                        <small class="text-muted">
                            <i class="fas fa-info-circle"></i> Pozn√°mka se automaticky ulo≈æ√≠ p≈ôi opu≈°tƒõn√≠ pole
                        </small>
                    </div>
                </div>

                <!-- Historie pr≈Øbƒõhu po≈æadavku -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-history"></i> Historie pr≈Øbƒõhu po≈æadavku
                        </h3>
                    </div>
                    <div class="card-body">
                        <!-- Formul√°≈ô pro p≈ôid√°n√≠ pozn√°mky -->
                        <form id="addNoteForm" class="mb-4">
                            <div class="form-group">
                                <label>Typ pozn√°mky:</label>
                                <select class="form-control" id="noteType" name="noteType">
                                    <option value="Note">Pozn√°mka</option>
                                    <option value="Progress">Pokrok</option>
                                    <option value="Issue">Probl√©m</option>
                                    <option value="Solution">≈òe≈°en√≠</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Obsah:</label>
                                <textarea class="form-control" id="noteContent" name="content" rows="3" 
                                          placeholder="Napi≈°te pozn√°mku nebo popis toho, co se udƒõlalo..." required></textarea>
                            </div>
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="isInternal">
                                    <label class="form-check-label" for="isInternal">
                                        Intern√≠ pozn√°mka
                                    </label>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-plus"></i> P≈ôidat pozn√°mku
                            </button>
                        </form>

                        <!-- Seznam existuj√≠c√≠ch pozn√°mek -->
                        <div id="notesList">
                            @if (Model.Notes != null && Model.Notes.Any())
                            {
                                <div class="timeline">
                                    @foreach (var note in Model.Notes.OrderByDescending(n => n.CreatedAt))
                                    {
                                        <div class="time-label">
                                            <span class="bg-@GetNoteTypeColor(note.Type)">
                                                @(note.CreatedAt.ToString("dd.MM.yyyy"))
                                            </span>
                                        </div>
                                        <div>
                                            <i class="fas fa-@GetNoteTypeIcon(note.Type) bg-@GetNoteTypeColor(note.Type)"></i>
                                            <div class="timeline-item">
                                                <span class="time">
                                                    <i class="fas fa-clock"></i> @(note.CreatedAt.ToString("HH:mm"))
                                                    @if (note.IsInternal)
                                                    {
                                                        <span class="badge badge-warning ml-2">Intern√≠</span>
                                                    }
                                                </span>
                                                <h3 class="timeline-header">
                                                    @GetNoteTypeText(note.Type)
                                                    <span class="text-muted">- @note.Author</span>
                                                </h3>
                                                <div class="timeline-body">
                                                    @Html.Raw(note.Content.Replace("\n", "<br>"))
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">Zat√≠m nejsou k tomuto po≈æadavku p≈ôid√°ny ≈æ√°dn√© pozn√°mky.</p>
                            }
                        </div>
                    </div>
                </div>

                @if (Model.Files != null && Model.Files.Any())
                {
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">P≈ôilo≈æen√© soubory</h3>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>N√°zev souboru</th>
                                            <th>Velikost</th>
                                            <th>Typ</th>
                                            <th>Nahr√°no</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var file in Model.Files)
                                        {
                                            <tr>
                                                <td>@file.FileName</td>
                                                <td>@FormatFileSize(file.FileSize)</td>
                                                <td>@file.ContentType</td>
                                                <td>@(file.CreatedAt.ToString("dd.MM.yyyy HH:mm"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle add note form
            $('#addNoteForm').submit(function(e) {
                e.preventDefault();
                addNote();
            });
            
            // Auto-save rychl√© pozn√°mky
            let saveTimeout;
            let originalNote = $('#quickNote').val();
            
            $('#quickNote').on('blur', function() {
                const currentNote = $(this).val();
                const requestId = $(this).data('request-id');
                
                // Ulo≈æit pouze pokud se zmƒõnila
                if (currentNote !== originalNote) {
                    $.ajax({
                        url: `/api/requestsapi/${requestId}/metadata`,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ metadata: currentNote }),
                        success: function() {
                            toastr.success('Pozn√°mka byla ulo≈æena');
                            originalNote = currentNote;
                        },
                        error: function() {
                            toastr.error('Nepoda≈ôilo se ulo≈æit pozn√°mku');
                        }
                    });
                }
            });
            
            // Debounce p≈ôi psan√≠
            $('#quickNote').on('input', function() {
                clearTimeout(saveTimeout);
                const currentNote = $(this).val();
                const requestId = $(this).data('request-id');
                
                // Ulo≈æit po 2 sekund√°ch neƒçinnosti
                saveTimeout = setTimeout(function() {
                    if (currentNote !== originalNote) {
                        $.ajax({
                            url: `/api/requestsapi/${requestId}/metadata`,
                            method: 'PUT',
                            contentType: 'application/json',
                            data: JSON.stringify({ metadata: currentNote }),
                            success: function() {
                                toastr.success('Pozn√°mka byla ulo≈æena');
                                originalNote = currentNote;
                            },
                            error: function() {
                                toastr.error('Nepoda≈ôilo se ulo≈æit pozn√°mku');
                            }
                        });
                    }
                }, 2000);
            });
        });

        function deleteRequest(requestId) {
            if (confirm('Opravdu chcete smazat tento po≈æadavek?')) {
                $.ajax({
                    url: `/api/requestsapi/${requestId}`,
                    method: 'DELETE',
                    success: function() {
                        toastr.success('Po≈æadavek byl smaz√°n');
                        window.location.href = '/Requests';
                    },
                    error: function(xhr) {
                        if (xhr.status === 404) {
                            toastr.error('Po≈æadavek nebyl nalezen');
                        } else {
                            toastr.error('Nepoda≈ôilo se smazat po≈æadavek');
                        }
                    }
                });
            }
        }

        function changeStatusDirect(requestId, newStatus) {
            $.ajax({
                url: `/api/requestsapi/${requestId}/status`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ status: newStatus }),
                success: function(response) {
                    if (response.success) {
                        toastr.success(`Status zmƒõnƒõn na: ${getStatusText(newStatus)}`);
                        // Update badge in header
                        updateStatusBadge(newStatus);
                    } else {
                        toastr.error(response.message || 'Nepoda≈ôilo se zmƒõnit status');
                        // Revert select to original value
                        $('#statusSelect').val(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Status.ToString())));
                    }
                },
                error: function() {
                    toastr.error('Nepoda≈ôilo se komunikovat se serverem');
                    // Revert select to original value
                    $('#statusSelect').val(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Status.ToString())));
                }
            });
        }

        function updateStatusBadge(status) {
            const statusBadge = $('h1.m-0 .badge');
            const statusClass = {
                'New': 'badge-info',
                'InProgress': 'badge-primary', 
                'OnHold': 'badge-warning',
                'Completed': 'badge-success'
            };
            
            statusBadge.removeClass('badge-info badge-primary badge-warning badge-success')
                      .addClass(statusClass[status])
                      .text(getStatusText(status));
        }

        function addNote() {
            const content = $('#noteContent').val().trim();
            const type = $('#noteType').val();
            const isInternal = $('#isInternal').is(':checked');

            if (!content) {
                toastr.error('Obsah pozn√°mky je povinn√Ω');
                return;
            }

            const requestId = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Id));
            const author = 'U≈æivatel'; // TODO: Get from current user

            $.ajax({
                url: `/api/requestsapi/${requestId}/notes`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    Content: content,
                    Author: author,
                    Type: type,
                    IsInternal: isInternal
                }),
                success: function(response) {
                    if (response.success) {
                        toastr.success('Pozn√°mka byla p≈ôid√°na');
                        // Clear form
                        $('#noteContent').val('');
                        $('#noteType').val('Note');
                        $('#isInternal').prop('checked', false);
                        // Reload page after short delay
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        toastr.error(response.message || 'Nepoda≈ôilo se p≈ôidat pozn√°mku');
                    }
                },
                error: function(xhr, status, error) {
                    console.log('Error details:', xhr.responseText);
                    var errorMessage = 'Nepoda≈ôilo se komunikovat se serverem';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        try {
                            var response = JSON.parse(xhr.responseText);
                            if (response.message) {
                                errorMessage = response.message;
                            }
                        } catch (e) {
                            console.log('Failed to parse error response');
                        }
                    }
                    toastr.error(errorMessage);
                }
            });
        }

        function getStatusText(status) {
            const statusMap = {
                'New': 'Nov√Ω',
                'InProgress': 'V Procesu',
                'OnHold': 'Odlo≈æeno',
                'Completed': 'Ukonƒçeno'
            };
            return statusMap[status] || status;
        }

        function createProjectFromRequest() {
            const projectName = prompt('N√°zev nov√©ho projektu:', @Html.Raw(System.Text.Json.JsonSerializer.Serialize($"{Model.Title} - Projekt")));
            if (projectName && projectName.trim()) {
                const projectData = {
                    name: projectName.trim(),
                    description: @Html.Raw(System.Text.Json.JsonSerializer.Serialize($"Projekt vytvo≈ôen√Ω z po≈æadavku {Model.RequestNumber}: {Model.Title}")),
                    customerId: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ClientId ?? "")),
                    customerName: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ClientName ?? "")),
                    status: 'Draft',
                    priority: 'Medium',
                    workflowType: 'Sequential' // Default workflow type
                };
                
                $.ajax({
                    url: '/api/projects',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(projectData),
                    success: function(response) {
                        console.log('Project created:', response);
                        if (response && response.success && response.data && response.data.id) {
                            // Now link the request to the project
                            $.ajax({
                                url: '/api/requestsapi/@Model.Id',
                                method: 'PUT',
                                contentType: 'application/json',
                                data: JSON.stringify({
                                    title: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Title)),
                                    description: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Description)),
                                    requestType: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.RequestType)),
                                    priority: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Priority.ToString())),
                                    deadline: @Html.Raw(Model.Deadline.HasValue ? System.Text.Json.JsonSerializer.Serialize(Model.Deadline.Value.ToString("yyyy-MM-ddTHH:mm")) : "null"),
                                    estimatedCost: @(Model.EstimatedCost ?? 0),
                                    projectId: response.data.id,
                                    clientId: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ClientId ?? "")),
                                    clientName: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ClientName ?? ""))
                                }),
                                success: function(updateResponse) {
                                    console.log('Request updated:', updateResponse);
                                    toastr.success('Projekt byl vytvo≈ôen a po≈æadavek k nƒõmu p≈ôi≈ôazen');
                                    setTimeout(() => location.reload(), 1000);
                                },
                                error: function(xhr, status, error) {
                                    console.error('Failed to update request:', xhr.responseText);
                                    toastr.error('Projekt byl vytvo≈ôen, ale nepoda≈ôilo se propojit s po≈æadavkem');
                                }
                            });
                        } else {
                            console.error('Invalid project response:', response);
                            toastr.error('Projekt byl vytvo≈ôen, ale odpovƒõƒè serveru je neplatn√°');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Failed to create project:', xhr.responseText);
                        toastr.error('Nepoda≈ôilo se vytvo≈ôit projekt');
                    }
                });
            }
        }

        function submitRequest(requestId) {
            Swal.fire({
                title: 'Odeslat po≈æadavek?',
                text: 'Po odesl√°n√≠ ji≈æ nebude mo≈æn√© po≈æadavek upravovat.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Ano, odeslat',
                cancelButtonText: 'Zru≈°it'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/requestsapi/${requestId}/submit`,
                        method: 'POST',
                        success: function(response) {
                            if (response.success) {
                                Swal.fire('Odesl√°no!', 'Po≈æadavek byl odesl√°n ke zpracov√°n√≠.', 'success')
                                    .then(() => location.reload());
                            } else {
                                Swal.fire('Chyba', response.message || 'Nepoda≈ôilo se odeslat po≈æadavek', 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Chyba', 'Nepoda≈ôilo se komunikovat se serverem', 'error');
                        }
                    });
                }
            });
        }
        
        
        function returnToDraft(requestId) {
            Swal.fire({
                title: 'Vr√°tit k √∫prav√°m?',
                text: 'Po≈æadavek bude vr√°cen do stavu Koncept.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Ano, vr√°tit',
                cancelButtonText: 'Zru≈°it'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/requestsapi/${requestId}/return-to-draft`,
                        method: 'POST',
                        success: function(response) {
                            if (response.success) {
                                Swal.fire('Vr√°ceno!', 'Po≈æadavek byl vr√°cen k √∫prav√°m.', 'success')
                                    .then(() => location.reload());
                            } else {
                                Swal.fire('Chyba', response.message || 'Nepoda≈ôilo se vr√°tit po≈æadavek', 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Chyba', 'Nepoda≈ôilo se komunikovat se serverem', 'error');
                        }
                    });
                }
            });
        }
        
        function startExecution(requestId) {
            if (confirm('Opravdu chcete spustit zpracov√°n√≠ tohoto po≈æadavku?')) {
                fetch(`/api/requestsapi/${requestId}/execute`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toastr.success('Zpracov√°n√≠ bylo √∫spƒõ≈°nƒõ spu≈°tƒõno');
                        setTimeout(() => location.reload(), 2000);
                    } else {
                        toastr.error(data.message || 'Chyba p≈ôi spou≈°tƒõn√≠ zpracov√°n√≠');
                    }
                })
                .catch(error => {
                    toastr.error('Chyba p≈ôi komunikaci se serverem');
                });
            }
        }
    </script>
}

@functions {
    string GetStatusText(OAI.Core.Entities.Business.RequestStatus status) => status switch
    {
        OAI.Core.Entities.Business.RequestStatus.New => "Nov√Ω",
        OAI.Core.Entities.Business.RequestStatus.InProgress => "V Procesu",
        OAI.Core.Entities.Business.RequestStatus.OnHold => "Odlo≈æeno",
        OAI.Core.Entities.Business.RequestStatus.Completed => "Ukonƒçeno",
        _ => status.ToString()
    };

    string GetStatusBadgeClass(OAI.Core.Entities.Business.RequestStatus status) => status switch
    {
        OAI.Core.Entities.Business.RequestStatus.New => "info",
        OAI.Core.Entities.Business.RequestStatus.InProgress => "primary", 
        OAI.Core.Entities.Business.RequestStatus.OnHold => "warning",
        OAI.Core.Entities.Business.RequestStatus.Completed => "success",
        _ => "secondary"
    };

    string GetRequestTypeText(string requestType) => requestType switch
    {
        "ProductPhoto" => "Produktov√© foto",
        "DocumentAnalysis" => "Anal√Ωza dokumentu",
        "WebScraping" => "Web scraping",
        "DataProcessing" => "Zpracov√°n√≠ dat",
        "Custom" => "Vlastn√≠",
        _ => requestType
    };

    string GetPriorityText(OAI.Core.Entities.Business.RequestPriority priority) => priority switch
    {
        OAI.Core.Entities.Business.RequestPriority.Low => "N√≠zk√°",
        OAI.Core.Entities.Business.RequestPriority.Normal => "Norm√°ln√≠",
        OAI.Core.Entities.Business.RequestPriority.High => "Vysok√°",
        OAI.Core.Entities.Business.RequestPriority.Urgent => "Urgentn√≠",
        _ => priority.ToString()
    };

    string GetPriorityBadgeClass(OAI.Core.Entities.Business.RequestPriority priority) => priority switch
    {
        OAI.Core.Entities.Business.RequestPriority.Low => "secondary",
        OAI.Core.Entities.Business.RequestPriority.Normal => "info",
        OAI.Core.Entities.Business.RequestPriority.High => "warning",
        OAI.Core.Entities.Business.RequestPriority.Urgent => "danger",
        _ => "secondary"
    };

    string GetExecutionStatusText(OAI.Core.Entities.Business.ExecutionStatus status) => status switch
    {
        OAI.Core.Entities.Business.ExecutionStatus.Pending => "ƒåek√°",
        OAI.Core.Entities.Business.ExecutionStatus.Running => "Bƒõ≈æ√≠",
        OAI.Core.Entities.Business.ExecutionStatus.Paused => "Pozastaveno",
        OAI.Core.Entities.Business.ExecutionStatus.Completed => "Dokonƒçeno",
        OAI.Core.Entities.Business.ExecutionStatus.Failed => "Selhalo",
        OAI.Core.Entities.Business.ExecutionStatus.Cancelled => "Zru≈°eno",
        _ => status.ToString()
    };

    string GetExecutionStatusColor(OAI.Core.Entities.Business.ExecutionStatus status) => status switch
    {
        OAI.Core.Entities.Business.ExecutionStatus.Pending => "secondary",
        OAI.Core.Entities.Business.ExecutionStatus.Running => "primary",
        OAI.Core.Entities.Business.ExecutionStatus.Paused => "warning",
        OAI.Core.Entities.Business.ExecutionStatus.Completed => "success",
        OAI.Core.Entities.Business.ExecutionStatus.Failed => "danger",
        OAI.Core.Entities.Business.ExecutionStatus.Cancelled => "dark",
        _ => "secondary"
    };

    string GetExecutionStatusIcon(OAI.Core.Entities.Business.ExecutionStatus status) => status switch
    {
        OAI.Core.Entities.Business.ExecutionStatus.Pending => "clock",
        OAI.Core.Entities.Business.ExecutionStatus.Running => "cog",
        OAI.Core.Entities.Business.ExecutionStatus.Paused => "pause",
        OAI.Core.Entities.Business.ExecutionStatus.Completed => "check",
        OAI.Core.Entities.Business.ExecutionStatus.Failed => "times",
        OAI.Core.Entities.Business.ExecutionStatus.Cancelled => "ban",
        _ => "question"
    };

    string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size = size / 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }

    string FormatDuration(DateTime start, DateTime end)
    {
        var duration = end - start;
        if (duration.TotalMinutes < 1)
            return $"{duration.TotalSeconds:0} sekund";
        if (duration.TotalHours < 1)
            return $"{duration.TotalMinutes:0} minut";
        if (duration.TotalDays < 1)
            return $"{duration.TotalHours:0.#} hodin";
        return $"{duration.TotalDays:0.#} dn√≠";
    }

    string GetNoteTypeText(NoteType type) => type switch
    {
        NoteType.Note => "Pozn√°mka",
        NoteType.Progress => "Pokrok",
        NoteType.Issue => "Probl√©m", 
        NoteType.Solution => "≈òe≈°en√≠",
        _ => type.ToString()
    };

    string GetNoteTypeColor(NoteType type) => type switch
    {
        NoteType.Note => "info",
        NoteType.Progress => "success",
        NoteType.Issue => "danger",
        NoteType.Solution => "primary",
        _ => "secondary"
    };

    string GetNoteTypeIcon(NoteType type) => type switch
    {
        NoteType.Note => "comment",
        NoteType.Progress => "arrow-up",
        NoteType.Issue => "exclamation-triangle",
        NoteType.Solution => "check-circle",
        _ => "circle"
    };
}

