@{
    ViewData["Title"] = "Po≈æadavky";
}

<!-- Content Header -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>
                    <i class="fas fa-inbox"></i> Po≈æadavky
                </h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                    <li class="breadcrumb-item active">Po≈æadavky</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <!-- Statistics Row -->
        <div class="row mb-3">
            <div class="col-lg-3 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3 id="stats-total">0</h3>
                        <p>Celkem po≈æadavk≈Ø</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-inbox"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-6">
                <div class="small-box bg-info">
                    <div class="inner">
                        <h3 id="stats-new">0</h3>
                        <p>Nov√©</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-plus-circle"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-6">
                <div class="small-box bg-primary">
                    <div class="inner">
                        <h3 id="stats-inprogress">0</h3>
                        <p>V procesu</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-cog"></i>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-6">
                <div class="small-box bg-warning">
                    <div class="inner">
                        <h3 id="stats-onhold">0</h3>
                        <p>Odlo≈æen√©</p>
                    </div>
                    <div class="icon">
                        <i class="fas fa-pause-circle"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Filter Section -->
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-4">
                        <div class="input-group">
                            <input type="text" class="form-control" id="searchRequests" 
                                   placeholder="Vyhledat po≈æadavek..." autocomplete="off">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" onclick="filterRequests()">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select id="statusFilter" class="form-control" onchange="filterRequests()">
                            <option value="">V≈°echny po≈æadavky</option>
                            <option value="New">üÜï Nov√©</option>
                            <option value="InProgress">‚öôÔ∏è V procesu</option>
                            <option value="OnHold">‚è∏Ô∏è Odlo≈æen√©</option>
                            <option value="Completed">‚úÖ Ukonƒçen√©</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button type="button" class="btn btn-default" onclick="clearFilters()">
                            <i class="fas fa-times"></i> Vymazat filtry
                        </button>
                    </div>
                    <div class="col-md-2">
                        <a href="/Requests/New" class="btn btn-success">
                            <i class="fas fa-plus"></i> Nov√Ω po≈æadavek
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Requests Table -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Seznam po≈æadavk≈Ø</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" id="refresh-btn">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered table-striped table-hover" id="requestsTable">
                        <thead>
                            <tr>
                                <th>Po≈æadavek</th>
                                <th>Klient</th>
                                <th>Priorita</th>
                                <th>Vytvo≈ôeno</th>
                                <th>Deadline</th>
                                <th style="width: 200px">Akce</th>
                            </tr>
                        </thead>
                        <tbody id="requests-tbody">
                            <tr>
                                <td colspan="6" class="text-center">
                                    <i class="fas fa-spinner fa-spin"></i> Naƒç√≠t√°n√≠...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script src="~/lib/microsoft-signalr/dist/browser/signalr.min.js"></script>
    <script>
        let currentFilter = '';
        
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/monitoringHub")
            .build();
            
        connection.on("RequestCreated", (request) => {
            loadRequests();
            updateStats();
        });
        
        connection.on("RequestUpdated", (request) => {
            loadRequests();
            updateStats();
        });
        
        connection.start().catch(err => console.error(err));
        
        // Load requests
        function loadRequests() {
            $.ajax({
                url: '/api/requestsapi' + (currentFilter ? '?status=' + currentFilter : ''),
                method: 'GET',
                success: function(response) {
                    const tbody = $('#requests-tbody');
                    tbody.empty();
                    
                    if (response.data && response.data.length > 0) {
                        response.data.forEach(request => {
                            tbody.append(createRequestRow(request));
                        });
                    } else {
                        tbody.append('<tr><td colspan="6" class="text-center">≈Ω√°dn√© po≈æadavky nenalezeny</td></tr>');
                    }
                },
                error: function() {
                    $('#requests-tbody').html('<tr><td colspan="6" class="text-center text-danger">Chyba p≈ôi naƒç√≠t√°n√≠ po≈æadavk≈Ø</td></tr>');
                }
            });
        }
        
        // Create request row
        function createRequestRow(request) {
            const priorityBadge = {
                'Low': 'badge-secondary',
                'Normal': 'badge-info',
                'High': 'badge-warning',
                'Urgent': 'badge-danger'
            };
            
            const statusBadge = {
                'New': 'badge-info',
                'InProgress': 'badge-primary',
                'OnHold': 'badge-warning',
                'Completed': 'badge-success'
            };

            const statusText = {
                'New': 'üÜï Nov√Ω',
                'InProgress': '‚öôÔ∏è V procesu',
                'OnHold': '‚è∏Ô∏è Odlo≈æeno',
                'Completed': '‚úÖ Ukonƒçeno'
            };

            const priorityText = {
                'Low': 'N√≠zk√°',
                'Normal': 'Norm√°ln√≠',
                'High': 'Vysok√°',
                'Urgent': 'Urgentn√≠'
            };

            const requestTypeText = {
                'ProductPhoto': 'Produktov√© foto',
                'DocumentAnalysis': 'Anal√Ωza dokumentu',
                'WebScraping': 'Web scraping',
                'DataProcessing': 'Zpracov√°n√≠ dat',
                'Custom': 'Vlastn√≠'
            };
            
            return `
                <tr data-status="${request.status}" data-title="${request.title.toLowerCase()}" data-client="${(request.clientName || '').toLowerCase()}" data-number="${request.requestNumber}">
                    <td>
                        <div>
                            <strong>
                                <a href="/Requests/${request.id}" class="text-dark">
                                    ${request.title}
                                </a>
                            </strong>
                            <span class="badge ${statusBadge[request.status]} float-right">${statusText[request.status]}</span>
                            <br>
                            <small class="text-muted">
                                ${request.requestNumber} ‚Ä¢ ${requestTypeText[request.requestType] || request.requestType}
                                ${request.description ? '<br>' + request.description.substring(0, 100) + (request.description.length > 100 ? '...' : '') : ''}
                            </small>
                        </div>
                    </td>
                    <td>
                        <div>
                            <i class="fas fa-user text-muted"></i> 
                            ${request.clientName || 'Nen√≠ p≈ôi≈ôazen'}
                        </div>
                    </td>
                    <td>
                        <span class="badge ${priorityBadge[request.priority]}">${priorityText[request.priority] || request.priority}</span>
                    </td>
                    <td>
                        <small>${formatDate(request.createdAt)}</small>
                    </td>
                    <td>
                        <small>${request.deadline ? formatDate(request.deadline) : 'Nen√≠ stanoveno'}</small>
                    </td>
                    <td class="text-center align-middle">
                        <div class="btn-group">
                            <a href="/Requests/${request.id}" class="btn btn-info btn-sm" title="Detail po≈æadavku">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="/Requests/${request.id}/Edit" class="btn btn-primary btn-sm" title="Upravit po≈æadavek">
                                <i class="fas fa-edit"></i>
                            </a>
                            ${request.status === 'New' || request.status === 'OnHold' ? `
                                <button type="button" class="btn btn-success btn-sm execute-btn" data-id="${request.id}" title="Spustit zpracov√°n√≠">
                                    <i class="fas fa-play"></i>
                                </button>
                            ` : ''}
                            <button type="button" class="btn btn-danger btn-sm" onclick="deleteRequest(${request.id})" title="Smazat po≈æadavek">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
        }
        
        // Helper functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('cs-CZ') + ' ' + date.toLocaleTimeString('cs-CZ', { hour: '2-digit', minute: '2-digit' });
        }
        
        // Update statistics
        function updateStats() {
            $.ajax({
                url: '/api/requestsapi/status-counts',
                method: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        const counts = response.data;
                        $('#stats-total').text(counts.total || 0);
                        $('#stats-new').text(counts.new || 0);
                        $('#stats-inprogress').text(counts.inprogress || 0);
                        $('#stats-onhold').text(counts.onhold || 0);
                    }
                }
            });
        }

        // Filter functions
        function filterRequests() {
            const searchTerm = $('#searchRequests').val().toLowerCase();
            const statusFilter = $('#statusFilter').val();
            
            $('#requestsTable tbody tr').each(function() {
                const row = $(this);
                const status = row.attr('data-status');
                const title = row.attr('data-title') || '';
                const client = row.attr('data-client') || '';
                const number = row.attr('data-number') || '';
                const description = row.find('td:first small').text().toLowerCase();
                
                // Status filter
                let statusMatch = true;
                if (statusFilter) {
                    statusMatch = status === statusFilter;
                }
                
                // Search filter
                const searchMatch = !searchTerm || 
                    title.includes(searchTerm) || 
                    description.includes(searchTerm) ||
                    client.includes(searchTerm) ||
                    number.toLowerCase().includes(searchTerm);
                
                if (statusMatch && searchMatch) {
                    row.show();
                } else {
                    row.hide();
                }
            });
            
            // Show filtered count
            const visibleCount = $('#requestsTable tbody tr:visible').length;
            const totalCount = $('#requestsTable tbody tr').length;
            
            if (visibleCount < totalCount) {
                if ($('#filterInfo').length === 0) {
                    $('.card-header').append(`<span id="filterInfo" class="float-right text-muted"></span>`);
                }
                $('#filterInfo').text(`Zobrazeno ${visibleCount} z ${totalCount} po≈æadavk≈Ø`);
            } else {
                $('#filterInfo').remove();
            }
        }
        
        function clearFilters() {
            $('#searchRequests').val('');
            $('#statusFilter').val('');
            filterRequests();
        }

        function deleteRequest(requestId) {
            if (confirm('Opravdu chcete smazat tento po≈æadavek?')) {
                $.ajax({
                    url: `/api/requestsapi/${requestId}`,
                    method: 'DELETE',
                    success: function() {
                        toastr.success('Po≈æadavek byl smaz√°n');
                        loadRequests();
                        updateStats();
                    },
                    error: function() {
                        toastr.error('Nepoda≈ôilo se smazat po≈æadavek');
                    }
                });
            }
        }
        
        // Event handlers
        $(document).ready(function() {
            loadRequests();
            updateStats();
            
            // Refresh button
            $('#refresh-btn').click(function() {
                $(this).find('i').addClass('fa-spin');
                loadRequests();
                updateStats();
                setTimeout(() => {
                    $(this).find('i').removeClass('fa-spin');
                }, 1000);
            });
            
            // Execute button
            $(document).on('click', '.execute-btn', function() {
                const requestId = $(this).data('id');
                const btn = $(this);
                
                btn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i>');
                
                $.ajax({
                    url: `/api/requestsapi/${requestId}/execute`,
                    method: 'POST',
                    success: function() {
                        toastr.success('Zpracov√°n√≠ bylo spu≈°tƒõno');
                        loadRequests();
                        updateStats();
                    },
                    error: function() {
                        toastr.error('Nepoda≈ôilo se spustit zpracov√°n√≠');
                        btn.prop('disabled', false).html('<i class="fas fa-play"></i>');
                    }
                });
            });

            // Real-time search while typing
            $('#searchRequests').on('keyup', function() {
                filterRequests();
            });
            
            // Apply default filter on page load
            filterRequests();
        });
    </script>
}