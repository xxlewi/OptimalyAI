@model OptimalyAI.ViewModels.WorkflowGraphViewModel
@{
    ViewData["Title"] = "Workflow Designer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/workflow/workflow-designer.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-toolbox.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-nodes.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-connections.css" />
    <link rel="stylesheet" href="~/css/workflow/discovery-chat.css" />
}

@await Html.PartialAsync("Partials/_WorkflowHeader", Model)

<section class="content">
    <div class="container-fluid">
        @await Html.PartialAsync("Partials/_WorkflowToolbar", Model)
        
        <div class="designer-container">
            @await Html.PartialAsync("Partials/_WorkflowToolbox", Model)
            
            <div class="main-designer-area">
                @await Html.PartialAsync("Partials/_WorkflowCanvas", Model)
                
                <!-- Discovery Chat Panel Container -->
                <div id="discovery-chat-container" class="discovery-chat-panel"></div>
            </div>
        </div>
    </div>
</section>

@await Html.PartialAsync("Partials/_WorkflowModals", Model)
@await Html.PartialAsync("_WorkflowTestModal")

@section Scripts {
<!-- SignalR -->
<script src="~/lib/microsoft-signalr/dist/browser/signalr.min.js"></script>

<script type="module">
    import { WorkflowDesignerApp } from '/js/workflow/workflow-designer-app.js';
    import { DiscoveryChat } from '/js/workflow/modules/discovery-chat.js';
    
    // Initialize workflow designer application
    const app = new WorkflowDesignerApp({
        projectId: '@Model.ProjectId',
        workflowId: '@Model.WorkflowId',
        projectName: '@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ProjectName))'
    });
    
    // Initialize on DOM ready
    $(document).ready(async function() {
        try {
            // Make app globally available for project-test.js
            window.workflowDesignerApp = app;
            
            await app.initialize();
            console.log('Workflow Designer initialized successfully');
            
        } catch (error) {
            console.error('Failed to initialize Workflow Designer:', error);
            toastr.error('Chyba při inicializaci workflow designeru');
        }
        
        // Initialize Discovery Chat separately to avoid blocking main app
        try {
            console.log('Initializing Discovery Chat...');
            console.log('app.workflowManager:', app.workflowManager);
            console.log('app.canvasRenderer:', app.canvasRenderer);
            
            const discoveryChat = new DiscoveryChat({
                projectId: '@Model.ProjectId',
                workflowManager: app.workflowManager,
                canvasRenderer: app.canvasRenderer
            });
            
            // Wait for async initialization to complete
            await discoveryChat.initPromise;
            
            // Make discovery chat globally available
            window.discoveryChat = discoveryChat;
            console.log('Discovery Chat initialized successfully');
            
        } catch (error) {
            console.error('Failed to initialize Discovery Chat:', error);
            // Try to initialize without dependencies
            try {
                console.log('Trying basic Discovery Chat initialization...');
                const discoveryChat = new DiscoveryChat({
                    projectId: '@Model.ProjectId'
                });
                window.discoveryChat = discoveryChat;
                console.log('Basic Discovery Chat initialized');
            } catch (basicError) {
                console.error('Failed basic Discovery Chat initialization:', basicError);
            }
        }
    });
    
    // Expose app globally for debugging
    window.workflowDesignerApp = app;
    
    // Expose functions globally for toolbar buttons
    window.saveWorkflow = () => app.saveWorkflow();
    window.validateWorkflow = () => app.validateWorkflow();
    window.testWorkflow = () => app.workflowExecutor.testWorkflow();
    window.clearWorkflow = () => app.clearWorkflow();
    window.autoLayout = () => app.autoLayout.performLayout();
    window.zoomIn = () => app.zoomIn();
    window.zoomOut = () => app.zoomOut();
    window.zoomReset = () => app.zoomReset();
    
    // Expose modal functions
    window.updateCurrentNode = () => app.updateCurrentNode();
    window.deleteCurrentNode = () => app.deleteCurrentNode();
    window.testCurrentTool = () => app.testCurrentTool();
    window.runToolTest = () => app.runToolTest();
    
    
    // Expose showAdapterConfiguration globally for now
    window.showAdapterConfiguration = function(node) {
        app.canvasRenderer.onNodeEdit(node);
    };
    
    // Discovery Chat Test Function
    window.testDiscoveryChat = function() {
        const results = {
            timestamp: new Date().toISOString(),
            discoveryChat: window.discoveryChat ? 'exists' : 'missing',
            sendButton: null,
            inputField: null,
            isConnected: null,
            domElements: {
                sendButton: document.getElementById('discovery-send') ? 'found' : 'missing',
                inputField: document.getElementById('discovery-input') ? 'found' : 'missing',
                clearButton: document.getElementById('clear-chat') ? 'found' : 'missing',
                componentsButton: document.getElementById('get-components') ? 'found' : 'missing'
            }
        };
        
        if (window.discoveryChat) {
            results.sendButton = window.discoveryChat.sendButton ? 'found' : 'missing';
            results.inputField = window.discoveryChat.inputField ? 'found' : 'missing';
            results.isConnected = window.discoveryChat.isConnected;
            
            // Try manual send test
            try {
                if (window.discoveryChat.inputField) {
                    window.discoveryChat.inputField.value = 'test message automated';
                    window.discoveryChat.sendMessage();
                    results.manualTest = 'success - message sent';
                }
            } catch (e) {
                results.manualTest = 'error: ' + e.message;
            }
        }
        
        console.log('=== DISCOVERY CHAT TEST RESULTS ===');
        console.log(JSON.stringify(results, null, 2));
        return results;
    };
    
    // Auto-test after initialization
    setTimeout(() => {
        window.testDiscoveryChat();
    }, 2000);
</script>

<script>
    // Legacy adapter configuration function - will be refactored later
    // This will be moved to a module in the next phase
    window.showAdapterConfiguration = function(node) {
        const adapterType = node.type === 'InputAdapter' ? 'Input' : 'Output';
        const containerId = 'adapterConfigContainer';
        
        // Create a unique element ID
        const elementId = 'adapter-selector-' + node.id;
        
        // Load the adapter selector component
        $('#' + containerId).html(`
            <div id="${elementId}">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin"></i> Načítám adaptéry...
                </div>
            </div>
        `);
        
        // Load adapter selector via ViewComponent
        $.ajax({
            url: '/Components/AdapterSelector',
            type: 'GET',
            data: {
                elementId: elementId,
                label: adapterType + ' Adaptér',
                adapterType: adapterType,
                existingConfiguration: JSON.stringify(node.adapterConfiguration || {})
            },
            success: function(html) {
                $('#' + containerId).html(html);
                
                // Listen for adapter configuration changes
                $('#' + elementId).on('adapter-config-changed', function(e, data) {
                    // Update node's adapter configuration
                    if (!node.adapterConfiguration) {
                        node.adapterConfiguration = {};
                    }
                    node.adapterConfiguration[data.adapterId] = data.config;
                });
            },
            error: function() {
                $('#' + containerId).html(`
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i> Chyba při načítání adaptérů
                    </div>
                `);
            }
        });
    }
</script>
}