@model OptimalyAI.ViewModels.WorkflowGraphViewModel
@{
    ViewData["Title"] = "Workflow Designer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/workflow/workflow-designer.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-toolbox.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-nodes.css" />
    <link rel="stylesheet" href="~/css/workflow/workflow-connections.css" />
}

@await Html.PartialAsync("Partials/_WorkflowHeader", Model)

<section class="content">
    <div class="container-fluid">
        @await Html.PartialAsync("Partials/_WorkflowToolbar", Model)
        
        <div class="designer-container">
            @await Html.PartialAsync("Partials/_WorkflowToolbox", Model)
            
            @await Html.PartialAsync("Partials/_WorkflowCanvas", Model)
        </div>
    </div>
</section>

@await Html.PartialAsync("Partials/_WorkflowModals", Model)
@await Html.PartialAsync("_WorkflowTestModal")

@section Scripts {
<script src="~/js/shared/project-test.js"></script>
<script type="module">
    import { WorkflowDesignerApp } from '/js/workflow/workflow-designer-app.js';
    
    // Initialize workflow designer application
    const app = new WorkflowDesignerApp({
        projectId: '@Model.ProjectId',
        workflowId: '@Model.WorkflowId',
        projectName: '@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.ProjectName))'
    });
    
    // Initialize on DOM ready
    $(document).ready(async function() {
        try {
            await app.initialize();
            console.log('Workflow Designer initialized successfully');
        } catch (error) {
            console.error('Failed to initialize Workflow Designer:', error);
            toastr.error('Chyba při inicializaci workflow designeru');
        }
    });
    
    // Expose app globally for debugging
    window.workflowDesignerApp = app;
    
    // Expose functions globally for toolbar buttons
    window.saveWorkflow = () => app.saveWorkflow();
    window.validateWorkflow = () => app.validateWorkflow();
    // testWorkflow is now provided by shared/project-test.js
    window.clearWorkflow = () => app.clearWorkflow();
    window.autoLayout = () => app.autoLayout.performLayout();
    window.zoomIn = () => app.zoomIn();
    window.zoomOut = () => app.zoomOut();
    window.zoomReset = () => app.zoomReset();
    
    // Expose modal functions
    window.updateCurrentNode = () => app.updateCurrentNode();
    window.deleteCurrentNode = () => app.deleteCurrentNode();
    window.testCurrentTool = () => app.testCurrentTool();
    window.runToolTest = () => app.runToolTest();
    
    
    // Expose showAdapterConfiguration globally for now
    window.showAdapterConfiguration = function(node) {
        app.canvasRenderer.onNodeEdit(node);
    };
    
    // Copy test logs implementation for workflow designer
    window.copyTestLogs_impl = function() {
        const logContainer = document.getElementById('testLogs');
        if (!logContainer) {
            toastr.error('Logy nejsou k dispozici');
            return;
        }
        
        // Get all log entries and format them for copying
        const logEntries = logContainer.querySelectorAll('div');
        let logText = '';
        
        logEntries.forEach(entry => {
            // Remove HTML tags and get plain text
            const text = entry.textContent || entry.innerText || '';
            if (text.trim()) {
                logText += text + '\n';
            }
        });
        
        // Create temporary textarea to copy text
        const textarea = document.createElement('textarea');
        textarea.value = logText;
        textarea.style.position = 'fixed';
        textarea.style.opacity = '0';
        document.body.appendChild(textarea);
        
        // Select and copy text
        textarea.select();
        textarea.setSelectionRange(0, 99999); // For mobile devices
        
        try {
            document.execCommand('copy');
            toastr.success('Logy byly zkopírovány do schránky');
        } catch (err) {
            toastr.error('Nepodařilo se zkopírovat logy');
            console.error('Copy failed:', err);
        }
        
        // Remove temporary textarea
        document.body.removeChild(textarea);
    };
</script>

<script>
    // Legacy adapter configuration function - will be refactored later
    // This will be moved to a module in the next phase
    window.showAdapterConfiguration = function(node) {
        const adapterType = node.type === 'InputAdapter' ? 'Input' : 'Output';
        const containerId = 'adapterConfigContainer';
        
        // Create a unique element ID
        const elementId = 'adapter-selector-' + node.id;
        
        // Load the adapter selector component
        $('#' + containerId).html(`
            <div id="${elementId}">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin"></i> Načítám adaptéry...
                </div>
            </div>
        `);
        
        // Load adapter selector via ViewComponent
        $.ajax({
            url: '/Components/AdapterSelector',
            type: 'GET',
            data: {
                elementId: elementId,
                label: adapterType + ' Adaptér',
                adapterType: adapterType,
                existingConfiguration: JSON.stringify(node.adapterConfiguration || {})
            },
            success: function(html) {
                $('#' + containerId).html(html);
                
                // Listen for adapter configuration changes
                $('#' + elementId).on('adapter-config-changed', function(e, data) {
                    // Update node's adapter configuration
                    if (!node.adapterConfiguration) {
                        node.adapterConfiguration = {};
                    }
                    node.adapterConfiguration[data.adapterId] = data.config;
                });
            },
            error: function() {
                $('#' + containerId).html(`
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle"></i> Chyba při načítání adaptérů
                    </div>
                `);
            }
        });
    }
</script>
}