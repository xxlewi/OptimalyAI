@model OptimalyAI.ViewModels.WorkflowGraphViewModel
@{
    ViewData["Title"] = "Workflow Designer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .workflow-container {
        display: flex;
        gap: 20px;
        height: calc(100vh - 200px);
    }
    
    .tool-sidebar {
        width: 300px;
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        overflow-y: auto;
    }
    
    .workflow-canvas {
        flex: 1;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
        position: relative;
        overflow: auto;
    }
    
    .tool-category {
        margin-bottom: 20px;
    }
    
    .tool-category h6 {
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }
    
    .tool-item {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        padding: 10px;
        margin-bottom: 8px;
        cursor: move;
        transition: all 0.2s;
    }
    
    .tool-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    .tool-item i {
        margin-right: 8px;
        color: #007bff;
    }
    
    .workflow-node {
        background: white;
        border: 2px solid #007bff;
        border-radius: 8px;
        padding: 15px;
        margin: 10px;
        min-width: 200px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        position: relative;
    }
    
    .workflow-node.condition {
        border-color: #ffc107;
    }
    
    .workflow-node.parallel {
        border-color: #6f42c1;
    }
    
    .node-header {
        font-weight: bold;
        margin-bottom: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .node-actions {
        display: flex;
        gap: 10px;
    }
    
    .node-actions button {
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 4px;
    }
    
    .node-actions button:hover {
        color: #007bff;
    }
    
    .node-description {
        color: #6c757d;
        font-size: 14px;
        margin-bottom: 10px;
    }
    
    .node-tools {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }
    
    .tool-badge {
        background: #e3f2fd;
        color: #1976d2;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
    }
    
    #mermaidDiagram {
        min-height: 400px;
    }
    
    .workflow-actions {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
    }
    
    .workflow-canvas.drag-over {
        border: 2px dashed #007bff;
        background: #f8f9ff;
    }
    
    .tool-item[draggable="true"] {
        cursor: grab;
    }
    
    .tool-item[draggable="true"]:active {
        cursor: grabbing;
    }
    
    .tool-item.dragging {
        opacity: 0.5;
    }
</style>

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>
                    <i class="fas fa-project-diagram"></i> Workflow Designer
                    <small class="text-muted">@Model.ProjectName</small>
                </h1>
            </div>
            <div class="col-sm-6">
                <div class="float-sm-right workflow-actions">
                    <button class="btn btn-primary" onclick="saveWorkflow()">
                        <i class="fas fa-save"></i> Uložit
                    </button>
                    <button class="btn btn-success" onclick="testWorkflow()">
                        <i class="fas fa-play"></i> Test
                    </button>
                    <button class="btn btn-info" onclick="exportWorkflow()">
                        <i class="fas fa-download"></i> Export
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<section class="content">
    <div class="container-fluid">
        <div class="workflow-container">
            <!-- Tools Sidebar -->
            <div class="tool-sidebar">
                <h5>Nástroje a komponenty</h5>
                
                <div class="tool-category">
                    <h6><i class="fas fa-shapes"></i> Základní bloky</h6>
                    <div class="tool-item" draggable="true" data-node-type="task" ondragstart="handleDragStart(event)">
                        <i class="fas fa-cog"></i> Úloha
                    </div>
                    <div class="tool-item" draggable="true" data-node-type="condition" ondragstart="handleDragStart(event)">
                        <i class="fas fa-code-branch"></i> Podmínka
                    </div>
                    <div class="tool-item" draggable="true" data-node-type="parallel" ondragstart="handleDragStart(event)">
                        <i class="fas fa-sitemap"></i> Paralelní zpracování
                    </div>
                </div>
                
                <div class="tool-category">
                    <h6><i class="fas fa-puzzle-piece"></i> AI Nástroje</h6>
                    @foreach(var tool in ViewBag.AvailableTools ?? new List<string>())
                    {
                        <div class="tool-item" draggable="true" data-tool="@tool" ondragstart="handleDragStart(event)">
                            <i class="fas fa-robot"></i> @tool.Replace("_", " ")
                        </div>
                    }
                </div>
            </div>
            
            <!-- Workflow Canvas -->
            <div class="workflow-canvas" ondrop="handleDrop(event)" ondragover="allowDrop(event)" ondragenter="handleDragEnter(event)" ondragleave="handleDragLeave(event)">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> 
                    Přetáhněte nástroje vlevo na tuto plochu pro přidání do workflow. 
                    Klikněte na uzel pro editaci.
                </div>
                
                <!-- Workflow nodes will be displayed here -->
                <div id="workflowNodes"></div>
                
                <!-- Mermaid diagram -->
                <div id="mermaidDiagram" class="mermaid"></div>
            </div>
        </div>
    </div>
</section>

<!-- Node Edit Modal -->
<div class="modal fade" id="nodeEditModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upravit uzel</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="nodeForm">
                    <div class="form-group">
                        <label>Název</label>
                        <input type="text" class="form-control" id="nodeName" required>
                    </div>
                    <div class="form-group">
                        <label>Popis</label>
                        <textarea class="form-control" id="nodeDescription" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Typ</label>
                        <select class="form-control" id="nodeType">
                            <option value="task">Úloha</option>
                            <option value="condition">Podmínka</option>
                            <option value="parallel">Paralelní zpracování</option>
                        </select>
                    </div>
                    <div class="form-group" id="toolsSection">
                        <label>AI Nástroje</label>
                        <select multiple class="form-control" id="nodeTools" size="5">
                            @foreach(var tool in ViewBag.AvailableTools ?? new List<string>())
                            {
                                <option value="@tool">@tool.Replace("_", " ")</option>
                            }
                        </select>
                        <small class="form-text text-muted">Držte Ctrl pro výběr více nástrojů</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zrušit</button>
                <button type="button" class="btn btn-primary" onclick="updateNode()">Uložit změny</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
<script>
    // Initialize
    let nodes = [];
    let edges = [];
    let currentNodeId = null;
    let nodeCounter = 1;
    
    // Initialize Mermaid
    mermaid.initialize({ 
        startOnLoad: true,
        theme: 'default',
        flowchart: {
            useMaxWidth: true,
            htmlLabels: true,
            curve: 'basis'
        }
    });
    
    // Add node
    function addNode(type) {
        const node = {
            id: `node${nodeCounter++}`,
            name: `${type.charAt(0).toUpperCase() + type.slice(1)} ${nodeCounter}`,
            type: type,
            description: '',
            tools: []
        };
        
        nodes.push(node);
        updateDiagram();
        
        toastr.success('Uzel přidán');
    }
    
    // Add tool node
    function addToolNode(tool) {
        const node = {
            id: `node${nodeCounter++}`,
            name: tool.replace(/_/g, ' '),
            type: 'task',
            description: 'AI nástroj',
            tools: [tool]
        };
        
        nodes.push(node);
        updateDiagram();
        
        toastr.success('Nástroj přidán jako uzel');
    }
    
    // Update diagram
    function updateDiagram() {
        if (nodes.length === 0) {
            // Show empty state
            document.getElementById('mermaidDiagram').innerHTML = `
                <div class="text-center text-muted py-5">
                    <i class="fas fa-project-diagram fa-3x mb-3"></i>
                    <p>Zatím nejsou přidány žádné uzly.<br>Klikněte na nástroje vlevo pro začátek.</p>
                </div>
            `;
            return;
        }
        
        let mermaidCode = 'graph TD\n';
        
        // Add start and end nodes
        mermaidCode += '    start((Start))\n';
        mermaidCode += '    end_node((Konec))\n';
        
        // Add nodes (skip built-in start and end nodes)
        nodes.filter(node => node.id !== 'start_node' && node.id !== 'end_node').forEach(node => {
            const label = node.name.replace(/"/g, "'");
            const toolsText = node.tools.length > 0 ? '<br/><small>' + node.tools.map(t => t.replace(/_/g, ' ')).join(', ') + '</small>' : '';
            
            if (node.type === 'condition') {
                mermaidCode += `    ${node.id}{"${label}${toolsText}"}\n`;
            } else if (node.type === 'parallel') {
                mermaidCode += `    ${node.id}[["${label}${toolsText}"]]\n`;
            } else {
                mermaidCode += `    ${node.id}["${label}${toolsText}"]\n`;
            }
            
            // Style based on type
            if (node.type === 'condition') {
                mermaidCode += `    style ${node.id} fill:#fff3cd,stroke:#ffc107,stroke-width:2px\n`;
            } else if (node.type === 'parallel') {
                mermaidCode += `    style ${node.id} fill:#e7e3ff,stroke:#6f42c1,stroke-width:2px\n`;
            } else {
                mermaidCode += `    style ${node.id} fill:#e3f2fd,stroke:#007bff,stroke-width:2px\n`;
            }
        });
        
        // Style start and end
        mermaidCode += '    style start fill:#d4edda,stroke:#28a745,stroke-width:2px\n';
        mermaidCode += '    style end_node fill:#f8d7da,stroke:#dc3545,stroke-width:2px\n';
        
        // Add edges
        const userNodes = nodes.filter(node => node.id !== 'start_node' && node.id !== 'end_node');
        if (userNodes.length > 0) {
            mermaidCode += `    start --> ${userNodes[0].id}\n`;
            
            for (let i = 0; i < userNodes.length - 1; i++) {
                if (userNodes[i].type === 'condition') {
                    mermaidCode += `    ${userNodes[i].id} -->|Ano| ${userNodes[i + 1].id}\n`;
                    mermaidCode += `    ${userNodes[i].id} -->|Ne| end_node\n`;
                } else {
                    mermaidCode += `    ${userNodes[i].id} --> ${userNodes[i + 1].id}\n`;
                }
            }
            
            mermaidCode += `    ${userNodes[userNodes.length - 1].id} --> end_node\n`;
        } else {
            // If no user nodes, just connect start to end
            mermaidCode += '    start --> end_node\n';
        }
        
        // Update diagram
        const diagramDiv = document.getElementById('mermaidDiagram');
        diagramDiv.innerHTML = mermaidCode;
        diagramDiv.removeAttribute('data-processed');
        
        try {
            console.log('Generated Mermaid code:', mermaidCode);
            mermaid.init(undefined, diagramDiv);
        } catch (e) {
            console.error('Mermaid error:', e);
            console.log('Failed Mermaid code:', mermaidCode);
            diagramDiv.innerHTML = `<div class="alert alert-danger">Chyba při vykreslování diagramu: ${e.message}</div>`;
        }
        
        // Add click handlers (only for user nodes, not start/end)
        setTimeout(() => {
            nodes.filter(node => node.id !== 'start_node' && node.id !== 'end_node').forEach(node => {
                const element = document.querySelector(`#${node.id}`);
                if (element) {
                    element.style.cursor = 'pointer';
                    element.onclick = () => editNode(node.id);
                }
            });
        }, 100);
    }
    
    // Edit node
    function editNode(nodeId) {
        const node = nodes.find(n => n.id === nodeId);
        if (!node) return;
        
        currentNodeId = nodeId;
        $('#nodeName').val(node.name);
        $('#nodeDescription').val(node.description);
        $('#nodeType').val(node.type);
        $('#nodeTools').val(node.tools);
        
        $('#nodeEditModal').modal('show');
    }
    
    // Update node
    function updateNode() {
        const node = nodes.find(n => n.id === currentNodeId);
        if (!node) return;
        
        node.name = $('#nodeName').val();
        node.description = $('#nodeDescription').val();
        node.type = $('#nodeType').val();
        node.tools = $('#nodeTools').val() || [];
        
        updateDiagram();
        $('#nodeEditModal').modal('hide');
        
        toastr.success('Uzel aktualizován');
    }
    
    // Save workflow
    function saveWorkflow() {
        const workflow = {
            ProjectId: '@Model.ProjectId',
            ProjectName: '@Model.ProjectName',
            Nodes: nodes.map(node => ({
                Id: node.id,
                Name: node.name,
                Description: node.description || '',
                Type: getNodeTypeEnum(node.type),
                Position: { X: 0, Y: 0 },
                Tools: node.tools || [],
                UseReAct: false,
                Orchestrator: '',
                InputPorts: [],
                OutputPorts: [],
                ConditionExpression: '',
                LoopCondition: '',
                MaxIterations: 10,
                Configuration: {},
                Status: 0
            })),
            Edges: edges,
            Metadata: {
                Description: 'Workflow vytvořený pomocí Simple Workflow Designeru',
                Version: '1.0',
                Variables: {},
                Trigger: { Type: 'Manual', CronExpression: '', EventName: '', Config: {} },
                Settings: { MaxExecutionTime: 3600, MaxRetries: 3, EnableDebugLogging: true, ErrorHandling: 'StopOnError' }
            },
            LastModified: new Date().toISOString()
        };
        
        $.ajax({
            url: '/WorkflowDesigner/SaveWorkflow',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(workflow),
            success: function(response) {
                if (response.success) {
                    toastr.success('Workflow uloženo');
                } else {
                    toastr.error('Chyba při ukládání: ' + (response.message || 'Neznámá chyba'));
                }
            },
            error: function(xhr, status, error) {
                toastr.error('Chyba při ukládání workflow: ' + error);
            }
        });
    }
    
    // Helper function to convert string type to enum value
    function getNodeTypeEnum(type) {
        switch(type) {
            case 'task': return 2; // Task
            case 'condition': return 3; // Condition
            case 'parallel': return 4; // Parallel
            default: return 2; // Task as default
        }
    }
    
    // Test workflow
    function testWorkflow() {
        if (nodes.length === 0) {
            toastr.warning('Přidejte alespoň jeden uzel');
            return;
        }
        
        toastr.info('Spouštím test workflow...');
        
        // Simulate execution
        let i = 0;
        const interval = setInterval(() => {
            if (i < nodes.length) {
                toastr.success(`Zpracovávám: ${nodes[i].name}`);
                i++;
            } else {
                clearInterval(interval);
                toastr.success('Test dokončen!');
            }
        }, 1000);
    }
    
    // Export workflow
    function exportWorkflow() {
        const workflow = {
            ProjectId: '@Model.ProjectId',
            ProjectName: '@Model.ProjectName',
            Nodes: nodes.map(node => ({
                Id: node.id,
                Name: node.name,
                Description: node.description || '',
                Type: getNodeTypeEnum(node.type),
                Position: { X: 0, Y: 0 },
                Tools: node.tools || [],
                UseReAct: false,
                Orchestrator: '',
                InputPorts: [],
                OutputPorts: [],
                ConditionExpression: '',
                LoopCondition: '',
                MaxIterations: 10,
                Configuration: {},
                Status: 0
            })),
            Edges: edges,
            Metadata: {
                Description: 'Workflow vytvořený pomocí Simple Workflow Designeru',
                Version: '1.0',
                Variables: {},
                Trigger: { Type: 'Manual', CronExpression: '', EventName: '', Config: {} },
                Settings: { MaxExecutionTime: 3600, MaxRetries: 3, EnableDebugLogging: true, ErrorHandling: 'StopOnError' }
            },
            LastModified: new Date().toISOString(),
            MermaidCode: document.getElementById('mermaidDiagram').innerHTML
        };
        
        const json = JSON.stringify(workflow, null, 2);
        const blob = new Blob([json], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `workflow-${workflow.ProjectName.replace(/[^a-zA-Z0-9]/g, '_')}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
        toastr.success('Workflow exportováno');
    }
    
    // Load initial data if exists
    $(document).ready(function() {
        const model = @Html.Raw(Json.Serialize(Model));
        if (model && model.nodes && model.nodes.length > 0) {
            nodes = model.nodes;
            edges = model.edges || [];
        } else {
            // Add sample nodes for demo
            nodes = [
                { id: 'start_node', name: 'Začátek', type: 'task', description: 'Vstupní bod workflow', tools: [] },
                { id: 'node1', name: 'Vyhledání produktu', type: 'task', description: 'Vyhledá podobné produkty', tools: ['web_search'] },
                { id: 'node2', name: 'Má výsledky?', type: 'condition', description: 'Kontrola zda byly nalezeny produkty', tools: [] },
                { id: 'node3', name: 'Analýza obrázků', type: 'task', description: 'Analyzuje obrázky produktů', tools: ['image_analyzer'] },
                { id: 'final_node', name: 'Konec', type: 'task', description: 'Výstup workflow', tools: [] }
            ];
        }
        updateDiagram();
    });
</script>
}