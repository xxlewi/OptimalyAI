@{
    ViewData["Title"] = "Workflow Monitor";
    var executionId = Context.Request.Query["executionId"].ToString();
    var projectId = Context.Request.Query["projectId"].ToString();
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Workflow Monitor</h3>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" onclick="refreshStatus()">
                        <i class="fas fa-sync-alt"></i> Obnovit
                    </button>
                    <button type="button" class="btn btn-danger btn-sm" onclick="cancelExecution()" id="cancelButton">
                        <i class="fas fa-stop"></i> Zrušit
                    </button>
                </div>
            </div>
            <div class="card-body">
                <!-- Execution Status -->
                <div class="row">
                    <div class="col-md-8">
                        <div id="executionInfo">
                            <h5>Informace o spuštění</h5>
                            <dl class="row">
                                <dt class="col-sm-3">ID spuštění:</dt>
                                <dd class="col-sm-9"><code id="executionIdDisplay">-</code></dd>
                                
                                <dt class="col-sm-3">Projekt:</dt>
                                <dd class="col-sm-9" id="projectName">-</dd>
                                
                                <dt class="col-sm-3">Status:</dt>
                                <dd class="col-sm-9" id="status">
                                    <span class="badge badge-secondary">Načítání...</span>
                                </dd>
                                
                                <dt class="col-sm-3">Spuštěno:</dt>
                                <dd class="col-sm-9" id="startedAt">-</dd>
                                
                                <dt class="col-sm-3">Dokončeno:</dt>
                                <dd class="col-sm-9" id="completedAt">-</dd>
                                
                                <dt class="col-sm-3">Trvání:</dt>
                                <dd class="col-sm-9" id="duration">-</dd>
                                
                                <dt class="col-sm-3">Spuštěno kým:</dt>
                                <dd class="col-sm-9" id="initiatedBy">-</dd>
                            </dl>
                        </div>
                        
                        <!-- Stage Progress -->
                        <div class="mt-4">
                            <h5>Progress jednotlivých stages</h5>
                            <div id="stagesProgress" class="timeline">
                                <!-- Stages will be populated here -->
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-4">
                        <!-- Overall Progress -->
                        <div class="info-box">
                            <span class="info-box-icon bg-info"><i class="fas fa-tasks"></i></span>
                            <div class="info-box-content">
                                <span class="info-box-text">Celkový progress</span>
                                <div class="progress">
                                    <div class="progress-bar bg-info" id="overallProgress" style="width: 0%"></div>
                                </div>
                                <span class="progress-description" id="progressText">0% dokončeno</span>
                            </div>
                        </div>
                        
                        <!-- Current Stage -->
                        <div class="info-box">
                            <span class="info-box-icon bg-warning"><i class="fas fa-cog fa-spin"></i></span>
                            <div class="info-box-content">
                                <span class="info-box-text">Aktuální stage</span>
                                <span class="info-box-number" id="currentStage">-</span>
                            </div>
                        </div>
                        
                        <!-- Execution Logs -->
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title">Execution Logs</h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="direct-chat-messages" style="height: 300px; overflow-y: auto;" id="logsContainer">
                                    <!-- Logs will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                @if (!string.IsNullOrEmpty(projectId))
                {
                    <a href="/Projects/Details/@projectId" class="btn btn-default">
                        <i class="fas fa-arrow-left"></i> Zpět na projekt
                    </a>
                }
                <button type="button" class="btn btn-primary" onclick="viewResults()">
                    <i class="fas fa-chart-bar"></i> Zobrazit výsledky
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft-signalr/dist/browser/signalr.min.js"></script>
    <script>
        let executionId = '@executionId';
        let projectId = '@projectId';
        let refreshInterval;
        let isCompleted = false;
        
        // Initialize
        $(document).ready(function() {
            if (executionId) {
                $('#executionIdDisplay').text(executionId);
                refreshStatus();
                // Refresh every 2 seconds
                refreshInterval = setInterval(refreshStatus, 2000);
            } else if (projectId) {
                // Load recent executions for project
                loadProjectExecutions();
            }
            
            // Setup SignalR connection for real-time updates
            setupSignalR();
        });
        
        function refreshStatus() {
            if (!executionId || isCompleted) return;
            
            fetch(`/api/workflow/executions/${executionId}/status`)
                .then(response => response.json())
                .then(result => {
                    if (result.isSuccess) {
                        updateExecutionStatus(result.data);
                    }
                })
                .catch(error => console.error('Error fetching status:', error));
        }
        
        function updateExecutionStatus(data) {
            // Update basic info
            $('#projectName').text(data.projectName || '-');
            $('#startedAt').text(formatDateTime(data.startedAt));
            $('#initiatedBy').text(data.initiatedBy || '-');
            
            // Update status badge
            let statusBadge = '';
            switch(data.status) {
                case 'Running':
                    statusBadge = '<span class="badge badge-primary"><i class="fas fa-spinner fa-spin"></i> Běží</span>';
                    break;
                case 'Completed':
                    statusBadge = '<span class="badge badge-success"><i class="fas fa-check"></i> Dokončeno</span>';
                    isCompleted = true;
                    break;
                case 'Failed':
                    statusBadge = '<span class="badge badge-danger"><i class="fas fa-times"></i> Selhalo</span>';
                    isCompleted = true;
                    break;
                case 'Cancelled':
                    statusBadge = '<span class="badge badge-warning"><i class="fas fa-ban"></i> Zrušeno</span>';
                    isCompleted = true;
                    break;
                default:
                    statusBadge = '<span class="badge badge-secondary">' + data.status + '</span>';
            }
            $('#status').html(statusBadge);
            
            // Update completion info
            if (data.completedAt) {
                $('#completedAt').text(formatDateTime(data.completedAt));
                $('#duration').text(formatDuration(data.durationSeconds));
            }
            
            // Update current stage
            $('#currentStage').text(data.currentStage || 'Inicializace');
            
            // Update progress
            const progress = data.completedStages ? (data.completedStages / data.totalStages) * 100 : 0;
            $('#overallProgress').css('width', progress + '%');
            $('#progressText').text(Math.round(progress) + '% dokončeno');
            
            // Update logs
            if (data.logs && data.logs.length > 0) {
                updateLogs(data.logs);
            }
            
            // Load stage results if available
            if (executionId) {
                loadStageResults();
            }
            
            // Stop refreshing if completed
            if (isCompleted && refreshInterval) {
                clearInterval(refreshInterval);
                $('#cancelButton').prop('disabled', true);
            }
        }
        
        function loadStageResults() {
            fetch(`/api/workflow/executions/${executionId}/stages`)
                .then(response => response.json())
                .then(result => {
                    if (result.isSuccess) {
                        updateStagesProgress(result.data);
                    }
                })
                .catch(error => console.error('Error fetching stage results:', error));
        }
        
        function updateStagesProgress(stages) {
            const container = $('#stagesProgress');
            container.empty();
            
            stages.forEach((stage, index) => {
                const iconClass = stage.success ? 'fa-check-circle text-success' : 
                                stage.success === false ? 'fa-times-circle text-danger' : 
                                'fa-circle text-gray';
                                
                const timelineItem = `
                    <div>
                        <i class="fas ${iconClass} bg-gray"></i>
                        <div class="timeline-item">
                            <span class="time"><i class="fas fa-clock"></i> ${formatDateTime(stage.startedAt)}</span>
                            <h3 class="timeline-header">${stage.stageName}</h3>
                            <div class="timeline-body">
                                ${stage.message || 'Zpracovává se...'}
                                ${stage.duration ? '<br><small>Trvání: ' + formatDuration(stage.duration) + '</small>' : ''}
                            </div>
                        </div>
                    </div>
                `;
                container.append(timelineItem);
            });
        }
        
        function updateLogs(logs) {
            const container = $('#logsContainer');
            container.empty();
            
            logs.forEach(log => {
                const logClass = log.level === 'Error' ? 'text-danger' : 
                               log.level === 'Warning' ? 'text-warning' : '';
                               
                const logItem = `
                    <div class="direct-chat-msg">
                        <div class="direct-chat-info clearfix">
                            <span class="direct-chat-name float-left">${log.source}</span>
                            <span class="direct-chat-timestamp float-right">${formatDateTime(log.timestamp)}</span>
                        </div>
                        <div class="direct-chat-text ${logClass}">
                            ${log.message}
                        </div>
                    </div>
                `;
                container.append(logItem);
            });
            
            // Scroll to bottom
            container.scrollTop(container[0].scrollHeight);
        }
        
        function cancelExecution() {
            if (!executionId || isCompleted) return;
            
            if (confirm('Opravdu chcete zrušit běžící workflow?')) {
                fetch(`/api/workflow/executions/${executionId}/cancel`, {
                    method: 'POST'
                })
                .then(response => {
                    if (response.ok) {
                        toastr.success('Workflow byl zrušen');
                        refreshStatus();
                    } else {
                        toastr.error('Nepodařilo se zrušit workflow');
                    }
                })
                .catch(error => {
                    toastr.error('Chyba při rušení workflow');
                    console.error('Error:', error);
                });
            }
        }
        
        function viewResults() {
            if (executionId) {
                window.location.href = `/ProjectWorkflows/TestResults?executionId=${executionId}`;
            }
        }
        
        function setupSignalR() {
            // Create SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/workflowHub")
                .withAutomaticReconnect()
                .build();
            
            // Setup event handlers
            connection.on("WorkflowStarted", function(data) {
                console.log("Workflow started:", data);
                toastr.info('Workflow byl spuštěn');
                refreshStatus();
            });
            
            connection.on("StageStarted", function(data) {
                console.log("Stage started:", data);
                $('#currentStage').text(data.stageName);
                toastr.info(`Stage '${data.stageName}' zahájena`);
            });
            
            connection.on("StageCompleted", function(data) {
                console.log("Stage completed:", data);
                toastr.success(`Stage '${data.stageName}' dokončena`);
                refreshStatus();
            });
            
            connection.on("StageFailed", function(data) {
                console.log("Stage failed:", data);
                toastr.error(`Stage '${data.stageName}' selhala: ${data.errorMessage}`);
                refreshStatus();
            });
            
            connection.on("ToolExecuted", function(data) {
                console.log("Tool executed:", data);
                const icon = data.success ? 'check' : 'times';
                const color = data.success ? 'success' : 'danger';
                toastr.info(`<i class="fas fa-${icon} text-${color}"></i> Tool '${data.toolName}' ${data.success ? 'úspěšně vykonán' : 'selhal'}`);
            });
            
            connection.on("WorkflowCompleted", function(data) {
                console.log("Workflow completed:", data);
                toastr.success('Workflow byl úspěšně dokončen');
                isCompleted = true;
                refreshStatus();
            });
            
            connection.on("WorkflowFailed", function(data) {
                console.log("Workflow failed:", data);
                toastr.error(`Workflow selhal: ${data.errorMessage}`);
                isCompleted = true;
                refreshStatus();
            });
            
            connection.on("WorkflowCancelled", function(data) {
                console.log("Workflow cancelled:", data);
                toastr.warning('Workflow byl zrušen');
                isCompleted = true;
                refreshStatus();
            });
            
            connection.on("LogAdded", function(data) {
                console.log("Log added:", data);
                // Add log to the logs container
                const logClass = data.level === 'Error' ? 'text-danger' : 
                               data.level === 'Warning' ? 'text-warning' : '';
                               
                const logItem = `
                    <div class="direct-chat-msg">
                        <div class="direct-chat-info clearfix">
                            <span class="direct-chat-name float-left">${data.source}</span>
                            <span class="direct-chat-timestamp float-right">${formatDateTime(data.timestamp)}</span>
                        </div>
                        <div class="direct-chat-text ${logClass}">
                            ${data.message}
                        </div>
                    </div>
                `;
                $('#logsContainer').append(logItem);
                $('#logsContainer').scrollTop($('#logsContainer')[0].scrollHeight);
            });
            
            connection.on("ExecutionStatus", function(data) {
                console.log("Execution status:", data);
                updateExecutionStatus(data);
            });
            
            connection.on("Error", function(message) {
                console.error("SignalR error:", message);
                toastr.error(message);
            });
            
            // Start connection
            connection.start().then(function() {
                console.log("SignalR connected");
                
                // Join execution monitoring
                if (executionId) {
                    connection.invoke("JoinExecution", executionId).catch(function(err) {
                        console.error("Error joining execution:", err);
                    });
                }
                
                // Join project monitoring
                if (projectId) {
                    connection.invoke("JoinProject", projectId).catch(function(err) {
                        console.error("Error joining project:", err);
                    });
                }
            }).catch(function(err) {
                console.error("SignalR connection error:", err);
                toastr.error('Nepodařilo se připojit k real-time monitoringu');
            });
            
            // Cleanup on page unload
            window.addEventListener('beforeunload', function() {
                if (executionId) {
                    connection.invoke("LeaveExecution", executionId);
                }
                if (projectId) {
                    connection.invoke("LeaveProject", projectId);
                }
                connection.stop();
            });
        }
        
        function loadProjectExecutions() {
            // TODO: Load recent executions for project
        }
        
        // Helper functions
        function formatDateTime(dateString) {
            if (!dateString) return '-';
            const date = new Date(dateString);
            return date.toLocaleDateString('cs-CZ') + ' ' + date.toLocaleTimeString('cs-CZ');
        }
        
        function formatDuration(seconds) {
            if (!seconds) return '-';
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = Math.floor(seconds % 60);
            return `${minutes}m ${remainingSeconds}s`;
        }
    </script>
}